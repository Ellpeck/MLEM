### YamlMime:ManagedReference
items:
- uid: MLEM.Extensions.NumberExtensions
  commentId: T:MLEM.Extensions.NumberExtensions
  id: NumberExtensions
  parent: MLEM.Extensions
  children:
  - MLEM.Extensions.NumberExtensions.Ceil(System.Single)
  - MLEM.Extensions.NumberExtensions.CeilCopy(Microsoft.Xna.Framework.Vector2)
  - MLEM.Extensions.NumberExtensions.CeilCopy(Microsoft.Xna.Framework.Vector3)
  - MLEM.Extensions.NumberExtensions.CeilCopy(Microsoft.Xna.Framework.Vector4)
  - MLEM.Extensions.NumberExtensions.Divide(Microsoft.Xna.Framework.Point,System.Single)
  - MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)
  - MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  - MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  - MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)
  - MLEM.Extensions.NumberExtensions.Equals(System.Single,System.Single,System.Single)
  - MLEM.Extensions.NumberExtensions.Floor(System.Single)
  - MLEM.Extensions.NumberExtensions.FloorCopy(Microsoft.Xna.Framework.Vector2)
  - MLEM.Extensions.NumberExtensions.FloorCopy(Microsoft.Xna.Framework.Vector3)
  - MLEM.Extensions.NumberExtensions.FloorCopy(Microsoft.Xna.Framework.Vector4)
  - MLEM.Extensions.NumberExtensions.GetPoints(MLEM.Misc.RectangleF,System.Single)
  - MLEM.Extensions.NumberExtensions.GetPoints(Microsoft.Xna.Framework.Rectangle)
  - MLEM.Extensions.NumberExtensions.Multiply(Microsoft.Xna.Framework.Point,System.Single)
  - MLEM.Extensions.NumberExtensions.OffsetCopy(MLEM.Misc.RectangleF,Microsoft.Xna.Framework.Vector2)
  - MLEM.Extensions.NumberExtensions.OffsetCopy(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Point)
  - MLEM.Extensions.NumberExtensions.Penetrate(MLEM.Misc.RectangleF,MLEM.Misc.RectangleF,Microsoft.Xna.Framework.Vector2@,System.Single@)
  - MLEM.Extensions.NumberExtensions.Rotation(Microsoft.Xna.Framework.Matrix)
  - MLEM.Extensions.NumberExtensions.RotationVector(Microsoft.Xna.Framework.Matrix)
  - MLEM.Extensions.NumberExtensions.RotationVector(Microsoft.Xna.Framework.Quaternion)
  - MLEM.Extensions.NumberExtensions.Scale(Microsoft.Xna.Framework.Matrix)
  - MLEM.Extensions.NumberExtensions.Shrink(MLEM.Misc.RectangleF,MLEM.Misc.Padding)
  - MLEM.Extensions.NumberExtensions.Shrink(MLEM.Misc.RectangleF,Microsoft.Xna.Framework.Vector2)
  - MLEM.Extensions.NumberExtensions.Shrink(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Point)
  - MLEM.Extensions.NumberExtensions.ToVector2(Microsoft.Xna.Framework.Vector3)
  - MLEM.Extensions.NumberExtensions.Transform(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Matrix)
  langs:
  - csharp
  - vb
  name: NumberExtensions
  nameWithType: NumberExtensions
  fullName: MLEM.Extensions.NumberExtensions
  type: Class
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: NumberExtensions
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 9
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: A set of extensions for dealing with <xref href="System.Single" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Vector4" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Matrix" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Misc.RectangleF" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static class NumberExtensions
    content.vb: Public Module NumberExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: MLEM.Extensions.NumberExtensions.Floor(System.Single)
  commentId: M:MLEM.Extensions.NumberExtensions.Floor(System.Single)
  id: Floor(System.Single)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Floor(float)
  nameWithType: NumberExtensions.Floor(float)
  fullName: MLEM.Extensions.NumberExtensions.Floor(float)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Floor
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 12
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Returns the largest integer less than or equal to the specified decimal number.
  example: []
  syntax:
    content: public static int Floor(this float f)
    parameters:
    - id: f
      type: System.Single
    return:
      type: System.Int32
      description: The largest integer less than or equal to <code class="paramref">d</code>.  Note that the method returns an integral value of type <xref href="System.Math" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function Floor(f As Single) As Integer
  overload: MLEM.Extensions.NumberExtensions.Floor*
  nameWithType.vb: NumberExtensions.Floor(Single)
  fullName.vb: MLEM.Extensions.NumberExtensions.Floor(Single)
  name.vb: Floor(Single)
- uid: MLEM.Extensions.NumberExtensions.Ceil(System.Single)
  commentId: M:MLEM.Extensions.NumberExtensions.Ceil(System.Single)
  id: Ceil(System.Single)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Ceil(float)
  nameWithType: NumberExtensions.Ceil(float)
  fullName: MLEM.Extensions.NumberExtensions.Ceil(float)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Ceil
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 17
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Returns the smallest integral value that is greater than or equal to the specified decimal number.
  example: []
  syntax:
    content: public static int Ceil(this float f)
    parameters:
    - id: f
      type: System.Single
    return:
      type: System.Int32
      description: The smallest integral value that is greater than or equal to <code class="paramref">d</code>. Note that this method returns a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> instead of an integral type.
    content.vb: Public Shared Function Ceil(f As Single) As Integer
  overload: MLEM.Extensions.NumberExtensions.Ceil*
  nameWithType.vb: NumberExtensions.Ceil(Single)
  fullName.vb: MLEM.Extensions.NumberExtensions.Ceil(Single)
  name.vb: Ceil(Single)
- uid: MLEM.Extensions.NumberExtensions.Equals(System.Single,System.Single,System.Single)
  commentId: M:MLEM.Extensions.NumberExtensions.Equals(System.Single,System.Single,System.Single)
  id: Equals(System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Equals(float, float, float)
  nameWithType: NumberExtensions.Equals(float, float, float)
  fullName: MLEM.Extensions.NumberExtensions.Equals(float, float, float)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Equals
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 28
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Checks for decimal equality with a given tolerance.
  example: []
  syntax:
    content: public static bool Equals(this float first, float second, float tolerance)
    parameters:
    - id: first
      type: System.Single
      description: The first number to equate
    - id: second
      type: System.Single
      description: The second number to equate
    - id: tolerance
      type: System.Single
      description: The equality tolerance
    return:
      type: System.Boolean
      description: Whether or not the two values are different by at most <code>tolerance</code>
    content.vb: Public Shared Function Equals(first As Single, second As Single, tolerance As Single) As Boolean
  overload: MLEM.Extensions.NumberExtensions.Equals*
  nameWithType.vb: NumberExtensions.Equals(Single, Single, Single)
  fullName.vb: MLEM.Extensions.NumberExtensions.Equals(Single, Single, Single)
  name.vb: Equals(Single, Single, Single)
- uid: MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  id: Equals(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Equals(Vector2, Vector2, float)
  nameWithType: NumberExtensions.Equals(Vector2, Vector2, float)
  fullName: MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, float)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Equals
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 33
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Checks for decimal equality with a given tolerance.
  example: []
  syntax:
    content: public static bool Equals(this Vector2 first, Vector2 second, float tolerance)
    parameters:
    - id: first
      type: Microsoft.Xna.Framework.Vector2
      description: The first number to equate
    - id: second
      type: Microsoft.Xna.Framework.Vector2
      description: The second number to equate
    - id: tolerance
      type: System.Single
      description: The equality tolerance
    return:
      type: System.Boolean
      description: Whether or not the two values are different by at most <code>tolerance</code>
    content.vb: Public Shared Function Equals(first As Vector2, second As Vector2, tolerance As Single) As Boolean
  overload: MLEM.Extensions.NumberExtensions.Equals*
  nameWithType.vb: NumberExtensions.Equals(Vector2, Vector2, Single)
  fullName.vb: MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Single)
  name.vb: Equals(Vector2, Vector2, Single)
- uid: MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  commentId: M:MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  id: Equals(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Equals(Vector3, Vector3, float)
  nameWithType: NumberExtensions.Equals(Vector3, Vector3, float)
  fullName: MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, float)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Equals
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 38
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Checks for decimal equality with a given tolerance.
  example: []
  syntax:
    content: public static bool Equals(this Vector3 first, Vector3 second, float tolerance)
    parameters:
    - id: first
      type: Microsoft.Xna.Framework.Vector3
      description: The first number to equate
    - id: second
      type: Microsoft.Xna.Framework.Vector3
      description: The second number to equate
    - id: tolerance
      type: System.Single
      description: The equality tolerance
    return:
      type: System.Boolean
      description: Whether or not the two values are different by at most <code>tolerance</code>
    content.vb: Public Shared Function Equals(first As Vector3, second As Vector3, tolerance As Single) As Boolean
  overload: MLEM.Extensions.NumberExtensions.Equals*
  nameWithType.vb: NumberExtensions.Equals(Vector3, Vector3, Single)
  fullName.vb: MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Single)
  name.vb: Equals(Vector3, Vector3, Single)
- uid: MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)
  commentId: M:MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)
  id: Equals(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Equals(Vector4, Vector4, float)
  nameWithType: NumberExtensions.Equals(Vector4, Vector4, float)
  fullName: MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4, float)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Equals
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 43
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Checks for decimal equality with a given tolerance.
  example: []
  syntax:
    content: public static bool Equals(this Vector4 first, Vector4 second, float tolerance)
    parameters:
    - id: first
      type: Microsoft.Xna.Framework.Vector4
      description: The first number to equate
    - id: second
      type: Microsoft.Xna.Framework.Vector4
      description: The second number to equate
    - id: tolerance
      type: System.Single
      description: The equality tolerance
    return:
      type: System.Boolean
      description: Whether or not the two values are different by at most <code>tolerance</code>
    content.vb: Public Shared Function Equals(first As Vector4, second As Vector4, tolerance As Single) As Boolean
  overload: MLEM.Extensions.NumberExtensions.Equals*
  nameWithType.vb: NumberExtensions.Equals(Vector4, Vector4, Single)
  fullName.vb: MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4, Single)
  name.vb: Equals(Vector4, Vector4, Single)
- uid: MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)
  commentId: M:MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)
  id: Equals(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Equals(Quaternion, Quaternion, float)
  nameWithType: NumberExtensions.Equals(Quaternion, Quaternion, float)
  fullName: MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion, float)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Equals
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 48
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Checks for decimal equality with a given tolerance.
  example: []
  syntax:
    content: public static bool Equals(this Quaternion first, Quaternion second, float tolerance)
    parameters:
    - id: first
      type: Microsoft.Xna.Framework.Quaternion
      description: The first number to equate
    - id: second
      type: Microsoft.Xna.Framework.Quaternion
      description: The second number to equate
    - id: tolerance
      type: System.Single
      description: The equality tolerance
    return:
      type: System.Boolean
      description: Whether or not the two values are different by at most <code>tolerance</code>
    content.vb: Public Shared Function Equals(first As Quaternion, second As Quaternion, tolerance As Single) As Boolean
  overload: MLEM.Extensions.NumberExtensions.Equals*
  nameWithType.vb: NumberExtensions.Equals(Quaternion, Quaternion, Single)
  fullName.vb: MLEM.Extensions.NumberExtensions.Equals(Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion, Single)
  name.vb: Equals(Quaternion, Quaternion, Single)
- uid: MLEM.Extensions.NumberExtensions.FloorCopy(Microsoft.Xna.Framework.Vector2)
  commentId: M:MLEM.Extensions.NumberExtensions.FloorCopy(Microsoft.Xna.Framework.Vector2)
  id: FloorCopy(Microsoft.Xna.Framework.Vector2)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: FloorCopy(Vector2)
  nameWithType: NumberExtensions.FloorCopy(Vector2)
  fullName: MLEM.Extensions.NumberExtensions.FloorCopy(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: FloorCopy
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 53
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Returns the largest integer less than or equal to the specified decimal number.
  example: []
  syntax:
    content: public static Vector2 FloorCopy(this Vector2 vec)
    parameters:
    - id: vec
      type: Microsoft.Xna.Framework.Vector2
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The largest integer less than or equal to <code class="paramref">d</code>.  Note that the method returns an integral value of type <xref href="System.Math" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function FloorCopy(vec As Vector2) As Vector2
  overload: MLEM.Extensions.NumberExtensions.FloorCopy*
- uid: MLEM.Extensions.NumberExtensions.FloorCopy(Microsoft.Xna.Framework.Vector3)
  commentId: M:MLEM.Extensions.NumberExtensions.FloorCopy(Microsoft.Xna.Framework.Vector3)
  id: FloorCopy(Microsoft.Xna.Framework.Vector3)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: FloorCopy(Vector3)
  nameWithType: NumberExtensions.FloorCopy(Vector3)
  fullName: MLEM.Extensions.NumberExtensions.FloorCopy(Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: FloorCopy
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 58
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Returns the largest integer less than or equal to the specified decimal number.
  example: []
  syntax:
    content: public static Vector3 FloorCopy(this Vector3 vec)
    parameters:
    - id: vec
      type: Microsoft.Xna.Framework.Vector3
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The largest integer less than or equal to <code class="paramref">d</code>.  Note that the method returns an integral value of type <xref href="System.Math" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function FloorCopy(vec As Vector3) As Vector3
  overload: MLEM.Extensions.NumberExtensions.FloorCopy*
- uid: MLEM.Extensions.NumberExtensions.FloorCopy(Microsoft.Xna.Framework.Vector4)
  commentId: M:MLEM.Extensions.NumberExtensions.FloorCopy(Microsoft.Xna.Framework.Vector4)
  id: FloorCopy(Microsoft.Xna.Framework.Vector4)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: FloorCopy(Vector4)
  nameWithType: NumberExtensions.FloorCopy(Vector4)
  fullName: MLEM.Extensions.NumberExtensions.FloorCopy(Microsoft.Xna.Framework.Vector4)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: FloorCopy
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 63
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Returns the largest integer less than or equal to the specified decimal number.
  example: []
  syntax:
    content: public static Vector4 FloorCopy(this Vector4 vec)
    parameters:
    - id: vec
      type: Microsoft.Xna.Framework.Vector4
    return:
      type: Microsoft.Xna.Framework.Vector4
      description: The largest integer less than or equal to <code class="paramref">d</code>.  Note that the method returns an integral value of type <xref href="System.Math" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function FloorCopy(vec As Vector4) As Vector4
  overload: MLEM.Extensions.NumberExtensions.FloorCopy*
- uid: MLEM.Extensions.NumberExtensions.CeilCopy(Microsoft.Xna.Framework.Vector2)
  commentId: M:MLEM.Extensions.NumberExtensions.CeilCopy(Microsoft.Xna.Framework.Vector2)
  id: CeilCopy(Microsoft.Xna.Framework.Vector2)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: CeilCopy(Vector2)
  nameWithType: NumberExtensions.CeilCopy(Vector2)
  fullName: MLEM.Extensions.NumberExtensions.CeilCopy(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CeilCopy
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 68
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Returns the smallest integral value that is greater than or equal to the specified decimal number.
  example: []
  syntax:
    content: public static Vector2 CeilCopy(this Vector2 vec)
    parameters:
    - id: vec
      type: Microsoft.Xna.Framework.Vector2
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The smallest integral value that is greater than or equal to <code class="paramref">d</code>. Note that this method returns a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> instead of an integral type.
    content.vb: Public Shared Function CeilCopy(vec As Vector2) As Vector2
  overload: MLEM.Extensions.NumberExtensions.CeilCopy*
- uid: MLEM.Extensions.NumberExtensions.CeilCopy(Microsoft.Xna.Framework.Vector3)
  commentId: M:MLEM.Extensions.NumberExtensions.CeilCopy(Microsoft.Xna.Framework.Vector3)
  id: CeilCopy(Microsoft.Xna.Framework.Vector3)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: CeilCopy(Vector3)
  nameWithType: NumberExtensions.CeilCopy(Vector3)
  fullName: MLEM.Extensions.NumberExtensions.CeilCopy(Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CeilCopy
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 73
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Returns the smallest integral value that is greater than or equal to the specified decimal number.
  example: []
  syntax:
    content: public static Vector3 CeilCopy(this Vector3 vec)
    parameters:
    - id: vec
      type: Microsoft.Xna.Framework.Vector3
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The smallest integral value that is greater than or equal to <code class="paramref">d</code>. Note that this method returns a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> instead of an integral type.
    content.vb: Public Shared Function CeilCopy(vec As Vector3) As Vector3
  overload: MLEM.Extensions.NumberExtensions.CeilCopy*
- uid: MLEM.Extensions.NumberExtensions.CeilCopy(Microsoft.Xna.Framework.Vector4)
  commentId: M:MLEM.Extensions.NumberExtensions.CeilCopy(Microsoft.Xna.Framework.Vector4)
  id: CeilCopy(Microsoft.Xna.Framework.Vector4)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: CeilCopy(Vector4)
  nameWithType: NumberExtensions.CeilCopy(Vector4)
  fullName: MLEM.Extensions.NumberExtensions.CeilCopy(Microsoft.Xna.Framework.Vector4)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CeilCopy
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 78
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Returns the smallest integral value that is greater than or equal to the specified decimal number.
  example: []
  syntax:
    content: public static Vector4 CeilCopy(this Vector4 vec)
    parameters:
    - id: vec
      type: Microsoft.Xna.Framework.Vector4
    return:
      type: Microsoft.Xna.Framework.Vector4
      description: The smallest integral value that is greater than or equal to <code class="paramref">d</code>. Note that this method returns a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> instead of an integral type.
    content.vb: Public Shared Function CeilCopy(vec As Vector4) As Vector4
  overload: MLEM.Extensions.NumberExtensions.CeilCopy*
- uid: MLEM.Extensions.NumberExtensions.Multiply(Microsoft.Xna.Framework.Point,System.Single)
  commentId: M:MLEM.Extensions.NumberExtensions.Multiply(Microsoft.Xna.Framework.Point,System.Single)
  id: Multiply(Microsoft.Xna.Framework.Point,System.Single)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Multiply(Point, float)
  nameWithType: NumberExtensions.Multiply(Point, float)
  fullName: MLEM.Extensions.NumberExtensions.Multiply(Microsoft.Xna.Framework.Point, float)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Multiply
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 88
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Multiplies a point by a given scalar.
  example: []
  syntax:
    content: public static Point Multiply(this Point point, float f)
    parameters:
    - id: point
      type: Microsoft.Xna.Framework.Point
      description: The point
    - id: f
      type: System.Single
      description: The scalar
    return:
      type: Microsoft.Xna.Framework.Point
      description: The point, multiplied by the scalar memberwise
    content.vb: Public Shared Function Multiply(point As Point, f As Single) As Point
  overload: MLEM.Extensions.NumberExtensions.Multiply*
  nameWithType.vb: NumberExtensions.Multiply(Point, Single)
  fullName.vb: MLEM.Extensions.NumberExtensions.Multiply(Microsoft.Xna.Framework.Point, Single)
  name.vb: Multiply(Point, Single)
- uid: MLEM.Extensions.NumberExtensions.Divide(Microsoft.Xna.Framework.Point,System.Single)
  commentId: M:MLEM.Extensions.NumberExtensions.Divide(Microsoft.Xna.Framework.Point,System.Single)
  id: Divide(Microsoft.Xna.Framework.Point,System.Single)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Divide(Point, float)
  nameWithType: NumberExtensions.Divide(Point, float)
  fullName: MLEM.Extensions.NumberExtensions.Divide(Microsoft.Xna.Framework.Point, float)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Divide
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 98
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Divides a point by a given scalar.
  example: []
  syntax:
    content: public static Point Divide(this Point point, float f)
    parameters:
    - id: point
      type: Microsoft.Xna.Framework.Point
      description: The point
    - id: f
      type: System.Single
      description: The scalar
    return:
      type: Microsoft.Xna.Framework.Point
      description: The point, divided by the scalar memberwise
    content.vb: Public Shared Function Divide(point As Point, f As Single) As Point
  overload: MLEM.Extensions.NumberExtensions.Divide*
  nameWithType.vb: NumberExtensions.Divide(Point, Single)
  fullName.vb: MLEM.Extensions.NumberExtensions.Divide(Microsoft.Xna.Framework.Point, Single)
  name.vb: Divide(Point, Single)
- uid: MLEM.Extensions.NumberExtensions.Transform(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Matrix)
  commentId: M:MLEM.Extensions.NumberExtensions.Transform(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Matrix)
  id: Transform(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Matrix)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Transform(Point, Matrix)
  nameWithType: NumberExtensions.Transform(Point, Matrix)
  fullName: MLEM.Extensions.NumberExtensions.Transform(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Matrix)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Transform
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 108
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Transforms a point by a given matrix.
  example: []
  syntax:
    content: public static Point Transform(this Point position, Matrix matrix)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Point
      description: The point
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The matrix
    return:
      type: Microsoft.Xna.Framework.Point
      description: The point, transformed by the matrix
    content.vb: Public Shared Function Transform(position As Point, matrix As Matrix) As Point
  overload: MLEM.Extensions.NumberExtensions.Transform*
- uid: MLEM.Extensions.NumberExtensions.OffsetCopy(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Point)
  commentId: M:MLEM.Extensions.NumberExtensions.OffsetCopy(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Point)
  id: OffsetCopy(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Point)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: OffsetCopy(Rectangle, Point)
  nameWithType: NumberExtensions.OffsetCopy(Rectangle, Point)
  fullName: MLEM.Extensions.NumberExtensions.OffsetCopy(Microsoft.Xna.Framework.Rectangle, Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OffsetCopy
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 121
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: >-
    Returns a copy of the given rectangle, moved by the given point.

    The rectangle's size remains unchanged.
  example: []
  syntax:
    content: public static Rectangle OffsetCopy(this Rectangle rect, Point offset)
    parameters:
    - id: rect
      type: Microsoft.Xna.Framework.Rectangle
      description: The rectangle to move
    - id: offset
      type: Microsoft.Xna.Framework.Point
      description: The amount to move by
    return:
      type: Microsoft.Xna.Framework.Rectangle
      description: The moved rectangle
    content.vb: Public Shared Function OffsetCopy(rect As Rectangle, offset As Point) As Rectangle
  overload: MLEM.Extensions.NumberExtensions.OffsetCopy*
- uid: MLEM.Extensions.NumberExtensions.OffsetCopy(MLEM.Misc.RectangleF,Microsoft.Xna.Framework.Vector2)
  commentId: M:MLEM.Extensions.NumberExtensions.OffsetCopy(MLEM.Misc.RectangleF,Microsoft.Xna.Framework.Vector2)
  id: OffsetCopy(MLEM.Misc.RectangleF,Microsoft.Xna.Framework.Vector2)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: OffsetCopy(RectangleF, Vector2)
  nameWithType: NumberExtensions.OffsetCopy(RectangleF, Vector2)
  fullName: MLEM.Extensions.NumberExtensions.OffsetCopy(MLEM.Misc.RectangleF, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OffsetCopy
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 128
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: >-
    Returns a copy of the given rectangle, moved by the given point.

    The rectangle's size remains unchanged.
  example: []
  syntax:
    content: public static RectangleF OffsetCopy(this RectangleF rect, Vector2 offset)
    parameters:
    - id: rect
      type: MLEM.Misc.RectangleF
      description: The rectangle to move
    - id: offset
      type: Microsoft.Xna.Framework.Vector2
      description: The amount to move by
    return:
      type: MLEM.Misc.RectangleF
      description: The moved rectangle
    content.vb: Public Shared Function OffsetCopy(rect As RectangleF, offset As Vector2) As RectangleF
  overload: MLEM.Extensions.NumberExtensions.OffsetCopy*
- uid: MLEM.Extensions.NumberExtensions.Shrink(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Point)
  commentId: M:MLEM.Extensions.NumberExtensions.Shrink(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Point)
  id: Shrink(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Point)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Shrink(Rectangle, Point)
  nameWithType: NumberExtensions.Shrink(Rectangle, Point)
  fullName: MLEM.Extensions.NumberExtensions.Shrink(Microsoft.Xna.Framework.Rectangle, Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Shrink
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 140
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Shrinks the rectangle by the given padding, causing its size to decrease by twice the amount and its position to be moved inwards by the amount.
  example: []
  syntax:
    content: public static Rectangle Shrink(this Rectangle rect, Point padding)
    parameters:
    - id: rect
      type: Microsoft.Xna.Framework.Rectangle
      description: The rectangle to shrink
    - id: padding
      type: Microsoft.Xna.Framework.Point
      description: The padding to shrink by
    return:
      type: Microsoft.Xna.Framework.Rectangle
      description: The shrunk rectangle
    content.vb: Public Shared Function Shrink(rect As Rectangle, padding As Point) As Rectangle
  overload: MLEM.Extensions.NumberExtensions.Shrink*
- uid: MLEM.Extensions.NumberExtensions.Shrink(MLEM.Misc.RectangleF,Microsoft.Xna.Framework.Vector2)
  commentId: M:MLEM.Extensions.NumberExtensions.Shrink(MLEM.Misc.RectangleF,Microsoft.Xna.Framework.Vector2)
  id: Shrink(MLEM.Misc.RectangleF,Microsoft.Xna.Framework.Vector2)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Shrink(RectangleF, Vector2)
  nameWithType: NumberExtensions.Shrink(RectangleF, Vector2)
  fullName: MLEM.Extensions.NumberExtensions.Shrink(MLEM.Misc.RectangleF, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Shrink
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 149
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Shrinks the rectangle by the given padding, causing its size to decrease by twice the amount and its position to be moved inwards by the amount.
  example: []
  syntax:
    content: public static RectangleF Shrink(this RectangleF rect, Vector2 padding)
    parameters:
    - id: rect
      type: MLEM.Misc.RectangleF
      description: The rectangle to shrink
    - id: padding
      type: Microsoft.Xna.Framework.Vector2
      description: The padding to shrink by
    return:
      type: MLEM.Misc.RectangleF
      description: The shrunk rectangle
    content.vb: Public Shared Function Shrink(rect As RectangleF, padding As Vector2) As RectangleF
  overload: MLEM.Extensions.NumberExtensions.Shrink*
- uid: MLEM.Extensions.NumberExtensions.Shrink(MLEM.Misc.RectangleF,MLEM.Misc.Padding)
  commentId: M:MLEM.Extensions.NumberExtensions.Shrink(MLEM.Misc.RectangleF,MLEM.Misc.Padding)
  id: Shrink(MLEM.Misc.RectangleF,MLEM.Misc.Padding)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Shrink(RectangleF, Padding)
  nameWithType: NumberExtensions.Shrink(RectangleF, Padding)
  fullName: MLEM.Extensions.NumberExtensions.Shrink(MLEM.Misc.RectangleF, MLEM.Misc.Padding)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Shrink
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 158
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Shrinks the rectangle by the given padding, causing its size to decrease by twice the amount and its position to be moved inwards by the amount.
  example: []
  syntax:
    content: public static RectangleF Shrink(this RectangleF rect, Padding padding)
    parameters:
    - id: rect
      type: MLEM.Misc.RectangleF
      description: The rectangle to shrink
    - id: padding
      type: MLEM.Misc.Padding
      description: The padding to shrink by
    return:
      type: MLEM.Misc.RectangleF
      description: The shrunk rectangle
    content.vb: Public Shared Function Shrink(rect As RectangleF, padding As Padding) As RectangleF
  overload: MLEM.Extensions.NumberExtensions.Shrink*
- uid: MLEM.Extensions.NumberExtensions.GetPoints(Microsoft.Xna.Framework.Rectangle)
  commentId: M:MLEM.Extensions.NumberExtensions.GetPoints(Microsoft.Xna.Framework.Rectangle)
  id: GetPoints(Microsoft.Xna.Framework.Rectangle)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: GetPoints(Rectangle)
  nameWithType: NumberExtensions.GetPoints(Rectangle)
  fullName: MLEM.Extensions.NumberExtensions.GetPoints(Microsoft.Xna.Framework.Rectangle)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetPoints
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 172
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: >-
    Returns a set of <xref href="Microsoft.Xna.Framework.Point" data-throw-if-not-resolved="false"></xref> values that are contained in the given <xref href="Microsoft.Xna.Framework.Rectangle" data-throw-if-not-resolved="false"></xref>.

    Note that <xref href="Microsoft.Xna.Framework.Rectangle.Left" data-throw-if-not-resolved="false"></xref> and <xref href="Microsoft.Xna.Framework.Rectangle.Top" data-throw-if-not-resolved="false"></xref> are inclusive, but <xref href="Microsoft.Xna.Framework.Rectangle.Right" data-throw-if-not-resolved="false"></xref> and <xref href="Microsoft.Xna.Framework.Rectangle.Bottom" data-throw-if-not-resolved="false"></xref> are not.
  example: []
  syntax:
    content: public static IEnumerable<Point> GetPoints(this Rectangle area)
    parameters:
    - id: area
      type: Microsoft.Xna.Framework.Rectangle
      description: The area whose points to get
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
      description: The points contained in the area
    content.vb: Public Shared Function GetPoints(area As Rectangle) As IEnumerable(Of Point)
  overload: MLEM.Extensions.NumberExtensions.GetPoints*
- uid: MLEM.Extensions.NumberExtensions.GetPoints(MLEM.Misc.RectangleF,System.Single)
  commentId: M:MLEM.Extensions.NumberExtensions.GetPoints(MLEM.Misc.RectangleF,System.Single)
  id: GetPoints(MLEM.Misc.RectangleF,System.Single)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: GetPoints(RectangleF, float)
  nameWithType: NumberExtensions.GetPoints(RectangleF, float)
  fullName: MLEM.Extensions.NumberExtensions.GetPoints(MLEM.Misc.RectangleF, float)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetPoints
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 186
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: >-
    Returns a set of <xref href="Microsoft.Xna.Framework.Vector2" data-throw-if-not-resolved="false"></xref> values that are contained in the given <xref href="MLEM.Misc.RectangleF" data-throw-if-not-resolved="false"></xref>.

    Note that <xref href="MLEM.Misc.RectangleF.Left" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Misc.RectangleF.Top" data-throw-if-not-resolved="false"></xref> are inclusive, but <xref href="MLEM.Misc.RectangleF.Right" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Misc.RectangleF.Bottom" data-throw-if-not-resolved="false"></xref> are not.
  example: []
  syntax:
    content: public static IEnumerable<Vector2> GetPoints(this RectangleF area, float interval = 1)
    parameters:
    - id: area
      type: MLEM.Misc.RectangleF
      description: The area whose points to get
    - id: interval
      type: System.Single
      description: The distance that should be traveled between each point that is to be returned
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector2}
      description: The points contained in the area
    content.vb: Public Shared Function GetPoints(area As RectangleF, interval As Single = 1) As IEnumerable(Of Vector2)
  overload: MLEM.Extensions.NumberExtensions.GetPoints*
  nameWithType.vb: NumberExtensions.GetPoints(RectangleF, Single)
  fullName.vb: MLEM.Extensions.NumberExtensions.GetPoints(MLEM.Misc.RectangleF, Single)
  name.vb: GetPoints(RectangleF, Single)
- uid: MLEM.Extensions.NumberExtensions.ToVector2(Microsoft.Xna.Framework.Vector3)
  commentId: M:MLEM.Extensions.NumberExtensions.ToVector2(Microsoft.Xna.Framework.Vector3)
  id: ToVector2(Microsoft.Xna.Framework.Vector3)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: ToVector2(Vector3)
  nameWithType: NumberExtensions.ToVector2(Vector3)
  fullName: MLEM.Extensions.NumberExtensions.ToVector2(Microsoft.Xna.Framework.Vector3)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ToVector2
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 198
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Turns the given 3-dimensional vector into a 2-dimensional vector by chopping off the z coordinate.
  example: []
  syntax:
    content: public static Vector2 ToVector2(this Vector3 vector)
    parameters:
    - id: vector
      type: Microsoft.Xna.Framework.Vector3
      description: The vector to convert
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The resulting 2-dimensional vector
    content.vb: Public Shared Function ToVector2(vector As Vector3) As Vector2
  overload: MLEM.Extensions.NumberExtensions.ToVector2*
- uid: MLEM.Extensions.NumberExtensions.Scale(Microsoft.Xna.Framework.Matrix)
  commentId: M:MLEM.Extensions.NumberExtensions.Scale(Microsoft.Xna.Framework.Matrix)
  id: Scale(Microsoft.Xna.Framework.Matrix)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Scale(Matrix)
  nameWithType: NumberExtensions.Scale(Matrix)
  fullName: MLEM.Extensions.NumberExtensions.Scale(Microsoft.Xna.Framework.Matrix)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Scale
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 207
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Returns the 3-dimensional scale of the given matrix.
  example: []
  syntax:
    content: public static Vector3 Scale(this Matrix matrix)
    parameters:
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The matrix
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The scale of the matrix
    content.vb: Public Shared Function Scale(matrix As Matrix) As Vector3
  overload: MLEM.Extensions.NumberExtensions.Scale*
- uid: MLEM.Extensions.NumberExtensions.Rotation(Microsoft.Xna.Framework.Matrix)
  commentId: M:MLEM.Extensions.NumberExtensions.Rotation(Microsoft.Xna.Framework.Matrix)
  id: Rotation(Microsoft.Xna.Framework.Matrix)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Rotation(Matrix)
  nameWithType: NumberExtensions.Rotation(Matrix)
  fullName: MLEM.Extensions.NumberExtensions.Rotation(Microsoft.Xna.Framework.Matrix)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Rotation
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 224
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: >-
    Returns the rotation that the given matrix represents, as a <xref href="Microsoft.Xna.Framework.Quaternion" data-throw-if-not-resolved="false"></xref>.

    Returns <xref href="Microsoft.Xna.Framework.Quaternion.Identity" data-throw-if-not-resolved="false"></xref> if the matrix does not contain valid rotation information, or is not rotated.
  example: []
  syntax:
    content: public static Quaternion Rotation(this Matrix matrix)
    parameters:
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The matrix
    return:
      type: Microsoft.Xna.Framework.Quaternion
      description: The rotation of the matrix
    content.vb: Public Shared Function Rotation(matrix As Matrix) As Quaternion
  overload: MLEM.Extensions.NumberExtensions.Rotation*
- uid: MLEM.Extensions.NumberExtensions.RotationVector(Microsoft.Xna.Framework.Matrix)
  commentId: M:MLEM.Extensions.NumberExtensions.RotationVector(Microsoft.Xna.Framework.Matrix)
  id: RotationVector(Microsoft.Xna.Framework.Matrix)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: RotationVector(Matrix)
  nameWithType: NumberExtensions.RotationVector(Matrix)
  fullName: MLEM.Extensions.NumberExtensions.RotationVector(Microsoft.Xna.Framework.Matrix)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: RotationVector
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 241
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: >-
    Returns the rotation that the given matrix represents, as a <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> that contains the x, y and z rotations in radians.

    Returns <xref href="Microsoft.Xna.Framework.Vector3.Zero" data-throw-if-not-resolved="false"></xref> if the matrix does not contain valid rotation information, or is not rotated.
  example: []
  syntax:
    content: public static Vector3 RotationVector(this Matrix matrix)
    parameters:
    - id: matrix
      type: Microsoft.Xna.Framework.Matrix
      description: The matrix
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The rotation of the matrix
    content.vb: Public Shared Function RotationVector(matrix As Matrix) As Vector3
  overload: MLEM.Extensions.NumberExtensions.RotationVector*
- uid: MLEM.Extensions.NumberExtensions.RotationVector(Microsoft.Xna.Framework.Quaternion)
  commentId: M:MLEM.Extensions.NumberExtensions.RotationVector(Microsoft.Xna.Framework.Quaternion)
  id: RotationVector(Microsoft.Xna.Framework.Quaternion)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: RotationVector(Quaternion)
  nameWithType: NumberExtensions.RotationVector(Quaternion)
  fullName: MLEM.Extensions.NumberExtensions.RotationVector(Microsoft.Xna.Framework.Quaternion)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: RotationVector
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 251
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: >-
    Returns the rotation that the given quaternion represents, as a <xref href="Microsoft.Xna.Framework.Vector3" data-throw-if-not-resolved="false"></xref> that contains the x, y and z rotations in radians.

    Returns <xref href="Microsoft.Xna.Framework.Vector3.Zero" data-throw-if-not-resolved="false"></xref> if the quaternion does not contain valid rotation information, or is not rotated.
  example: []
  syntax:
    content: public static Vector3 RotationVector(this Quaternion quaternion)
    parameters:
    - id: quaternion
      type: Microsoft.Xna.Framework.Quaternion
      description: The quaternion
    return:
      type: Microsoft.Xna.Framework.Vector3
      description: The rotation of the quaternion
    content.vb: Public Shared Function RotationVector(quaternion As Quaternion) As Vector3
  overload: MLEM.Extensions.NumberExtensions.RotationVector*
- uid: MLEM.Extensions.NumberExtensions.Penetrate(MLEM.Misc.RectangleF,MLEM.Misc.RectangleF,Microsoft.Xna.Framework.Vector2@,System.Single@)
  commentId: M:MLEM.Extensions.NumberExtensions.Penetrate(MLEM.Misc.RectangleF,MLEM.Misc.RectangleF,Microsoft.Xna.Framework.Vector2@,System.Single@)
  id: Penetrate(MLEM.Misc.RectangleF,MLEM.Misc.RectangleF,Microsoft.Xna.Framework.Vector2@,System.Single@)
  isExtensionMethod: true
  parent: MLEM.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Penetrate(RectangleF, RectangleF, out Vector2, out float)
  nameWithType: NumberExtensions.Penetrate(RectangleF, RectangleF, out Vector2, out float)
  fullName: MLEM.Extensions.NumberExtensions.Penetrate(MLEM.Misc.RectangleF, MLEM.Misc.RectangleF, out Microsoft.Xna.Framework.Vector2, out float)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Penetrate
    path: ../MLEM/Extensions/NumberExtensions.cs
    startLine: 269
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: >-
    Calculates the amount that the rectangle <code class="paramref">rect</code> is penetrating the rectangle <code class="paramref">other</code> by.

    If a penetration on both axes is occuring, the one with the lower value is returned.

    This is useful for collision detection, as it can be used to push colliding objects out of each other.
  example: []
  syntax:
    content: public static bool Penetrate(this RectangleF rect, RectangleF other, out Vector2 normal, out float penetration)
    parameters:
    - id: rect
      type: MLEM.Misc.RectangleF
      description: The rectangle to do the penetration
    - id: other
      type: MLEM.Misc.RectangleF
      description: The rectangle that should be penetrated
    - id: normal
      type: Microsoft.Xna.Framework.Vector2
      description: The direction that the penetration occured in
    - id: penetration
      type: System.Single
      description: The amount that the penetration occured by, in the direction of <code class="paramref">normal</code>
    return:
      type: System.Boolean
      description: Whether or not a penetration occured
    content.vb: Public Shared Function Penetrate(rect As RectangleF, other As RectangleF, normal As Vector2, penetration As Single) As Boolean
  overload: MLEM.Extensions.NumberExtensions.Penetrate*
  nameWithType.vb: NumberExtensions.Penetrate(RectangleF, RectangleF, Vector2, Single)
  fullName.vb: MLEM.Extensions.NumberExtensions.Penetrate(MLEM.Misc.RectangleF, MLEM.Misc.RectangleF, Microsoft.Xna.Framework.Vector2, Single)
  name.vb: Penetrate(RectangleF, RectangleF, Vector2, Single)
references:
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework.Vector3
  commentId: T:Microsoft.Xna.Framework.Vector3
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: Microsoft.Xna.Framework.Vector3
- uid: Microsoft.Xna.Framework.Vector4
  commentId: T:Microsoft.Xna.Framework.Vector4
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector4
  nameWithType: Vector4
  fullName: Microsoft.Xna.Framework.Vector4
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: Microsoft.Xna.Framework.Matrix
  commentId: T:Microsoft.Xna.Framework.Matrix
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Matrix
  nameWithType: Matrix
  fullName: Microsoft.Xna.Framework.Matrix
- uid: Microsoft.Xna.Framework.Rectangle
  commentId: T:Microsoft.Xna.Framework.Rectangle
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Rectangle
  nameWithType: Rectangle
  fullName: Microsoft.Xna.Framework.Rectangle
- uid: MLEM.Misc.RectangleF
  commentId: T:MLEM.Misc.RectangleF
  parent: MLEM.Misc
  href: MLEM.Misc.RectangleF.html
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Misc.RectangleF
- uid: MLEM.Extensions
  commentId: N:MLEM.Extensions
  href: MLEM.html
  name: MLEM.Extensions
  nameWithType: MLEM.Extensions
  fullName: MLEM.Extensions
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Extensions
    name: Extensions
    href: MLEM.Extensions.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Extensions
    name: Extensions
    href: MLEM.Extensions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  href: MLEM.html
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Misc
    name: Misc
    href: MLEM.Misc.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Misc
    name: Misc
    href: MLEM.Misc.html
- uid: System.Math
  commentId: T:System.Math
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.math
  name: Math
  nameWithType: Math
  fullName: System.Math
- uid: MLEM.Extensions.NumberExtensions.Floor*
  commentId: Overload:MLEM.Extensions.NumberExtensions.Floor
  href: MLEM.Extensions.NumberExtensions.html#MLEM_Extensions_NumberExtensions_Floor_System_Single_
  name: Floor
  nameWithType: NumberExtensions.Floor
  fullName: MLEM.Extensions.NumberExtensions.Floor
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Decimal
  commentId: T:System.Decimal
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.decimal
  name: decimal
  nameWithType: decimal
  fullName: decimal
  nameWithType.vb: Decimal
  fullName.vb: Decimal
  name.vb: Decimal
- uid: MLEM.Extensions.NumberExtensions.Ceil*
  commentId: Overload:MLEM.Extensions.NumberExtensions.Ceil
  href: MLEM.Extensions.NumberExtensions.html#MLEM_Extensions_NumberExtensions_Ceil_System_Single_
  name: Ceil
  nameWithType: NumberExtensions.Ceil
  fullName: MLEM.Extensions.NumberExtensions.Ceil
- uid: MLEM.Extensions.NumberExtensions.Equals*
  commentId: Overload:MLEM.Extensions.NumberExtensions.Equals
  href: MLEM.Extensions.NumberExtensions.html#MLEM_Extensions_NumberExtensions_Equals_System_Single_System_Single_System_Single_
  name: Equals
  nameWithType: NumberExtensions.Equals
  fullName: MLEM.Extensions.NumberExtensions.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Microsoft.Xna.Framework.Quaternion
  commentId: T:Microsoft.Xna.Framework.Quaternion
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Quaternion
  nameWithType: Quaternion
  fullName: Microsoft.Xna.Framework.Quaternion
- uid: MLEM.Extensions.NumberExtensions.FloorCopy*
  commentId: Overload:MLEM.Extensions.NumberExtensions.FloorCopy
  href: MLEM.Extensions.NumberExtensions.html#MLEM_Extensions_NumberExtensions_FloorCopy_Microsoft_Xna_Framework_Vector2_
  name: FloorCopy
  nameWithType: NumberExtensions.FloorCopy
  fullName: MLEM.Extensions.NumberExtensions.FloorCopy
- uid: MLEM.Extensions.NumberExtensions.CeilCopy*
  commentId: Overload:MLEM.Extensions.NumberExtensions.CeilCopy
  href: MLEM.Extensions.NumberExtensions.html#MLEM_Extensions_NumberExtensions_CeilCopy_Microsoft_Xna_Framework_Vector2_
  name: CeilCopy
  nameWithType: NumberExtensions.CeilCopy
  fullName: MLEM.Extensions.NumberExtensions.CeilCopy
- uid: MLEM.Extensions.NumberExtensions.Multiply*
  commentId: Overload:MLEM.Extensions.NumberExtensions.Multiply
  href: MLEM.Extensions.NumberExtensions.html#MLEM_Extensions_NumberExtensions_Multiply_Microsoft_Xna_Framework_Point_System_Single_
  name: Multiply
  nameWithType: NumberExtensions.Multiply
  fullName: MLEM.Extensions.NumberExtensions.Multiply
- uid: MLEM.Extensions.NumberExtensions.Divide*
  commentId: Overload:MLEM.Extensions.NumberExtensions.Divide
  href: MLEM.Extensions.NumberExtensions.html#MLEM_Extensions_NumberExtensions_Divide_Microsoft_Xna_Framework_Point_System_Single_
  name: Divide
  nameWithType: NumberExtensions.Divide
  fullName: MLEM.Extensions.NumberExtensions.Divide
- uid: MLEM.Extensions.NumberExtensions.Transform*
  commentId: Overload:MLEM.Extensions.NumberExtensions.Transform
  href: MLEM.Extensions.NumberExtensions.html#MLEM_Extensions_NumberExtensions_Transform_Microsoft_Xna_Framework_Point_Microsoft_Xna_Framework_Matrix_
  name: Transform
  nameWithType: NumberExtensions.Transform
  fullName: MLEM.Extensions.NumberExtensions.Transform
- uid: MLEM.Extensions.NumberExtensions.OffsetCopy*
  commentId: Overload:MLEM.Extensions.NumberExtensions.OffsetCopy
  href: MLEM.Extensions.NumberExtensions.html#MLEM_Extensions_NumberExtensions_OffsetCopy_Microsoft_Xna_Framework_Rectangle_Microsoft_Xna_Framework_Point_
  name: OffsetCopy
  nameWithType: NumberExtensions.OffsetCopy
  fullName: MLEM.Extensions.NumberExtensions.OffsetCopy
- uid: MLEM.Extensions.NumberExtensions.Shrink*
  commentId: Overload:MLEM.Extensions.NumberExtensions.Shrink
  href: MLEM.Extensions.NumberExtensions.html#MLEM_Extensions_NumberExtensions_Shrink_Microsoft_Xna_Framework_Rectangle_Microsoft_Xna_Framework_Point_
  name: Shrink
  nameWithType: NumberExtensions.Shrink
  fullName: MLEM.Extensions.NumberExtensions.Shrink
- uid: MLEM.Misc.Padding
  commentId: T:MLEM.Misc.Padding
  parent: MLEM.Misc
  href: MLEM.Misc.Padding.html
  name: Padding
  nameWithType: Padding
  fullName: MLEM.Misc.Padding
- uid: Microsoft.Xna.Framework.Rectangle.Left
  commentId: P:Microsoft.Xna.Framework.Rectangle.Left
  isExternal: true
  name: Left
  nameWithType: Rectangle.Left
  fullName: Microsoft.Xna.Framework.Rectangle.Left
- uid: Microsoft.Xna.Framework.Rectangle.Top
  commentId: P:Microsoft.Xna.Framework.Rectangle.Top
  isExternal: true
  name: Top
  nameWithType: Rectangle.Top
  fullName: Microsoft.Xna.Framework.Rectangle.Top
- uid: Microsoft.Xna.Framework.Rectangle.Right
  commentId: P:Microsoft.Xna.Framework.Rectangle.Right
  isExternal: true
  name: Right
  nameWithType: Rectangle.Right
  fullName: Microsoft.Xna.Framework.Rectangle.Right
- uid: Microsoft.Xna.Framework.Rectangle.Bottom
  commentId: P:Microsoft.Xna.Framework.Rectangle.Bottom
  isExternal: true
  name: Bottom
  nameWithType: Rectangle.Bottom
  fullName: Microsoft.Xna.Framework.Rectangle.Bottom
- uid: MLEM.Extensions.NumberExtensions.GetPoints*
  commentId: Overload:MLEM.Extensions.NumberExtensions.GetPoints
  href: MLEM.Extensions.NumberExtensions.html#MLEM_Extensions_NumberExtensions_GetPoints_Microsoft_Xna_Framework_Rectangle_
  name: GetPoints
  nameWithType: NumberExtensions.GetPoints
  fullName: MLEM.Extensions.NumberExtensions.GetPoints
- uid: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Point>
  nameWithType: IEnumerable<Point>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Point>
  nameWithType.vb: IEnumerable(Of Point)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Xna.Framework.Point)
  name.vb: IEnumerable(Of Point)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: MLEM.Misc.RectangleF.Left
  commentId: P:MLEM.Misc.RectangleF.Left
  href: MLEM.Misc.RectangleF.html#MLEM_Misc_RectangleF_Left
  name: Left
  nameWithType: RectangleF.Left
  fullName: MLEM.Misc.RectangleF.Left
- uid: MLEM.Misc.RectangleF.Top
  commentId: P:MLEM.Misc.RectangleF.Top
  href: MLEM.Misc.RectangleF.html#MLEM_Misc_RectangleF_Top
  name: Top
  nameWithType: RectangleF.Top
  fullName: MLEM.Misc.RectangleF.Top
- uid: MLEM.Misc.RectangleF.Right
  commentId: P:MLEM.Misc.RectangleF.Right
  href: MLEM.Misc.RectangleF.html#MLEM_Misc_RectangleF_Right
  name: Right
  nameWithType: RectangleF.Right
  fullName: MLEM.Misc.RectangleF.Right
- uid: MLEM.Misc.RectangleF.Bottom
  commentId: P:MLEM.Misc.RectangleF.Bottom
  href: MLEM.Misc.RectangleF.html#MLEM_Misc_RectangleF_Bottom
  name: Bottom
  nameWithType: RectangleF.Bottom
  fullName: MLEM.Misc.RectangleF.Bottom
- uid: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector2}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Vector2>
  nameWithType: IEnumerable<Vector2>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Vector2>
  nameWithType.vb: IEnumerable(Of Vector2)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Xna.Framework.Vector2)
  name.vb: IEnumerable(Of Vector2)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: MLEM.Extensions.NumberExtensions.ToVector2*
  commentId: Overload:MLEM.Extensions.NumberExtensions.ToVector2
  href: MLEM.Extensions.NumberExtensions.html#MLEM_Extensions_NumberExtensions_ToVector2_Microsoft_Xna_Framework_Vector3_
  name: ToVector2
  nameWithType: NumberExtensions.ToVector2
  fullName: MLEM.Extensions.NumberExtensions.ToVector2
- uid: MLEM.Extensions.NumberExtensions.Scale*
  commentId: Overload:MLEM.Extensions.NumberExtensions.Scale
  href: MLEM.Extensions.NumberExtensions.html#MLEM_Extensions_NumberExtensions_Scale_Microsoft_Xna_Framework_Matrix_
  name: Scale
  nameWithType: NumberExtensions.Scale
  fullName: MLEM.Extensions.NumberExtensions.Scale
- uid: Microsoft.Xna.Framework.Quaternion.Identity
  commentId: P:Microsoft.Xna.Framework.Quaternion.Identity
  isExternal: true
  name: Identity
  nameWithType: Quaternion.Identity
  fullName: Microsoft.Xna.Framework.Quaternion.Identity
- uid: MLEM.Extensions.NumberExtensions.Rotation*
  commentId: Overload:MLEM.Extensions.NumberExtensions.Rotation
  href: MLEM.Extensions.NumberExtensions.html#MLEM_Extensions_NumberExtensions_Rotation_Microsoft_Xna_Framework_Matrix_
  name: Rotation
  nameWithType: NumberExtensions.Rotation
  fullName: MLEM.Extensions.NumberExtensions.Rotation
- uid: Microsoft.Xna.Framework.Vector3.Zero
  commentId: P:Microsoft.Xna.Framework.Vector3.Zero
  isExternal: true
  name: Zero
  nameWithType: Vector3.Zero
  fullName: Microsoft.Xna.Framework.Vector3.Zero
- uid: MLEM.Extensions.NumberExtensions.RotationVector*
  commentId: Overload:MLEM.Extensions.NumberExtensions.RotationVector
  href: MLEM.Extensions.NumberExtensions.html#MLEM_Extensions_NumberExtensions_RotationVector_Microsoft_Xna_Framework_Matrix_
  name: RotationVector
  nameWithType: NumberExtensions.RotationVector
  fullName: MLEM.Extensions.NumberExtensions.RotationVector
- uid: MLEM.Extensions.NumberExtensions.Penetrate*
  commentId: Overload:MLEM.Extensions.NumberExtensions.Penetrate
  href: MLEM.Extensions.NumberExtensions.html#MLEM_Extensions_NumberExtensions_Penetrate_MLEM_Misc_RectangleF_MLEM_Misc_RectangleF_Microsoft_Xna_Framework_Vector2__System_Single__
  name: Penetrate
  nameWithType: NumberExtensions.Penetrate
  fullName: MLEM.Extensions.NumberExtensions.Penetrate
