### YamlMime:ManagedReference
items:
- uid: MLEM.Maths.RandomExtensions
  commentId: T:MLEM.Maths.RandomExtensions
  id: RandomExtensions
  parent: MLEM.Maths
  children:
  - MLEM.Maths.RandomExtensions.GetRandomEntry``1(System.Random,System.Collections.Generic.ICollection{``0})
  - MLEM.Maths.RandomExtensions.GetRandomWeightedEntry``1(System.Random,System.Collections.Generic.ICollection{``0},System.Func{``0,System.Int32})
  - MLEM.Maths.RandomExtensions.GetRandomWeightedEntry``1(System.Random,System.Collections.Generic.ICollection{``0},System.Func{``0,System.Single})
  - MLEM.Maths.RandomExtensions.NextSingle(System.Random)
  - MLEM.Maths.RandomExtensions.NextSingle(System.Random,System.Single)
  - MLEM.Maths.RandomExtensions.NextSingle(System.Random,System.Single,System.Single)
  langs:
  - csharp
  - vb
  name: RandomExtensions
  nameWithType: RandomExtensions
  fullName: MLEM.Maths.RandomExtensions
  type: Class
  source:
    remote:
      path: MLEM/Maths/RandomExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: RandomExtensions
    path: ../MLEM/Maths/RandomExtensions.cs
    startLine: 8
  assemblies:
  - MLEM
  namespace: MLEM.Maths
  summary: A set of extensions for dealing with <xref href="System.Random" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static class RandomExtensions
    content.vb: Public Module RandomExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: MLEM.Maths.RandomExtensions.GetRandomEntry``1(System.Random,System.Collections.Generic.ICollection{``0})
  commentId: M:MLEM.Maths.RandomExtensions.GetRandomEntry``1(System.Random,System.Collections.Generic.ICollection{``0})
  id: GetRandomEntry``1(System.Random,System.Collections.Generic.ICollection{``0})
  isExtensionMethod: true
  parent: MLEM.Maths.RandomExtensions
  langs:
  - csharp
  - vb
  name: GetRandomEntry<T>(Random, ICollection<T>)
  nameWithType: RandomExtensions.GetRandomEntry<T>(Random, ICollection<T>)
  fullName: MLEM.Maths.RandomExtensions.GetRandomEntry<T>(System.Random, System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    remote:
      path: MLEM/Maths/RandomExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetRandomEntry
    path: ../MLEM/Maths/RandomExtensions.cs
    startLine: 17
  assemblies:
  - MLEM
  namespace: MLEM.Maths
  summary: Gets a random entry from the given collection with uniform chance.
  example: []
  syntax:
    content: public static T GetRandomEntry<T>(this Random random, ICollection<T> entries)
    parameters:
    - id: random
      type: System.Random
      description: The random
    - id: entries
      type: System.Collections.Generic.ICollection{{T}}
      description: The entries to choose from
    typeParameters:
    - id: T
      description: The entries' type
    return:
      type: '{T}'
      description: A random entry
    content.vb: Public Shared Function GetRandomEntry(Of T)(random As Random, entries As ICollection(Of T)) As T
  overload: MLEM.Maths.RandomExtensions.GetRandomEntry*
  nameWithType.vb: RandomExtensions.GetRandomEntry(Of T)(Random, ICollection(Of T))
  fullName.vb: MLEM.Maths.RandomExtensions.GetRandomEntry(Of T)(System.Random, System.Collections.Generic.ICollection(Of T))
  name.vb: GetRandomEntry(Of T)(Random, ICollection(Of T))
- uid: MLEM.Maths.RandomExtensions.GetRandomWeightedEntry``1(System.Random,System.Collections.Generic.ICollection{``0},System.Func{``0,System.Int32})
  commentId: M:MLEM.Maths.RandomExtensions.GetRandomWeightedEntry``1(System.Random,System.Collections.Generic.ICollection{``0},System.Func{``0,System.Int32})
  id: GetRandomWeightedEntry``1(System.Random,System.Collections.Generic.ICollection{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: MLEM.Maths.RandomExtensions
  langs:
  - csharp
  - vb
  name: GetRandomWeightedEntry<T>(Random, ICollection<T>, Func<T, int>)
  nameWithType: RandomExtensions.GetRandomWeightedEntry<T>(Random, ICollection<T>, Func<T, int>)
  fullName: MLEM.Maths.RandomExtensions.GetRandomWeightedEntry<T>(System.Random, System.Collections.Generic.ICollection<T>, System.Func<T, int>)
  type: Method
  source:
    remote:
      path: MLEM/Maths/RandomExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetRandomWeightedEntry
    path: ../MLEM/Maths/RandomExtensions.cs
    startLine: 31
  assemblies:
  - MLEM
  namespace: MLEM.Maths
  summary: >-
    Returns a random entry from the given collection based on the specified weight function.

    A higher weight for an entry increases its likeliness of being picked.
  example: []
  syntax:
    content: public static T GetRandomWeightedEntry<T>(this Random random, ICollection<T> entries, Func<T, int> weightFunc)
    parameters:
    - id: random
      type: System.Random
      description: The random
    - id: entries
      type: System.Collections.Generic.ICollection{{T}}
      description: The entries to choose from
    - id: weightFunc
      type: System.Func{{T},System.Int32}
      description: A function that applies weight to each entry
    typeParameters:
    - id: T
      description: The entries' type
    return:
      type: '{T}'
      description: A random entry, based on the entries' weight
    content.vb: Public Shared Function GetRandomWeightedEntry(Of T)(random As Random, entries As ICollection(Of T), weightFunc As Func(Of T, Integer)) As T
  overload: MLEM.Maths.RandomExtensions.GetRandomWeightedEntry*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: If the weight function returns different weights for the same entry
  nameWithType.vb: RandomExtensions.GetRandomWeightedEntry(Of T)(Random, ICollection(Of T), Func(Of T, Integer))
  fullName.vb: MLEM.Maths.RandomExtensions.GetRandomWeightedEntry(Of T)(System.Random, System.Collections.Generic.ICollection(Of T), System.Func(Of T, Integer))
  name.vb: GetRandomWeightedEntry(Of T)(Random, ICollection(Of T), Func(Of T, Integer))
- uid: MLEM.Maths.RandomExtensions.GetRandomWeightedEntry``1(System.Random,System.Collections.Generic.ICollection{``0},System.Func{``0,System.Single})
  commentId: M:MLEM.Maths.RandomExtensions.GetRandomWeightedEntry``1(System.Random,System.Collections.Generic.ICollection{``0},System.Func{``0,System.Single})
  id: GetRandomWeightedEntry``1(System.Random,System.Collections.Generic.ICollection{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: MLEM.Maths.RandomExtensions
  langs:
  - csharp
  - vb
  name: GetRandomWeightedEntry<T>(Random, ICollection<T>, Func<T, float>)
  nameWithType: RandomExtensions.GetRandomWeightedEntry<T>(Random, ICollection<T>, Func<T, float>)
  fullName: MLEM.Maths.RandomExtensions.GetRandomWeightedEntry<T>(System.Random, System.Collections.Generic.ICollection<T>, System.Func<T, float>)
  type: Method
  source:
    remote:
      path: MLEM/Maths/RandomExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetRandomWeightedEntry
    path: ../MLEM/Maths/RandomExtensions.cs
    startLine: 36
  assemblies:
  - MLEM
  namespace: MLEM.Maths
  summary: >-
    Returns a random entry from the given collection based on the specified weight function.

    A higher weight for an entry increases its likeliness of being picked.
  example: []
  syntax:
    content: public static T GetRandomWeightedEntry<T>(this Random random, ICollection<T> entries, Func<T, float> weightFunc)
    parameters:
    - id: random
      type: System.Random
      description: The random
    - id: entries
      type: System.Collections.Generic.ICollection{{T}}
      description: The entries to choose from
    - id: weightFunc
      type: System.Func{{T},System.Single}
      description: A function that applies weight to each entry
    typeParameters:
    - id: T
      description: The entries' type
    return:
      type: '{T}'
      description: A random entry, based on the entries' weight
    content.vb: Public Shared Function GetRandomWeightedEntry(Of T)(random As Random, entries As ICollection(Of T), weightFunc As Func(Of T, Single)) As T
  overload: MLEM.Maths.RandomExtensions.GetRandomWeightedEntry*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: If the weight function returns different weights for the same entry
  nameWithType.vb: RandomExtensions.GetRandomWeightedEntry(Of T)(Random, ICollection(Of T), Func(Of T, Single))
  fullName.vb: MLEM.Maths.RandomExtensions.GetRandomWeightedEntry(Of T)(System.Random, System.Collections.Generic.ICollection(Of T), System.Func(Of T, Single))
  name.vb: GetRandomWeightedEntry(Of T)(Random, ICollection(Of T), Func(Of T, Single))
- uid: MLEM.Maths.RandomExtensions.NextSingle(System.Random,System.Single)
  commentId: M:MLEM.Maths.RandomExtensions.NextSingle(System.Random,System.Single)
  id: NextSingle(System.Random,System.Single)
  isExtensionMethod: true
  parent: MLEM.Maths.RandomExtensions
  langs:
  - csharp
  - vb
  name: NextSingle(Random, float)
  nameWithType: RandomExtensions.NextSingle(Random, float)
  fullName: MLEM.Maths.RandomExtensions.NextSingle(System.Random, float)
  type: Method
  source:
    remote:
      path: MLEM/Maths/RandomExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: NextSingle
    path: ../MLEM/Maths/RandomExtensions.cs
    startLine: 46
  assemblies:
  - MLEM
  namespace: MLEM.Maths
  summary: Returns a random floating-point number that is greater than or equal to 0, and less than <code class="paramref">maxValue</code>.
  example: []
  syntax:
    content: public static float NextSingle(this Random random, float maxValue)
    parameters:
    - id: random
      type: System.Random
      description: The random.
    - id: maxValue
      type: System.Single
      description: The (exclusive) maximum value.
    return:
      type: System.Single
      description: A single-precision floating point number that is greater than or equal to 0, and less than <code class="paramref">maxValue</code>.
    content.vb: Public Shared Function NextSingle(random As Random, maxValue As Single) As Single
  overload: MLEM.Maths.RandomExtensions.NextSingle*
  nameWithType.vb: RandomExtensions.NextSingle(Random, Single)
  fullName.vb: MLEM.Maths.RandomExtensions.NextSingle(System.Random, Single)
  name.vb: NextSingle(Random, Single)
- uid: MLEM.Maths.RandomExtensions.NextSingle(System.Random,System.Single,System.Single)
  commentId: M:MLEM.Maths.RandomExtensions.NextSingle(System.Random,System.Single,System.Single)
  id: NextSingle(System.Random,System.Single,System.Single)
  isExtensionMethod: true
  parent: MLEM.Maths.RandomExtensions
  langs:
  - csharp
  - vb
  name: NextSingle(Random, float, float)
  nameWithType: RandomExtensions.NextSingle(Random, float, float)
  fullName: MLEM.Maths.RandomExtensions.NextSingle(System.Random, float, float)
  type: Method
  source:
    remote:
      path: MLEM/Maths/RandomExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: NextSingle
    path: ../MLEM/Maths/RandomExtensions.cs
    startLine: 57
  assemblies:
  - MLEM
  namespace: MLEM.Maths
  summary: Returns a random floating-point number that is greater than or equal to <code class="paramref">minValue</code>, and less than <code class="paramref">maxValue</code>.
  example: []
  syntax:
    content: public static float NextSingle(this Random random, float minValue, float maxValue)
    parameters:
    - id: random
      type: System.Random
      description: The random.
    - id: minValue
      type: System.Single
      description: The (inclusive) minimum value.
    - id: maxValue
      type: System.Single
      description: The (exclusive) maximum value.
    return:
      type: System.Single
      description: A single-precision floating point number that is greater than or equal to <code class="paramref">minValue</code>, and less than <code class="paramref">maxValue</code>.
    content.vb: Public Shared Function NextSingle(random As Random, minValue As Single, maxValue As Single) As Single
  overload: MLEM.Maths.RandomExtensions.NextSingle*
  nameWithType.vb: RandomExtensions.NextSingle(Random, Single, Single)
  fullName.vb: MLEM.Maths.RandomExtensions.NextSingle(System.Random, Single, Single)
  name.vb: NextSingle(Random, Single, Single)
- uid: MLEM.Maths.RandomExtensions.NextSingle(System.Random)
  commentId: M:MLEM.Maths.RandomExtensions.NextSingle(System.Random)
  id: NextSingle(System.Random)
  isExtensionMethod: true
  parent: MLEM.Maths.RandomExtensions
  langs:
  - csharp
  - vb
  name: NextSingle(Random)
  nameWithType: RandomExtensions.NextSingle(Random)
  fullName: MLEM.Maths.RandomExtensions.NextSingle(System.Random)
  type: Method
  source:
    remote:
      path: MLEM/Maths/RandomExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: NextSingle
    path: ../MLEM/Maths/RandomExtensions.cs
    startLine: 67
  assemblies:
  - MLEM
  namespace: MLEM.Maths
  summary: Returns a random floating-point number that is greater than or equal to 0, and less than 1.
  example: []
  syntax:
    content: public static float NextSingle(this Random random)
    parameters:
    - id: random
      type: System.Random
      description: The random.
    return:
      type: System.Single
      description: A single-precision floating point number that is greater than or equal to 0, and less than 1.
    content.vb: Public Shared Function NextSingle(random As Random) As Single
  overload: MLEM.Maths.RandomExtensions.NextSingle*
references:
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.random
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: MLEM.Maths
  commentId: N:MLEM.Maths
  href: MLEM.html
  name: MLEM.Maths
  nameWithType: MLEM.Maths
  fullName: MLEM.Maths
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Maths
    name: Maths
    href: MLEM.Maths.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Maths
    name: Maths
    href: MLEM.Maths.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Maths.RandomExtensions.GetRandomEntry*
  commentId: Overload:MLEM.Maths.RandomExtensions.GetRandomEntry
  href: MLEM.Maths.RandomExtensions.html#MLEM_Maths_RandomExtensions_GetRandomEntry__1_System_Random_System_Collections_Generic_ICollection___0__
  name: GetRandomEntry
  nameWithType: RandomExtensions.GetRandomEntry
  fullName: MLEM.Maths.RandomExtensions.GetRandomEntry
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.indexoutofrangeexception
  name: IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: MLEM.Maths.RandomExtensions.GetRandomWeightedEntry*
  commentId: Overload:MLEM.Maths.RandomExtensions.GetRandomWeightedEntry
  href: MLEM.Maths.RandomExtensions.html#MLEM_Maths_RandomExtensions_GetRandomWeightedEntry__1_System_Random_System_Collections_Generic_ICollection___0__System_Func___0_System_Int32__
  name: GetRandomWeightedEntry
  nameWithType: RandomExtensions.GetRandomWeightedEntry
  fullName: MLEM.Maths.RandomExtensions.GetRandomWeightedEntry
- uid: System.Func{{T},System.Int32}
  commentId: T:System.Func{``0,System.Int32}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, int>
  nameWithType: Func<T, int>
  fullName: System.Func<T, int>
  nameWithType.vb: Func(Of T, Integer)
  fullName.vb: System.Func(Of T, Integer)
  name.vb: Func(Of T, Integer)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{T},System.Single}
  commentId: T:System.Func{``0,System.Single}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, float>
  nameWithType: Func<T, float>
  fullName: System.Func<T, float>
  nameWithType.vb: Func(Of T, Single)
  fullName.vb: System.Func(Of T, Single)
  name.vb: Func(Of T, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: MLEM.Maths.RandomExtensions.NextSingle*
  commentId: Overload:MLEM.Maths.RandomExtensions.NextSingle
  href: MLEM.Maths.RandomExtensions.html#MLEM_Maths_RandomExtensions_NextSingle_System_Random_System_Single_
  name: NextSingle
  nameWithType: RandomExtensions.NextSingle
  fullName: MLEM.Maths.RandomExtensions.NextSingle
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
