### YamlMime:ManagedReference
items:
- uid: MLEM.Pathfinding.AStar`1.GetCost
  commentId: T:MLEM.Pathfinding.AStar`1.GetCost
  id: AStar`1.GetCost
  parent: MLEM.Pathfinding
  children: []
  langs:
  - csharp
  - vb
  name: AStar<T>.GetCost
  nameWithType: AStar<T>.GetCost
  fullName: MLEM.Pathfinding.AStar<T>.GetCost
  type: Delegate
  source:
    remote:
      path: MLEM/Pathfinding/AStar.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetCost
    path: ../MLEM/Pathfinding/AStar.cs
    startLine: 185
  assemblies:
  - MLEM
  namespace: MLEM.Pathfinding
  summary: >-
    A cost function for a given pair of neighboring path finding positions.

    If a path point should have the default cost, <xref href="MLEM.Pathfinding.AStar%601.DefaultCost" data-throw-if-not-resolved="false"></xref> should be returned.

    If a path point should be unreachable, <xref href="System.Single.PositiveInfinity" data-throw-if-not-resolved="false"></xref> or <xref href="System.Single.MaxValue" data-throw-if-not-resolved="false"></xref> should be returned.
  example: []
  syntax:
    content: public delegate float AStar<T>.GetCost(T currPos, T nextPos)
    parameters:
    - id: currPos
      type: '{T}'
      description: The current position in the path.
    - id: nextPos
      type: '{T}'
      description: The neighboring position whose cost to check.
    return:
      type: System.Single
    content.vb: Public Delegate Function AStar(Of T).GetCost(currPos As T, nextPos As T) As Single
  nameWithType.vb: AStar(Of T).GetCost
  fullName.vb: MLEM.Pathfinding.AStar(Of T).GetCost
  name.vb: AStar(Of T).GetCost
references:
- uid: MLEM.Pathfinding.AStar`1.DefaultCost
  commentId: F:MLEM.Pathfinding.AStar`1.DefaultCost
  href: MLEM.Pathfinding.AStar-1.html#MLEM_Pathfinding_AStar_1_DefaultCost
  name: DefaultCost
  nameWithType: AStar<T>.DefaultCost
  fullName: MLEM.Pathfinding.AStar<T>.DefaultCost
  nameWithType.vb: AStar(Of T).DefaultCost
  fullName.vb: MLEM.Pathfinding.AStar(Of T).DefaultCost
- uid: System.Single.PositiveInfinity
  commentId: F:System.Single.PositiveInfinity
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single.positiveinfinity
  name: PositiveInfinity
  nameWithType: float.PositiveInfinity
  fullName: float.PositiveInfinity
  nameWithType.vb: Single.PositiveInfinity
  fullName.vb: Single.PositiveInfinity
- uid: System.Single.MaxValue
  commentId: F:System.Single.MaxValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single.maxvalue
  name: MaxValue
  nameWithType: float.MaxValue
  fullName: float.MaxValue
  nameWithType.vb: Single.MaxValue
  fullName.vb: Single.MaxValue
- uid: MLEM.Pathfinding
  commentId: N:MLEM.Pathfinding
  href: MLEM.html
  name: MLEM.Pathfinding
  nameWithType: MLEM.Pathfinding
  fullName: MLEM.Pathfinding
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Pathfinding
    name: Pathfinding
    href: MLEM.Pathfinding.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Pathfinding
    name: Pathfinding
    href: MLEM.Pathfinding.html
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
