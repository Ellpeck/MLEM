### YamlMime:ManagedReference
items:
- uid: MLEM.Input.Keybind.Combination
  commentId: T:MLEM.Input.Keybind.Combination
  id: Keybind.Combination
  parent: MLEM.Input
  children:
  - MLEM.Input.Keybind.Combination.#ctor
  - MLEM.Input.Keybind.Combination.#ctor(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  - MLEM.Input.Keybind.Combination.#ctor(MLEM.Input.GenericInput,MLEM.Input.GenericInput[],MLEM.Input.GenericInput[])
  - MLEM.Input.Keybind.Combination.CompareTo(MLEM.Input.Keybind.Combination)
  - MLEM.Input.Keybind.Combination.CompareTo(System.Object)
  - MLEM.Input.Keybind.Combination.InverseModifiers
  - MLEM.Input.Keybind.Combination.IsDown(MLEM.Input.InputHandler,System.Int32)
  - MLEM.Input.Keybind.Combination.IsModifierDown(MLEM.Input.InputHandler,System.Int32)
  - MLEM.Input.Keybind.Combination.IsPressed(MLEM.Input.InputHandler,System.Int32)
  - MLEM.Input.Keybind.Combination.IsPressedAvailable(MLEM.Input.InputHandler,System.Int32)
  - MLEM.Input.Keybind.Combination.Key
  - MLEM.Input.Keybind.Combination.Modifiers
  - MLEM.Input.Keybind.Combination.ToString
  - MLEM.Input.Keybind.Combination.ToString(System.String,System.Func{MLEM.Input.GenericInput,System.String})
  - MLEM.Input.Keybind.Combination.TryConsumePressed(MLEM.Input.InputHandler,System.Int32)
  - MLEM.Input.Keybind.Combination.WasDown(MLEM.Input.InputHandler,System.Int32)
  - MLEM.Input.Keybind.Combination.WasModifierDown(MLEM.Input.InputHandler,System.Int32)
  langs:
  - csharp
  - vb
  name: Keybind.Combination
  nameWithType: Keybind.Combination
  fullName: MLEM.Input.Keybind.Combination
  type: Class
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Combination
    path: ../MLEM/Input/Keybind.cs
    startLine: 323
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    A key combination is a combination of a set of modifier keys and a key.

    All of the keys are <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref> instances, so they can be keyboard-, mouse- or gamepad-based.

    Note that this class implements <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> and <xref href="System.IComparable%601" data-throw-if-not-resolved="false"></xref>, which allows two combinations to be ordered based on how many <xref href="MLEM.Input.Keybind.Combination.Modifiers" data-throw-if-not-resolved="false"></xref> they have.
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Keybind.Combination : IComparable<Keybind.Combination>, IComparable
    content.vb: >-
      <DataContract>

      Public Class Keybind.Combination Implements IComparable(Of Keybind.Combination), IComparable
  inheritance:
  - System.Object
  implements:
  - System.IComparable{MLEM.Input.Keybind.Combination}
  - System.IComparable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: MLEM.Input.Keybind.Combination.Modifiers
  commentId: F:MLEM.Input.Keybind.Combination.Modifiers
  id: Modifiers
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: Modifiers
  nameWithType: Keybind.Combination.Modifiers
  fullName: MLEM.Input.Keybind.Combination.Modifiers
  type: Field
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Modifiers
    path: ../MLEM/Input/Keybind.cs
    startLine: 331
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    The inputs that have to be held down for this combination to be valid, which is queried in <xref href="MLEM.Input.Keybind.Combination.IsModifierDown(MLEM.Input.InputHandler%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Input.Keybind.Combination.WasModifierDown(MLEM.Input.InputHandler%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.

    If this collection is empty, there are no required modifiers.
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly GenericInput[] Modifiers
    return:
      type: MLEM.Input.GenericInput[]
    content.vb: >-
      <DataMember>

      Public ReadOnly Modifiers As GenericInput()
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: MLEM.Input.Keybind.Combination.InverseModifiers
  commentId: F:MLEM.Input.Keybind.Combination.InverseModifiers
  id: InverseModifiers
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: InverseModifiers
  nameWithType: Keybind.Combination.InverseModifiers
  fullName: MLEM.Input.Keybind.Combination.InverseModifiers
  type: Field
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: InverseModifiers
    path: ../MLEM/Input/Keybind.cs
    startLine: 337
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    The inputs that have to be up for this combination to be valid, which is queried in <xref href="MLEM.Input.Keybind.Combination.IsModifierDown(MLEM.Input.InputHandler%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Input.Keybind.Combination.WasModifierDown(MLEM.Input.InputHandler%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.

    If this collection is empty, there are no required inverse modifiers.
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly GenericInput[] InverseModifiers
    return:
      type: MLEM.Input.GenericInput[]
    content.vb: >-
      <DataMember>

      Public ReadOnly InverseModifiers As GenericInput()
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: MLEM.Input.Keybind.Combination.Key
  commentId: F:MLEM.Input.Keybind.Combination.Key
  id: Key
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: Keybind.Combination.Key
  fullName: MLEM.Input.Keybind.Combination.Key
  type: Field
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Key
    path: ../MLEM/Input/Keybind.cs
    startLine: 343
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    The input that has to be down (or pressed) for this combination to be considered down (or pressed).

    Note that <xref href="MLEM.Input.Keybind.Combination.Modifiers" data-throw-if-not-resolved="false"></xref> needs to be empty, or all of its values need to be down, as well.
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly GenericInput Key
    return:
      type: MLEM.Input.GenericInput
    content.vb: >-
      <DataMember>

      Public ReadOnly Key As GenericInput
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: MLEM.Input.Keybind.Combination.#ctor(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  commentId: M:MLEM.Input.Keybind.Combination.#ctor(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  id: '#ctor(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])'
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: Combination(GenericInput, params GenericInput[])
  nameWithType: Keybind.Combination.Combination(GenericInput, params GenericInput[])
  fullName: MLEM.Input.Keybind.Combination.Combination(MLEM.Input.GenericInput, params MLEM.Input.GenericInput[])
  type: Constructor
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM/Input/Keybind.cs
    startLine: 351
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Creates a new combination with the given settings.

    To add a combination to a <xref href="MLEM.Input.Keybind" data-throw-if-not-resolved="false"></xref>, use <xref href="MLEM.Input.Keybind.Add(MLEM.Input.GenericInput%2cMLEM.Input.GenericInput%5b%5d)" data-throw-if-not-resolved="false"></xref> instead.
  example: []
  syntax:
    content: public Combination(GenericInput key, params GenericInput[] modifiers)
    parameters:
    - id: key
      type: MLEM.Input.GenericInput
      description: The key.
    - id: modifiers
      type: MLEM.Input.GenericInput[]
      description: The modifiers.
    content.vb: Public Sub New(key As GenericInput, ParamArray modifiers As GenericInput())
  overload: MLEM.Input.Keybind.Combination.#ctor*
  nameWithType.vb: Keybind.Combination.New(GenericInput, ParamArray GenericInput())
  fullName.vb: MLEM.Input.Keybind.Combination.New(MLEM.Input.GenericInput, ParamArray MLEM.Input.GenericInput())
  name.vb: New(GenericInput, ParamArray GenericInput())
- uid: MLEM.Input.Keybind.Combination.#ctor(MLEM.Input.GenericInput,MLEM.Input.GenericInput[],MLEM.Input.GenericInput[])
  commentId: M:MLEM.Input.Keybind.Combination.#ctor(MLEM.Input.GenericInput,MLEM.Input.GenericInput[],MLEM.Input.GenericInput[])
  id: '#ctor(MLEM.Input.GenericInput,MLEM.Input.GenericInput[],MLEM.Input.GenericInput[])'
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: Combination(GenericInput, GenericInput[], GenericInput[])
  nameWithType: Keybind.Combination.Combination(GenericInput, GenericInput[], GenericInput[])
  fullName: MLEM.Input.Keybind.Combination.Combination(MLEM.Input.GenericInput, MLEM.Input.GenericInput[], MLEM.Input.GenericInput[])
  type: Constructor
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM/Input/Keybind.cs
    startLine: 361
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Creates a new combination with the given settings.

    To add a combination to a <xref href="MLEM.Input.Keybind" data-throw-if-not-resolved="false"></xref>, use <xref href="MLEM.Input.Keybind.Add(MLEM.Input.GenericInput%2cMLEM.Input.GenericInput%5b%5d)" data-throw-if-not-resolved="false"></xref> instead.

    Note that inputs are automatically removed from <code class="paramref">inverseModifiers</code> if they are also present in <code class="paramref">modifiers</code>, or if they are the main <code class="paramref">key</code>.
  example: []
  syntax:
    content: public Combination(GenericInput key, GenericInput[] modifiers, GenericInput[] inverseModifiers)
    parameters:
    - id: key
      type: MLEM.Input.GenericInput
      description: The key.
    - id: modifiers
      type: MLEM.Input.GenericInput[]
      description: The modifiers, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> to use no modifiers.
    - id: inverseModifiers
      type: MLEM.Input.GenericInput[]
      description: The inverse modifiers, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> to use no modifiers.
    content.vb: Public Sub New(key As GenericInput, modifiers As GenericInput(), inverseModifiers As GenericInput())
  overload: MLEM.Input.Keybind.Combination.#ctor*
  nameWithType.vb: Keybind.Combination.New(GenericInput, GenericInput(), GenericInput())
  fullName.vb: MLEM.Input.Keybind.Combination.New(MLEM.Input.GenericInput, MLEM.Input.GenericInput(), MLEM.Input.GenericInput())
  name.vb: New(GenericInput, GenericInput(), GenericInput())
- uid: MLEM.Input.Keybind.Combination.#ctor
  commentId: M:MLEM.Input.Keybind.Combination.#ctor
  id: '#ctor'
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: Combination()
  nameWithType: Keybind.Combination.Combination()
  fullName: MLEM.Input.Keybind.Combination.Combination()
  type: Constructor
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM/Input/Keybind.cs
    startLine: 374
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Creates a new empty combination using the default <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref> with the <xref href="MLEM.Input.GenericInput.InputType.None" data-throw-if-not-resolved="false"></xref> input type and no <xref href="MLEM.Input.Keybind.Combination.Modifiers" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Input.Keybind.Combination.InverseModifiers" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Combination()
    content.vb: Public Sub New()
  overload: MLEM.Input.Keybind.Combination.#ctor*
  nameWithType.vb: Keybind.Combination.New()
  fullName.vb: MLEM.Input.Keybind.Combination.New()
  name.vb: New()
- uid: MLEM.Input.Keybind.Combination.IsDown(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.Combination.IsDown(MLEM.Input.InputHandler,System.Int32)
  id: IsDown(MLEM.Input.InputHandler,System.Int32)
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: IsDown(InputHandler, int)
  nameWithType: Keybind.Combination.IsDown(InputHandler, int)
  fullName: MLEM.Input.Keybind.Combination.IsDown(MLEM.Input.InputHandler, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsDown
    path: ../MLEM/Input/Keybind.cs
    startLine: 383
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns whether this combination is currently down.

    See <xref href="MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> for more information.
  example: []
  syntax:
    content: public bool IsDown(InputHandler handler, int gamepadIndex = -1)
    parameters:
    - id: handler
      type: MLEM.Input.InputHandler
      description: The input handler to query the keys with
    - id: gamepadIndex
      type: System.Int32
      description: The index of the gamepad to query, or -1 to query all gamepads
    return:
      type: System.Boolean
      description: Whether this combination is down
    content.vb: Public Function IsDown(handler As InputHandler, gamepadIndex As Integer = -1) As Boolean
  overload: MLEM.Input.Keybind.Combination.IsDown*
  nameWithType.vb: Keybind.Combination.IsDown(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.Combination.IsDown(MLEM.Input.InputHandler, Integer)
  name.vb: IsDown(InputHandler, Integer)
- uid: MLEM.Input.Keybind.Combination.WasDown(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.Combination.WasDown(MLEM.Input.InputHandler,System.Int32)
  id: WasDown(MLEM.Input.InputHandler,System.Int32)
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: WasDown(InputHandler, int)
  nameWithType: Keybind.Combination.WasDown(InputHandler, int)
  fullName: MLEM.Input.Keybind.Combination.WasDown(MLEM.Input.InputHandler, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: WasDown
    path: ../MLEM/Input/Keybind.cs
    startLine: 394
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns whether this combination was down in the last upate call.

    See <xref href="MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> for more information.
  example: []
  syntax:
    content: public bool WasDown(InputHandler handler, int gamepadIndex = -1)
    parameters:
    - id: handler
      type: MLEM.Input.InputHandler
      description: The input handler to query the keys with
    - id: gamepadIndex
      type: System.Int32
      description: The index of the gamepad to query, or -1 to query all gamepads
    return:
      type: System.Boolean
      description: Whether this combination was down
    content.vb: Public Function WasDown(handler As InputHandler, gamepadIndex As Integer = -1) As Boolean
  overload: MLEM.Input.Keybind.Combination.WasDown*
  nameWithType.vb: Keybind.Combination.WasDown(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.Combination.WasDown(MLEM.Input.InputHandler, Integer)
  name.vb: WasDown(InputHandler, Integer)
- uid: MLEM.Input.Keybind.Combination.IsPressed(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.Combination.IsPressed(MLEM.Input.InputHandler,System.Int32)
  id: IsPressed(MLEM.Input.InputHandler,System.Int32)
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: IsPressed(InputHandler, int)
  nameWithType: Keybind.Combination.IsPressed(InputHandler, int)
  fullName: MLEM.Input.Keybind.Combination.IsPressed(MLEM.Input.InputHandler, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsPressed
    path: ../MLEM/Input/Keybind.cs
    startLine: 405
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns whether this combination is currently pressed.

    See <xref href="MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> for more information.
  example: []
  syntax:
    content: public bool IsPressed(InputHandler handler, int gamepadIndex = -1)
    parameters:
    - id: handler
      type: MLEM.Input.InputHandler
      description: The input handler to query the keys with
    - id: gamepadIndex
      type: System.Int32
      description: The index of the gamepad to query, or -1 to query all gamepads
    return:
      type: System.Boolean
      description: Whether this combination is pressed
    content.vb: Public Function IsPressed(handler As InputHandler, gamepadIndex As Integer = -1) As Boolean
  overload: MLEM.Input.Keybind.Combination.IsPressed*
  nameWithType.vb: Keybind.Combination.IsPressed(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.Combination.IsPressed(MLEM.Input.InputHandler, Integer)
  name.vb: IsPressed(InputHandler, Integer)
- uid: MLEM.Input.Keybind.Combination.IsPressedAvailable(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.Combination.IsPressedAvailable(MLEM.Input.InputHandler,System.Int32)
  id: IsPressedAvailable(MLEM.Input.InputHandler,System.Int32)
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: IsPressedAvailable(InputHandler, int)
  nameWithType: Keybind.Combination.IsPressedAvailable(InputHandler, int)
  fullName: MLEM.Input.Keybind.Combination.IsPressedAvailable(MLEM.Input.InputHandler, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsPressedAvailable
    path: ../MLEM/Input/Keybind.cs
    startLine: 416
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns whether this combination is currently pressed and has not been consumed yet using <xref href="MLEM.Input.Keybind.Combination.TryConsumePressed(MLEM.Input.InputHandler%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.

    See <xref href="MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> for more information.
  example: []
  syntax:
    content: public bool IsPressedAvailable(InputHandler handler, int gamepadIndex = -1)
    parameters:
    - id: handler
      type: MLEM.Input.InputHandler
      description: The input handler to query the keys with
    - id: gamepadIndex
      type: System.Int32
      description: The index of the gamepad to query, or -1 to query all gamepads
    return:
      type: System.Boolean
      description: Whether this combination is pressed
    content.vb: Public Function IsPressedAvailable(handler As InputHandler, gamepadIndex As Integer = -1) As Boolean
  overload: MLEM.Input.Keybind.Combination.IsPressedAvailable*
  nameWithType.vb: Keybind.Combination.IsPressedAvailable(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.Combination.IsPressedAvailable(MLEM.Input.InputHandler, Integer)
  name.vb: IsPressedAvailable(InputHandler, Integer)
- uid: MLEM.Input.Keybind.Combination.TryConsumePressed(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.Combination.TryConsumePressed(MLEM.Input.InputHandler,System.Int32)
  id: TryConsumePressed(MLEM.Input.InputHandler,System.Int32)
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: TryConsumePressed(InputHandler, int)
  nameWithType: Keybind.Combination.TryConsumePressed(InputHandler, int)
  fullName: MLEM.Input.Keybind.Combination.TryConsumePressed(MLEM.Input.InputHandler, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TryConsumePressed
    path: ../MLEM/Input/Keybind.cs
    startLine: 428
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns whether this combination is currently pressed and the press has not been consumed yet.

    A combination is considered consumed if this method has already returned true previously since the last <xref href="MLEM.Input.InputHandler.Update" data-throw-if-not-resolved="false"></xref> call.

    See <xref href="MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> for more information.
  example: []
  syntax:
    content: public bool TryConsumePressed(InputHandler handler, int gamepadIndex = -1)
    parameters:
    - id: handler
      type: MLEM.Input.InputHandler
      description: The input handler to query the keys with
    - id: gamepadIndex
      type: System.Int32
      description: The index of the gamepad to query, or -1 to query all gamepads
    return:
      type: System.Boolean
      description: Whether this combination is pressed
    content.vb: Public Function TryConsumePressed(handler As InputHandler, gamepadIndex As Integer = -1) As Boolean
  overload: MLEM.Input.Keybind.Combination.TryConsumePressed*
  nameWithType.vb: Keybind.Combination.TryConsumePressed(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.Combination.TryConsumePressed(MLEM.Input.InputHandler, Integer)
  name.vb: TryConsumePressed(InputHandler, Integer)
- uid: MLEM.Input.Keybind.Combination.IsModifierDown(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.Combination.IsModifierDown(MLEM.Input.InputHandler,System.Int32)
  id: IsModifierDown(MLEM.Input.InputHandler,System.Int32)
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: IsModifierDown(InputHandler, int)
  nameWithType: Keybind.Combination.IsModifierDown(InputHandler, int)
  fullName: MLEM.Input.Keybind.Combination.IsModifierDown(MLEM.Input.InputHandler, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsModifierDown
    path: ../MLEM/Input/Keybind.cs
    startLine: 438
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns whether all of this combination's <xref href="MLEM.Input.Keybind.Combination.Modifiers" data-throw-if-not-resolved="false"></xref> are currently down and <xref href="MLEM.Input.Keybind.Combination.InverseModifiers" data-throw-if-not-resolved="false"></xref> are currently up.
  example: []
  syntax:
    content: public bool IsModifierDown(InputHandler handler, int gamepadIndex = -1)
    parameters:
    - id: handler
      type: MLEM.Input.InputHandler
      description: The input handler to query the keys with
    - id: gamepadIndex
      type: System.Int32
      description: The index of the gamepad to query, or -1 to query all gamepads
    return:
      type: System.Boolean
      description: Whether this combination's modifiers are down
    content.vb: Public Function IsModifierDown(handler As InputHandler, gamepadIndex As Integer = -1) As Boolean
  overload: MLEM.Input.Keybind.Combination.IsModifierDown*
  nameWithType.vb: Keybind.Combination.IsModifierDown(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.Combination.IsModifierDown(MLEM.Input.InputHandler, Integer)
  name.vb: IsModifierDown(InputHandler, Integer)
- uid: MLEM.Input.Keybind.Combination.WasModifierDown(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.Combination.WasModifierDown(MLEM.Input.InputHandler,System.Int32)
  id: WasModifierDown(MLEM.Input.InputHandler,System.Int32)
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: WasModifierDown(InputHandler, int)
  nameWithType: Keybind.Combination.WasModifierDown(InputHandler, int)
  fullName: MLEM.Input.Keybind.Combination.WasModifierDown(MLEM.Input.InputHandler, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: WasModifierDown
    path: ../MLEM/Input/Keybind.cs
    startLine: 456
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns whether all of this combination's <xref href="MLEM.Input.Keybind.Combination.Modifiers" data-throw-if-not-resolved="false"></xref> were down and <xref href="MLEM.Input.Keybind.Combination.InverseModifiers" data-throw-if-not-resolved="false"></xref> were up in the last update call.
  example: []
  syntax:
    content: public bool WasModifierDown(InputHandler handler, int gamepadIndex = -1)
    parameters:
    - id: handler
      type: MLEM.Input.InputHandler
      description: The input handler to query the keys with
    - id: gamepadIndex
      type: System.Int32
      description: The index of the gamepad to query, or -1 to query all gamepads
    return:
      type: System.Boolean
      description: Whether this combination's modifiers were down
    content.vb: Public Function WasModifierDown(handler As InputHandler, gamepadIndex As Integer = -1) As Boolean
  overload: MLEM.Input.Keybind.Combination.WasModifierDown*
  nameWithType.vb: Keybind.Combination.WasModifierDown(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.Combination.WasModifierDown(MLEM.Input.InputHandler, Integer)
  name.vb: WasModifierDown(InputHandler, Integer)
- uid: MLEM.Input.Keybind.Combination.ToString(System.String,System.Func{MLEM.Input.GenericInput,System.String})
  commentId: M:MLEM.Input.Keybind.Combination.ToString(System.String,System.Func{MLEM.Input.GenericInput,System.String})
  id: ToString(System.String,System.Func{MLEM.Input.GenericInput,System.String})
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: ToString(string, Func<GenericInput, string>)
  nameWithType: Keybind.Combination.ToString(string, Func<GenericInput, string>)
  fullName: MLEM.Input.Keybind.Combination.ToString(string, System.Func<MLEM.Input.GenericInput, string>)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ToString
    path: ../MLEM/Input/Keybind.cs
    startLine: 476
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Converts this combination into an easily human-readable string.

    When using <xref href="MLEM.Input.Keybind.Combination.ToString" data-throw-if-not-resolved="false"></xref>, this method is used with <code class="paramref">joiner</code> set to " + ".
  example: []
  syntax:
    content: public string ToString(string joiner, Func<GenericInput, string> inputName = null)
    parameters:
    - id: joiner
      type: System.String
      description: The string to use to join this combination's <xref href="MLEM.Input.Keybind.Combination.Modifiers" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Input.Keybind.Combination.Key" data-throw-if-not-resolved="false"></xref> together
    - id: inputName
      type: System.Func{MLEM.Input.GenericInput,System.String}
      description: The function to use for determining the display name of a <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref>. If this is null, the generic input's default <xref href="MLEM.Input.GenericInput.ToString" data-throw-if-not-resolved="false"></xref> method is used.
    return:
      type: System.String
      description: A human-readable string representing this combination
    content.vb: Public Function ToString(joiner As String, inputName As Func(Of GenericInput, String) = Nothing) As String
  overload: MLEM.Input.Keybind.Combination.ToString*
  nameWithType.vb: Keybind.Combination.ToString(String, Func(Of GenericInput, String))
  fullName.vb: MLEM.Input.Keybind.Combination.ToString(String, System.Func(Of MLEM.Input.GenericInput, String))
  name.vb: ToString(String, Func(Of GenericInput, String))
- uid: MLEM.Input.Keybind.Combination.CompareTo(MLEM.Input.Keybind.Combination)
  commentId: M:MLEM.Input.Keybind.Combination.CompareTo(MLEM.Input.Keybind.Combination)
  id: CompareTo(MLEM.Input.Keybind.Combination)
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: CompareTo(Combination)
  nameWithType: Keybind.Combination.CompareTo(Keybind.Combination)
  fullName: MLEM.Input.Keybind.Combination.CompareTo(MLEM.Input.Keybind.Combination)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CompareTo
    path: ../MLEM/Input/Keybind.cs
    startLine: 485
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
  example: []
  syntax:
    content: public int CompareTo(Keybind.Combination other)
    parameters:
    - id: other
      type: MLEM.Input.Keybind.Combination
      description: An object to compare with this instance.
    return:
      type: System.Int32
      description: >-
        A value that indicates the relative order of the objects being compared. The return value has these meanings:

             <table><thead><tr><th class="term"> Value</th><th class="description"> Meaning</th></tr></thead><tbody><tr><td class="term"> Less than zero</td><td class="description"> This instance precedes <code class="paramref">other</code> in the sort order.</td></tr><tr><td class="term"> Zero</td><td class="description"> This instance occurs in the same position in the sort order as <code class="paramref">other</code>.</td></tr><tr><td class="term"> Greater than zero</td><td class="description"> This instance follows <code class="paramref">other</code> in the sort order.</td></tr></tbody></table>
    content.vb: Public Function CompareTo(other As Keybind.Combination) As Integer
  overload: MLEM.Input.Keybind.Combination.CompareTo*
  implements:
  - System.IComparable{MLEM.Input.Keybind.Combination}.CompareTo(MLEM.Input.Keybind.Combination)
- uid: MLEM.Input.Keybind.Combination.CompareTo(System.Object)
  commentId: M:MLEM.Input.Keybind.Combination.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: CompareTo(object)
  nameWithType: Keybind.Combination.CompareTo(object)
  fullName: MLEM.Input.Keybind.Combination.CompareTo(object)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CompareTo
    path: ../MLEM/Input/Keybind.cs
    startLine: 496
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
  example: []
  syntax:
    content: public int CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance.
    return:
      type: System.Int32
      description: >-
        A value that indicates the relative order of the objects being compared. The return value has these meanings:

             <table><thead><tr><th class="term"> Value</th><th class="description"> Meaning</th></tr></thead><tbody><tr><td class="term"> Less than zero</td><td class="description"> This instance precedes <code class="paramref">obj</code> in the sort order.</td></tr><tr><td class="term"> Zero</td><td class="description"> This instance occurs in the same position in the sort order as <code class="paramref">obj</code>.</td></tr><tr><td class="term"> Greater than zero</td><td class="description"> This instance follows <code class="paramref">obj</code> in the sort order.</td></tr></tbody></table>
    content.vb: Public Function CompareTo(obj As Object) As Integer
  overload: MLEM.Input.Keybind.Combination.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code class="paramref">obj</code> is not the same type as this instance.
  implements:
  - System.IComparable.CompareTo(System.Object)
  nameWithType.vb: Keybind.Combination.CompareTo(Object)
  fullName.vb: MLEM.Input.Keybind.Combination.CompareTo(Object)
  name.vb: CompareTo(Object)
- uid: MLEM.Input.Keybind.Combination.ToString
  commentId: M:MLEM.Input.Keybind.Combination.ToString
  id: ToString
  parent: MLEM.Input.Keybind.Combination
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Keybind.Combination.ToString()
  fullName: MLEM.Input.Keybind.Combination.ToString()
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ToString
    path: ../MLEM/Input/Keybind.cs
    startLine: 508
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns a string that represents the current object.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string that represents the current object.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: MLEM.Input.Keybind.Combination.ToString*
references:
- uid: MLEM.Input.GenericInput
  commentId: T:MLEM.Input.GenericInput
  parent: MLEM.Input
  href: MLEM.Input.GenericInput.html
  name: GenericInput
  nameWithType: GenericInput
  fullName: MLEM.Input.GenericInput
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Input.Keybind.Combination.Modifiers
  commentId: F:MLEM.Input.Keybind.Combination.Modifiers
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_Modifiers
  name: Modifiers
  nameWithType: Keybind.Combination.Modifiers
  fullName: MLEM.Input.Keybind.Combination.Modifiers
- uid: MLEM.Input
  commentId: N:MLEM.Input
  href: MLEM.html
  name: MLEM.Input
  nameWithType: MLEM.Input
  fullName: MLEM.Input
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Input
    name: Input
    href: MLEM.Input.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Input
    name: Input
    href: MLEM.Input.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IComparable{MLEM.Input.Keybind.Combination}
  commentId: T:System.IComparable{MLEM.Input.Keybind.Combination}
  parent: System
  definition: System.IComparable`1
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<Keybind.Combination>
  nameWithType: IComparable<Keybind.Combination>
  fullName: System.IComparable<MLEM.Input.Keybind.Combination>
  nameWithType.vb: IComparable(Of Keybind.Combination)
  fullName.vb: System.IComparable(Of MLEM.Input.Keybind.Combination)
  name.vb: IComparable(Of Keybind.Combination)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - uid: MLEM.Input.Keybind
    name: Keybind
    href: MLEM.Input.Keybind.html
  - name: .
  - uid: MLEM.Input.Keybind.Combination
    name: Combination
    href: MLEM.Input.Keybind.Combination.html
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Input.Keybind
    name: Keybind
    href: MLEM.Input.Keybind.html
  - name: .
  - uid: MLEM.Input.Keybind.Combination
    name: Combination
    href: MLEM.Input.Keybind.Combination.html
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Input.Keybind.Combination.IsModifierDown(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.Combination.IsModifierDown(MLEM.Input.InputHandler,System.Int32)
  isExternal: true
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_IsModifierDown_MLEM_Input_InputHandler_System_Int32_
  name: IsModifierDown(InputHandler, int)
  nameWithType: Keybind.Combination.IsModifierDown(InputHandler, int)
  fullName: MLEM.Input.Keybind.Combination.IsModifierDown(MLEM.Input.InputHandler, int)
  nameWithType.vb: Keybind.Combination.IsModifierDown(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.Combination.IsModifierDown(MLEM.Input.InputHandler, Integer)
  name.vb: IsModifierDown(InputHandler, Integer)
  spec.csharp:
  - uid: MLEM.Input.Keybind.Combination.IsModifierDown(MLEM.Input.InputHandler,System.Int32)
    name: IsModifierDown
    href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_IsModifierDown_MLEM_Input_InputHandler_System_Int32_
  - name: (
  - uid: MLEM.Input.InputHandler
    name: InputHandler
    href: MLEM.Input.InputHandler.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.Keybind.Combination.IsModifierDown(MLEM.Input.InputHandler,System.Int32)
    name: IsModifierDown
    href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_IsModifierDown_MLEM_Input_InputHandler_System_Int32_
  - name: (
  - uid: MLEM.Input.InputHandler
    name: InputHandler
    href: MLEM.Input.InputHandler.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.Keybind.Combination.WasModifierDown(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.Combination.WasModifierDown(MLEM.Input.InputHandler,System.Int32)
  isExternal: true
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_WasModifierDown_MLEM_Input_InputHandler_System_Int32_
  name: WasModifierDown(InputHandler, int)
  nameWithType: Keybind.Combination.WasModifierDown(InputHandler, int)
  fullName: MLEM.Input.Keybind.Combination.WasModifierDown(MLEM.Input.InputHandler, int)
  nameWithType.vb: Keybind.Combination.WasModifierDown(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.Combination.WasModifierDown(MLEM.Input.InputHandler, Integer)
  name.vb: WasModifierDown(InputHandler, Integer)
  spec.csharp:
  - uid: MLEM.Input.Keybind.Combination.WasModifierDown(MLEM.Input.InputHandler,System.Int32)
    name: WasModifierDown
    href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_WasModifierDown_MLEM_Input_InputHandler_System_Int32_
  - name: (
  - uid: MLEM.Input.InputHandler
    name: InputHandler
    href: MLEM.Input.InputHandler.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.Keybind.Combination.WasModifierDown(MLEM.Input.InputHandler,System.Int32)
    name: WasModifierDown
    href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_WasModifierDown_MLEM_Input_InputHandler_System_Int32_
  - name: (
  - uid: MLEM.Input.InputHandler
    name: InputHandler
    href: MLEM.Input.InputHandler.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.GenericInput[]
  isExternal: true
  href: MLEM.Input.GenericInput.html
  name: GenericInput[]
  nameWithType: GenericInput[]
  fullName: MLEM.Input.GenericInput[]
  nameWithType.vb: GenericInput()
  fullName.vb: MLEM.Input.GenericInput()
  name.vb: GenericInput()
  spec.csharp:
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: (
  - name: )
- uid: MLEM.Input.Keybind
  commentId: T:MLEM.Input.Keybind
  parent: MLEM.Input
  href: MLEM.Input.Keybind.html
  name: Keybind
  nameWithType: Keybind
  fullName: MLEM.Input.Keybind
- uid: MLEM.Input.Keybind.Add(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  commentId: M:MLEM.Input.Keybind.Add(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Add_MLEM_Input_GenericInput_MLEM_Input_GenericInput___
  name: Add(GenericInput, params GenericInput[])
  nameWithType: Keybind.Add(GenericInput, params GenericInput[])
  fullName: MLEM.Input.Keybind.Add(MLEM.Input.GenericInput, params MLEM.Input.GenericInput[])
  nameWithType.vb: Keybind.Add(GenericInput, ParamArray GenericInput())
  fullName.vb: MLEM.Input.Keybind.Add(MLEM.Input.GenericInput, ParamArray MLEM.Input.GenericInput())
  name.vb: Add(GenericInput, ParamArray GenericInput())
  spec.csharp:
  - uid: MLEM.Input.Keybind.Add(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
    name: Add
    href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Add_MLEM_Input_GenericInput_MLEM_Input_GenericInput___
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: MLEM.Input.Keybind.Add(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
    name: Add
    href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Add_MLEM_Input_GenericInput_MLEM_Input_GenericInput___
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: (
  - name: )
  - name: )
- uid: MLEM.Input.Keybind.Combination.#ctor*
  commentId: Overload:MLEM.Input.Keybind.Combination.#ctor
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination__ctor_MLEM_Input_GenericInput_MLEM_Input_GenericInput___
  name: Combination
  nameWithType: Keybind.Combination.Combination
  fullName: MLEM.Input.Keybind.Combination.Combination
  nameWithType.vb: Keybind.Combination.New
  fullName.vb: MLEM.Input.Keybind.Combination.New
  name.vb: New
- uid: MLEM.Input.GenericInput.InputType.None
  commentId: F:MLEM.Input.GenericInput.InputType.None
  href: MLEM.Input.GenericInput.InputType.html#MLEM_Input_GenericInput_InputType_None
  name: None
  nameWithType: GenericInput.InputType.None
  fullName: MLEM.Input.GenericInput.InputType.None
- uid: MLEM.Input.Keybind.Combination.InverseModifiers
  commentId: F:MLEM.Input.Keybind.Combination.InverseModifiers
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_InverseModifiers
  name: InverseModifiers
  nameWithType: Keybind.Combination.InverseModifiers
  fullName: MLEM.Input.Keybind.Combination.InverseModifiers
- uid: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsDown_MLEM_Input_GenericInput_System_Int32_
  name: IsDown(GenericInput, int)
  nameWithType: InputHandler.IsDown(GenericInput, int)
  fullName: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput, int)
  nameWithType.vb: InputHandler.IsDown(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput, Integer)
  name.vb: IsDown(GenericInput, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput,System.Int32)
    name: IsDown
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsDown_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput,System.Int32)
    name: IsDown
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsDown_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.Keybind.Combination.IsDown*
  commentId: Overload:MLEM.Input.Keybind.Combination.IsDown
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_IsDown_MLEM_Input_InputHandler_System_Int32_
  name: IsDown
  nameWithType: Keybind.Combination.IsDown
  fullName: MLEM.Input.Keybind.Combination.IsDown
- uid: MLEM.Input.InputHandler
  commentId: T:MLEM.Input.InputHandler
  parent: MLEM.Input
  href: MLEM.Input.InputHandler.html
  name: InputHandler
  nameWithType: InputHandler
  fullName: MLEM.Input.InputHandler
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_WasDown_MLEM_Input_GenericInput_System_Int32_
  name: WasDown(GenericInput, int)
  nameWithType: InputHandler.WasDown(GenericInput, int)
  fullName: MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput, int)
  nameWithType.vb: InputHandler.WasDown(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput, Integer)
  name.vb: WasDown(GenericInput, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput,System.Int32)
    name: WasDown
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_WasDown_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput,System.Int32)
    name: WasDown
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_WasDown_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.Keybind.Combination.WasDown*
  commentId: Overload:MLEM.Input.Keybind.Combination.WasDown
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_WasDown_MLEM_Input_InputHandler_System_Int32_
  name: WasDown
  nameWithType: Keybind.Combination.WasDown
  fullName: MLEM.Input.Keybind.Combination.WasDown
- uid: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressed_MLEM_Input_GenericInput_System_Int32_
  name: IsPressed(GenericInput, int)
  nameWithType: InputHandler.IsPressed(GenericInput, int)
  fullName: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput, int)
  nameWithType.vb: InputHandler.IsPressed(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput, Integer)
  name.vb: IsPressed(GenericInput, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput,System.Int32)
    name: IsPressed
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressed_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput,System.Int32)
    name: IsPressed
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressed_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.Keybind.Combination.IsPressed*
  commentId: Overload:MLEM.Input.Keybind.Combination.IsPressed
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_IsPressed_MLEM_Input_InputHandler_System_Int32_
  name: IsPressed
  nameWithType: Keybind.Combination.IsPressed
  fullName: MLEM.Input.Keybind.Combination.IsPressed
- uid: MLEM.Input.Keybind.Combination.TryConsumePressed(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.Combination.TryConsumePressed(MLEM.Input.InputHandler,System.Int32)
  isExternal: true
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_TryConsumePressed_MLEM_Input_InputHandler_System_Int32_
  name: TryConsumePressed(InputHandler, int)
  nameWithType: Keybind.Combination.TryConsumePressed(InputHandler, int)
  fullName: MLEM.Input.Keybind.Combination.TryConsumePressed(MLEM.Input.InputHandler, int)
  nameWithType.vb: Keybind.Combination.TryConsumePressed(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.Combination.TryConsumePressed(MLEM.Input.InputHandler, Integer)
  name.vb: TryConsumePressed(InputHandler, Integer)
  spec.csharp:
  - uid: MLEM.Input.Keybind.Combination.TryConsumePressed(MLEM.Input.InputHandler,System.Int32)
    name: TryConsumePressed
    href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_TryConsumePressed_MLEM_Input_InputHandler_System_Int32_
  - name: (
  - uid: MLEM.Input.InputHandler
    name: InputHandler
    href: MLEM.Input.InputHandler.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.Keybind.Combination.TryConsumePressed(MLEM.Input.InputHandler,System.Int32)
    name: TryConsumePressed
    href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_TryConsumePressed_MLEM_Input_InputHandler_System_Int32_
  - name: (
  - uid: MLEM.Input.InputHandler
    name: InputHandler
    href: MLEM.Input.InputHandler.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressedAvailable_MLEM_Input_GenericInput_System_Int32_
  name: IsPressedAvailable(GenericInput, int)
  nameWithType: InputHandler.IsPressedAvailable(GenericInput, int)
  fullName: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput, int)
  nameWithType.vb: InputHandler.IsPressedAvailable(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput, Integer)
  name.vb: IsPressedAvailable(GenericInput, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput,System.Int32)
    name: IsPressedAvailable
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressedAvailable_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput,System.Int32)
    name: IsPressedAvailable
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressedAvailable_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.Keybind.Combination.IsPressedAvailable*
  commentId: Overload:MLEM.Input.Keybind.Combination.IsPressedAvailable
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_IsPressedAvailable_MLEM_Input_InputHandler_System_Int32_
  name: IsPressedAvailable
  nameWithType: Keybind.Combination.IsPressedAvailable
  fullName: MLEM.Input.Keybind.Combination.IsPressedAvailable
- uid: MLEM.Input.InputHandler.Update
  commentId: M:MLEM.Input.InputHandler.Update
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_Update
  name: Update()
  nameWithType: InputHandler.Update()
  fullName: MLEM.Input.InputHandler.Update()
  spec.csharp:
  - uid: MLEM.Input.InputHandler.Update
    name: Update
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_Update
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.Update
    name: Update
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_Update
  - name: (
  - name: )
- uid: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryConsumePressed_MLEM_Input_GenericInput_System_Int32_
  name: TryConsumePressed(GenericInput, int)
  nameWithType: InputHandler.TryConsumePressed(GenericInput, int)
  fullName: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput, int)
  nameWithType.vb: InputHandler.TryConsumePressed(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput, Integer)
  name.vb: TryConsumePressed(GenericInput, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput,System.Int32)
    name: TryConsumePressed
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryConsumePressed_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput,System.Int32)
    name: TryConsumePressed
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryConsumePressed_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.Keybind.Combination.TryConsumePressed*
  commentId: Overload:MLEM.Input.Keybind.Combination.TryConsumePressed
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_TryConsumePressed_MLEM_Input_InputHandler_System_Int32_
  name: TryConsumePressed
  nameWithType: Keybind.Combination.TryConsumePressed
  fullName: MLEM.Input.Keybind.Combination.TryConsumePressed
- uid: MLEM.Input.Keybind.Combination.IsModifierDown*
  commentId: Overload:MLEM.Input.Keybind.Combination.IsModifierDown
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_IsModifierDown_MLEM_Input_InputHandler_System_Int32_
  name: IsModifierDown
  nameWithType: Keybind.Combination.IsModifierDown
  fullName: MLEM.Input.Keybind.Combination.IsModifierDown
- uid: MLEM.Input.Keybind.Combination.WasModifierDown*
  commentId: Overload:MLEM.Input.Keybind.Combination.WasModifierDown
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_WasModifierDown_MLEM_Input_InputHandler_System_Int32_
  name: WasModifierDown
  nameWithType: Keybind.Combination.WasModifierDown
  fullName: MLEM.Input.Keybind.Combination.WasModifierDown
- uid: MLEM.Input.Keybind.Combination.ToString
  commentId: M:MLEM.Input.Keybind.Combination.ToString
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_ToString
  name: ToString()
  nameWithType: Keybind.Combination.ToString()
  fullName: MLEM.Input.Keybind.Combination.ToString()
  spec.csharp:
  - uid: MLEM.Input.Keybind.Combination.ToString
    name: ToString
    href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_ToString
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Input.Keybind.Combination.ToString
    name: ToString
    href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_ToString
  - name: (
  - name: )
- uid: MLEM.Input.Keybind.Combination.Key
  commentId: F:MLEM.Input.Keybind.Combination.Key
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_Key
  name: Key
  nameWithType: Keybind.Combination.Key
  fullName: MLEM.Input.Keybind.Combination.Key
- uid: MLEM.Input.GenericInput.ToString
  commentId: M:MLEM.Input.GenericInput.ToString
  href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_ToString
  name: ToString()
  nameWithType: GenericInput.ToString()
  fullName: MLEM.Input.GenericInput.ToString()
  spec.csharp:
  - uid: MLEM.Input.GenericInput.ToString
    name: ToString
    href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_ToString
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Input.GenericInput.ToString
    name: ToString
    href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_ToString
  - name: (
  - name: )
- uid: MLEM.Input.Keybind.Combination.ToString*
  commentId: Overload:MLEM.Input.Keybind.Combination.ToString
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_ToString_System_String_System_Func_MLEM_Input_GenericInput_System_String__
  name: ToString
  nameWithType: Keybind.Combination.ToString
  fullName: MLEM.Input.Keybind.Combination.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Func{MLEM.Input.GenericInput,System.String}
  commentId: T:System.Func{MLEM.Input.GenericInput,System.String}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<GenericInput, string>
  nameWithType: Func<GenericInput, string>
  fullName: System.Func<MLEM.Input.GenericInput, string>
  nameWithType.vb: Func(Of GenericInput, String)
  fullName.vb: System.Func(Of MLEM.Input.GenericInput, String)
  name.vb: Func(Of GenericInput, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: MLEM.Input.Keybind.Combination.CompareTo*
  commentId: Overload:MLEM.Input.Keybind.Combination.CompareTo
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_CompareTo_MLEM_Input_Keybind_Combination_
  name: CompareTo
  nameWithType: Keybind.Combination.CompareTo
  fullName: MLEM.Input.Keybind.Combination.CompareTo
- uid: System.IComparable{MLEM.Input.Keybind.Combination}.CompareTo(MLEM.Input.Keybind.Combination)
  commentId: M:System.IComparable{MLEM.Input.Keybind.Combination}.CompareTo(MLEM.Input.Keybind.Combination)
  parent: System.IComparable{MLEM.Input.Keybind.Combination}
  definition: System.IComparable`1.CompareTo(`0)
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  name: CompareTo(Combination)
  nameWithType: IComparable<Keybind.Combination>.CompareTo(Keybind.Combination)
  fullName: System.IComparable<MLEM.Input.Keybind.Combination>.CompareTo(MLEM.Input.Keybind.Combination)
  nameWithType.vb: IComparable(Of Keybind.Combination).CompareTo(Keybind.Combination)
  fullName.vb: System.IComparable(Of MLEM.Input.Keybind.Combination).CompareTo(MLEM.Input.Keybind.Combination)
  spec.csharp:
  - uid: System.IComparable{MLEM.Input.Keybind.Combination}.CompareTo(MLEM.Input.Keybind.Combination)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - uid: MLEM.Input.Keybind.Combination
    name: Combination
    href: MLEM.Input.Keybind.Combination.html
  - name: )
  spec.vb:
  - uid: System.IComparable{MLEM.Input.Keybind.Combination}.CompareTo(MLEM.Input.Keybind.Combination)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - uid: MLEM.Input.Keybind.Combination
    name: Combination
    href: MLEM.Input.Keybind.Combination.html
  - name: )
- uid: MLEM.Input.Keybind.Combination
  commentId: T:MLEM.Input.Keybind.Combination
  parent: MLEM.Input
  href: MLEM.Input.Keybind.html
  name: Keybind.Combination
  nameWithType: Keybind.Combination
  fullName: MLEM.Input.Keybind.Combination
  spec.csharp:
  - uid: MLEM.Input.Keybind
    name: Keybind
    href: MLEM.Input.Keybind.html
  - name: .
  - uid: MLEM.Input.Keybind.Combination
    name: Combination
    href: MLEM.Input.Keybind.Combination.html
  spec.vb:
  - uid: MLEM.Input.Keybind
    name: Keybind
    href: MLEM.Input.Keybind.html
  - name: .
  - uid: MLEM.Input.Keybind.Combination
    name: Combination
    href: MLEM.Input.Keybind.Combination.html
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - name: T
  - name: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  name: CompareTo(object)
  nameWithType: IComparable.CompareTo(object)
  fullName: System.IComparable.CompareTo(object)
  nameWithType.vb: IComparable.CompareTo(Object)
  fullName.vb: System.IComparable.CompareTo(Object)
  name.vb: CompareTo(Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
