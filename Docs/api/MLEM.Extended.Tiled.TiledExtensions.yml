### YamlMime:ManagedReference
items:
- uid: MLEM.Extended.Tiled.TiledExtensions
  commentId: T:MLEM.Extended.Tiled.TiledExtensions
  id: TiledExtensions
  parent: MLEM.Extended.Tiled
  children:
  - MLEM.Extended.Tiled.TiledExtensions.Get(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  - MLEM.Extended.Tiled.TiledExtensions.GetArea(MonoGame.Extended.Tiled.TiledMapObject,MonoGame.Extended.Tiled.TiledMap,System.Nullable{Microsoft.Xna.Framework.Vector2},MonoGame.Extended.Tiled.TiledMapTileFlipFlags)
  - MLEM.Extended.Tiled.TiledExtensions.GetBool(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  - MLEM.Extended.Tiled.TiledExtensions.GetColor(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  - MLEM.Extended.Tiled.TiledExtensions.GetFloat(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  - MLEM.Extended.Tiled.TiledExtensions.GetGlobalIdentifier(MonoGame.Extended.Tiled.TiledMapTilesetTile,MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMap)
  - MLEM.Extended.Tiled.TiledExtensions.GetInt(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  - MLEM.Extended.Tiled.TiledExtensions.GetLocalIdentifier(MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMap)
  - MLEM.Extended.Tiled.TiledExtensions.GetObjects(MonoGame.Extended.Tiled.TiledMap,System.String,System.Boolean,System.Boolean)
  - MLEM.Extended.Tiled.TiledExtensions.GetObjects(MonoGame.Extended.Tiled.TiledMapObjectLayer,System.String,System.Boolean,System.Boolean)
  - MLEM.Extended.Tiled.TiledExtensions.GetSpriteEffects(MonoGame.Extended.Tiled.TiledMapTile)
  - MLEM.Extended.Tiled.TiledExtensions.GetTextureRegion(MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTilesetTile)
  - MLEM.Extended.Tiled.TiledExtensions.GetTile(MonoGame.Extended.Tiled.TiledMap,MLEM.Extended.Tiled.LayerPosition)
  - MLEM.Extended.Tiled.TiledExtensions.GetTile(MonoGame.Extended.Tiled.TiledMap,System.String,System.Int32,System.Int32)
  - MLEM.Extended.Tiled.TiledExtensions.GetTile(MonoGame.Extended.Tiled.TiledMapTileLayer,System.Int32,System.Int32)
  - MLEM.Extended.Tiled.TiledExtensions.GetTileLayerIndex(MonoGame.Extended.Tiled.TiledMap,System.String)
  - MLEM.Extended.Tiled.TiledExtensions.GetTileSize(MonoGame.Extended.Tiled.TiledMap)
  - MLEM.Extended.Tiled.TiledExtensions.GetTiles(MonoGame.Extended.Tiled.TiledMap,System.Int32,System.Int32)
  - MLEM.Extended.Tiled.TiledExtensions.GetTileset(MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMap)
  - MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMap,System.Boolean)
  - MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMap,System.Boolean)
  - MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset,System.Int32,System.Boolean)
  - MLEM.Extended.Tiled.TiledExtensions.IsInBounds(MonoGame.Extended.Tiled.TiledMapTileLayer,System.Int32,System.Int32)
  - MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap,MLEM.Extended.Tiled.LayerPosition,MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTilesetTile)
  - MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap,MLEM.Extended.Tiled.LayerPosition,System.Int32)
  - MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap,System.String,System.Int32,System.Int32,MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTilesetTile)
  - MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap,System.String,System.Int32,System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: TiledExtensions
  nameWithType: TiledExtensions
  fullName: MLEM.Extended.Tiled.TiledExtensions
  type: Class
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TiledExtensions
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 13
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: A set of extensions for dealing with MonoGame.Extended tiled maps
  example: []
  syntax:
    content: public static class TiledExtensions
    content.vb: Public Module TiledExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: MLEM.Extended.Tiled.TiledExtensions.Get(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.Get(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  id: Get(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: Get(TiledMapProperties, string)
  nameWithType: TiledExtensions.Get(TiledMapProperties, string)
  fullName: MLEM.Extended.Tiled.TiledExtensions.Get(MonoGame.Extended.Tiled.TiledMapProperties, string)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Get
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 23
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Gets the property with the given key, or null if there is none.
  example: []
  syntax:
    content: public static string Get(this TiledMapProperties properties, string key)
    parameters:
    - id: properties
      type: MonoGame.Extended.Tiled.TiledMapProperties
      description: The set of properties
    - id: key
      type: System.String
      description: The key by which to get a property
    return:
      type: System.String
      description: The property, or null if there is none
    content.vb: Public Shared Function [Get](properties As TiledMapProperties, key As String) As String
  overload: MLEM.Extended.Tiled.TiledExtensions.Get*
  nameWithType.vb: TiledExtensions.Get(TiledMapProperties, String)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.Get(MonoGame.Extended.Tiled.TiledMapProperties, String)
  name.vb: Get(TiledMapProperties, String)
- uid: MLEM.Extended.Tiled.TiledExtensions.GetBool(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetBool(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  id: GetBool(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetBool(TiledMapProperties, string)
  nameWithType: TiledExtensions.GetBool(TiledMapProperties, string)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetBool(MonoGame.Extended.Tiled.TiledMapProperties, string)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetBool
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 34
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Gets a boolean property with the given key, or null if there is none.
  example: []
  syntax:
    content: public static bool GetBool(this TiledMapProperties properties, string key)
    parameters:
    - id: properties
      type: MonoGame.Extended.Tiled.TiledMapProperties
      description: The set of properties
    - id: key
      type: System.String
      description: The key by which to get a property
    return:
      type: System.Boolean
      description: The boolean property, or false if there is none
    content.vb: Public Shared Function GetBool(properties As TiledMapProperties, key As String) As Boolean
  overload: MLEM.Extended.Tiled.TiledExtensions.GetBool*
  nameWithType.vb: TiledExtensions.GetBool(TiledMapProperties, String)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.GetBool(MonoGame.Extended.Tiled.TiledMapProperties, String)
  name.vb: GetBool(TiledMapProperties, String)
- uid: MLEM.Extended.Tiled.TiledExtensions.GetColor(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetColor(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  id: GetColor(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetColor(TiledMapProperties, string)
  nameWithType: TiledExtensions.GetColor(TiledMapProperties, string)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetColor(MonoGame.Extended.Tiled.TiledMapProperties, string)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetColor
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 45
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Gets a Color property with the given key, or null if there is none.
  example: []
  syntax:
    content: public static Color GetColor(this TiledMapProperties properties, string key)
    parameters:
    - id: properties
      type: MonoGame.Extended.Tiled.TiledMapProperties
      description: The set of properties
    - id: key
      type: System.String
      description: The key by which to get a property
    return:
      type: Microsoft.Xna.Framework.Color
      description: The color property
    content.vb: Public Shared Function GetColor(properties As TiledMapProperties, key As String) As Color
  overload: MLEM.Extended.Tiled.TiledExtensions.GetColor*
  nameWithType.vb: TiledExtensions.GetColor(TiledMapProperties, String)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.GetColor(MonoGame.Extended.Tiled.TiledMapProperties, String)
  name.vb: GetColor(TiledMapProperties, String)
- uid: MLEM.Extended.Tiled.TiledExtensions.GetFloat(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetFloat(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  id: GetFloat(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetFloat(TiledMapProperties, string)
  nameWithType: TiledExtensions.GetFloat(TiledMapProperties, string)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetFloat(MonoGame.Extended.Tiled.TiledMapProperties, string)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetFloat
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 56
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Gets a float property with the given key, or null if there is none.
  example: []
  syntax:
    content: public static float GetFloat(this TiledMapProperties properties, string key)
    parameters:
    - id: properties
      type: MonoGame.Extended.Tiled.TiledMapProperties
      description: The set of properties
    - id: key
      type: System.String
      description: The key by which to get a property
    return:
      type: System.Single
      description: The float property, or 0 if there is none
    content.vb: Public Shared Function GetFloat(properties As TiledMapProperties, key As String) As Single
  overload: MLEM.Extended.Tiled.TiledExtensions.GetFloat*
  nameWithType.vb: TiledExtensions.GetFloat(TiledMapProperties, String)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.GetFloat(MonoGame.Extended.Tiled.TiledMapProperties, String)
  name.vb: GetFloat(TiledMapProperties, String)
- uid: MLEM.Extended.Tiled.TiledExtensions.GetInt(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetInt(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  id: GetInt(MonoGame.Extended.Tiled.TiledMapProperties,System.String)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetInt(TiledMapProperties, string)
  nameWithType: TiledExtensions.GetInt(TiledMapProperties, string)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetInt(MonoGame.Extended.Tiled.TiledMapProperties, string)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetInt
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 67
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Gets an int property with the given key, or null if there is none.
  example: []
  syntax:
    content: public static int GetInt(this TiledMapProperties properties, string key)
    parameters:
    - id: properties
      type: MonoGame.Extended.Tiled.TiledMapProperties
      description: The set of properties
    - id: key
      type: System.String
      description: The key by which to get a property
    return:
      type: System.Int32
      description: The int property, or 0 if there is none
    content.vb: Public Shared Function GetInt(properties As TiledMapProperties, key As String) As Integer
  overload: MLEM.Extended.Tiled.TiledExtensions.GetInt*
  nameWithType.vb: TiledExtensions.GetInt(TiledMapProperties, String)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.GetInt(MonoGame.Extended.Tiled.TiledMapProperties, String)
  name.vb: GetInt(TiledMapProperties, String)
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTileset(MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMap)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetTileset(MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMap)
  id: GetTileset(MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMap)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetTileset(TiledMapTile, TiledMap)
  nameWithType: TiledExtensions.GetTileset(TiledMapTile, TiledMap)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTileset(MonoGame.Extended.Tiled.TiledMapTile, MonoGame.Extended.Tiled.TiledMap)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetTileset
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 78
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Gets the tileset for the given map tile on the given map.
  example: []
  syntax:
    content: public static TiledMapTileset GetTileset(this TiledMapTile tile, TiledMap map)
    parameters:
    - id: tile
      type: MonoGame.Extended.Tiled.TiledMapTile
      description: The tile
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
      description: The map the tile is on
    return:
      type: MonoGame.Extended.Tiled.TiledMapTileset
      description: The tileset that the tile came from
    content.vb: Public Shared Function GetTileset(tile As TiledMapTile, map As TiledMap) As TiledMapTileset
  overload: MLEM.Extended.Tiled.TiledExtensions.GetTileset*
- uid: MLEM.Extended.Tiled.TiledExtensions.GetLocalIdentifier(MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMap)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetLocalIdentifier(MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMap)
  id: GetLocalIdentifier(MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMap)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetLocalIdentifier(TiledMapTile, TiledMapTileset, TiledMap)
  nameWithType: TiledExtensions.GetLocalIdentifier(TiledMapTile, TiledMapTileset, TiledMap)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetLocalIdentifier(MonoGame.Extended.Tiled.TiledMapTile, MonoGame.Extended.Tiled.TiledMapTileset, MonoGame.Extended.Tiled.TiledMap)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetLocalIdentifier
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 90
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: >-
    Gets the local tile identifier for the given tiled map tile.

    The local tile identifier is the identifier within the tile's tileset.
  example: []
  syntax:
    content: public static int GetLocalIdentifier(this TiledMapTile tile, TiledMapTileset tileset, TiledMap map)
    parameters:
    - id: tile
      type: MonoGame.Extended.Tiled.TiledMapTile
      description: The tile whose identifier to get
    - id: tileset
      type: MonoGame.Extended.Tiled.TiledMapTileset
      description: The tileset the tile is from
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
      description: The map the tile is on
    return:
      type: System.Int32
      description: The local identifier
    content.vb: Public Shared Function GetLocalIdentifier(tile As TiledMapTile, tileset As TiledMapTileset, map As TiledMap) As Integer
  overload: MLEM.Extended.Tiled.TiledExtensions.GetLocalIdentifier*
- uid: MLEM.Extended.Tiled.TiledExtensions.GetGlobalIdentifier(MonoGame.Extended.Tiled.TiledMapTilesetTile,MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMap)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetGlobalIdentifier(MonoGame.Extended.Tiled.TiledMapTilesetTile,MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMap)
  id: GetGlobalIdentifier(MonoGame.Extended.Tiled.TiledMapTilesetTile,MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMap)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetGlobalIdentifier(TiledMapTilesetTile, TiledMapTileset, TiledMap)
  nameWithType: TiledExtensions.GetGlobalIdentifier(TiledMapTilesetTile, TiledMapTileset, TiledMap)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetGlobalIdentifier(MonoGame.Extended.Tiled.TiledMapTilesetTile, MonoGame.Extended.Tiled.TiledMapTileset, MonoGame.Extended.Tiled.TiledMap)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetGlobalIdentifier
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 102
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: >-
    Gets the global tile identifier for the given tiled map tileset tile.

    The global tile identifier is the identifier within all of the tile sets that the map has.
  example: []
  syntax:
    content: public static int GetGlobalIdentifier(this TiledMapTilesetTile tile, TiledMapTileset tileset, TiledMap map)
    parameters:
    - id: tile
      type: MonoGame.Extended.Tiled.TiledMapTilesetTile
      description: The tile whose global identifier to get
    - id: tileset
      type: MonoGame.Extended.Tiled.TiledMapTileset
      description: The tileset the tile is from
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
      description: The map the tile is on
    return:
      type: System.Int32
      description: The global identifier
    content.vb: Public Shared Function GetGlobalIdentifier(tile As TiledMapTilesetTile, tileset As TiledMapTileset, map As TiledMap) As Integer
  overload: MLEM.Extended.Tiled.TiledExtensions.GetGlobalIdentifier*
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMap,System.Boolean)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMap,System.Boolean)
  id: GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMap,System.Boolean)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetTilesetTile(TiledMapTileset, TiledMapTile, TiledMap, bool)
  nameWithType: TiledExtensions.GetTilesetTile(TiledMapTileset, TiledMapTile, TiledMap, bool)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset, MonoGame.Extended.Tiled.TiledMapTile, MonoGame.Extended.Tiled.TiledMap, bool)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetTilesetTile
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 114
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Gets the tileset tile on the given tileset for the given tile.
  example: []
  syntax:
    content: public static TiledMapTilesetTile GetTilesetTile(this TiledMapTileset tileset, TiledMapTile tile, TiledMap map, bool createStub = true)
    parameters:
    - id: tileset
      type: MonoGame.Extended.Tiled.TiledMapTileset
      description: The tileset
    - id: tile
      type: MonoGame.Extended.Tiled.TiledMapTile
      description: The tile
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
      description: The map the tile is on
    - id: createStub
      type: System.Boolean
      description: If a tileset tile has no special properties, there is no pre-made object for it. If this boolean is true, a stub object with no extra data will be created instead of returning null.
    return:
      type: MonoGame.Extended.Tiled.TiledMapTilesetTile
      description: null if the tile is blank or the tileset tile if there is one or createStub is true
    content.vb: Public Shared Function GetTilesetTile(tileset As TiledMapTileset, tile As TiledMapTile, map As TiledMap, createStub As Boolean = True) As TiledMapTilesetTile
  overload: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile*
  nameWithType.vb: TiledExtensions.GetTilesetTile(TiledMapTileset, TiledMapTile, TiledMap, Boolean)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset, MonoGame.Extended.Tiled.TiledMapTile, MonoGame.Extended.Tiled.TiledMap, Boolean)
  name.vb: GetTilesetTile(TiledMapTileset, TiledMapTile, TiledMap, Boolean)
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMap,System.Boolean)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMap,System.Boolean)
  id: GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMap,System.Boolean)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetTilesetTile(TiledMapTile, TiledMap, bool)
  nameWithType: TiledExtensions.GetTilesetTile(TiledMapTile, TiledMap, bool)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTile, MonoGame.Extended.Tiled.TiledMap, bool)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetTilesetTile
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 129
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: >-
    Gets the tileset tile on the given tileset for the given tile.

    If the tileset is already known, you should use <xref href="MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset%2cMonoGame.Extended.Tiled.TiledMapTile%2cMonoGame.Extended.Tiled.TiledMap%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> instead for performance.
  example: []
  syntax:
    content: public static TiledMapTilesetTile GetTilesetTile(this TiledMapTile tile, TiledMap map, bool createStub = true)
    parameters:
    - id: tile
      type: MonoGame.Extended.Tiled.TiledMapTile
      description: The tile
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
      description: The map the tile is on
    - id: createStub
      type: System.Boolean
      description: If a tileset tile has no special properties, there is no pre-made object for it. If this boolean is true, a stub object with no extra data will be created instead of returning null.
    return:
      type: MonoGame.Extended.Tiled.TiledMapTilesetTile
      description: null if the tile is blank or the tileset tile if there is one or createStub is true
    content.vb: Public Shared Function GetTilesetTile(tile As TiledMapTile, map As TiledMap, createStub As Boolean = True) As TiledMapTilesetTile
  overload: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile*
  nameWithType.vb: TiledExtensions.GetTilesetTile(TiledMapTile, TiledMap, Boolean)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTile, MonoGame.Extended.Tiled.TiledMap, Boolean)
  name.vb: GetTilesetTile(TiledMapTile, TiledMap, Boolean)
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset,System.Int32,System.Boolean)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset,System.Int32,System.Boolean)
  id: GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetTilesetTile(TiledMapTileset, int, bool)
  nameWithType: TiledExtensions.GetTilesetTile(TiledMapTileset, int, bool)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset, int, bool)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetTilesetTile
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 143
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Gets the tileset tile on the given tileset for the given local id.
  example: []
  syntax:
    content: public static TiledMapTilesetTile GetTilesetTile(this TiledMapTileset tileset, int localId, bool createStub = true)
    parameters:
    - id: tileset
      type: MonoGame.Extended.Tiled.TiledMapTileset
      description: The tileset
    - id: localId
      type: System.Int32
      description: The tile's local id
    - id: createStub
      type: System.Boolean
      description: If a tileset tile has no special properties, there is no pre-made object for it. If this boolean is true, a stub object with no extra data will be created instead of returning null.
    return:
      type: MonoGame.Extended.Tiled.TiledMapTilesetTile
      description: null if the tile is blank or the tileset tile if there is one or createStub is true
    content.vb: Public Shared Function GetTilesetTile(tileset As TiledMapTileset, localId As Integer, createStub As Boolean = True) As TiledMapTilesetTile
  overload: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile*
  nameWithType.vb: TiledExtensions.GetTilesetTile(TiledMapTileset, Integer, Boolean)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset, Integer, Boolean)
  name.vb: GetTilesetTile(TiledMapTileset, Integer, Boolean)
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTileLayerIndex(MonoGame.Extended.Tiled.TiledMap,System.String)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetTileLayerIndex(MonoGame.Extended.Tiled.TiledMap,System.String)
  id: GetTileLayerIndex(MonoGame.Extended.Tiled.TiledMap,System.String)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetTileLayerIndex(TiledMap, string)
  nameWithType: TiledExtensions.GetTileLayerIndex(TiledMap, string)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTileLayerIndex(MonoGame.Extended.Tiled.TiledMap, string)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetTileLayerIndex
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 160
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Gets the layer index of the layer with the given name in the <xref href="MonoGame.Extended.Tiled.TiledMap.Layers" data-throw-if-not-resolved="false"></xref> array.
  example: []
  syntax:
    content: public static int GetTileLayerIndex(this TiledMap map, string layerName)
    parameters:
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
      description: The map
    - id: layerName
      type: System.String
      description: The name of the layer
    return:
      type: System.Int32
      description: The resulting index
    content.vb: Public Shared Function GetTileLayerIndex(map As TiledMap, layerName As String) As Integer
  overload: MLEM.Extended.Tiled.TiledExtensions.GetTileLayerIndex*
  nameWithType.vb: TiledExtensions.GetTileLayerIndex(TiledMap, String)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.GetTileLayerIndex(MonoGame.Extended.Tiled.TiledMap, String)
  name.vb: GetTileLayerIndex(TiledMap, String)
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTile(MonoGame.Extended.Tiled.TiledMap,System.String,System.Int32,System.Int32)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetTile(MonoGame.Extended.Tiled.TiledMap,System.String,System.Int32,System.Int32)
  id: GetTile(MonoGame.Extended.Tiled.TiledMap,System.String,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetTile(TiledMap, string, int, int)
  nameWithType: TiledExtensions.GetTile(TiledMap, string, int, int)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTile(MonoGame.Extended.Tiled.TiledMap, string, int, int)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetTile
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 173
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Returns the tiled map tile at the given location on the layer with the given name.
  example: []
  syntax:
    content: public static TiledMapTile GetTile(this TiledMap map, string layerName, int x, int y)
    parameters:
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
      description: The map
    - id: layerName
      type: System.String
      description: The name of the layer the tile is on
    - id: x
      type: System.Int32
      description: The x coordinate of the tile
    - id: y
      type: System.Int32
      description: The y coordinate of the tile
    return:
      type: MonoGame.Extended.Tiled.TiledMapTile
      description: The tile at the given location, or default if the layer does not exist
    content.vb: Public Shared Function GetTile(map As TiledMap, layerName As String, x As Integer, y As Integer) As TiledMapTile
  overload: MLEM.Extended.Tiled.TiledExtensions.GetTile*
  nameWithType.vb: TiledExtensions.GetTile(TiledMap, String, Integer, Integer)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.GetTile(MonoGame.Extended.Tiled.TiledMap, String, Integer, Integer)
  name.vb: GetTile(TiledMap, String, Integer, Integer)
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTile(MonoGame.Extended.Tiled.TiledMap,MLEM.Extended.Tiled.LayerPosition)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetTile(MonoGame.Extended.Tiled.TiledMap,MLEM.Extended.Tiled.LayerPosition)
  id: GetTile(MonoGame.Extended.Tiled.TiledMap,MLEM.Extended.Tiled.LayerPosition)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetTile(TiledMap, LayerPosition)
  nameWithType: TiledExtensions.GetTile(TiledMap, LayerPosition)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTile(MonoGame.Extended.Tiled.TiledMap, MLEM.Extended.Tiled.LayerPosition)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetTile
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 184
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Returns the tiled map tile at the given location on the layer with the given name.
  example: []
  syntax:
    content: public static TiledMapTile GetTile(this TiledMap map, LayerPosition pos)
    parameters:
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
      description: The map
    - id: pos
      type: MLEM.Extended.Tiled.LayerPosition
      description: The layer position to get the tile at
    return:
      type: MonoGame.Extended.Tiled.TiledMapTile
      description: The tile at the given location, or default if the layer does not exist
    content.vb: Public Shared Function GetTile(map As TiledMap, pos As LayerPosition) As TiledMapTile
  overload: MLEM.Extended.Tiled.TiledExtensions.GetTile*
- uid: MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap,System.String,System.Int32,System.Int32,System.Int32)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap,System.String,System.Int32,System.Int32,System.Int32)
  id: SetTile(MonoGame.Extended.Tiled.TiledMap,System.String,System.Int32,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: SetTile(TiledMap, string, int, int, int)
  nameWithType: TiledExtensions.SetTile(TiledMap, string, int, int, int)
  fullName: MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap, string, int, int, int)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: SetTile
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 196
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Sets the tiled map tile at the given location to the given global tile identifier.
  example: []
  syntax:
    content: public static void SetTile(this TiledMap map, string layerName, int x, int y, int globalTile)
    parameters:
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
      description: The map
    - id: layerName
      type: System.String
      description: The name of the layer
    - id: x
      type: System.Int32
      description: The x coordinate
    - id: y
      type: System.Int32
      description: The y coordinate
    - id: globalTile
      type: System.Int32
      description: The tile's global identifier to set
    content.vb: Public Shared Sub SetTile(map As TiledMap, layerName As String, x As Integer, y As Integer, globalTile As Integer)
  overload: MLEM.Extended.Tiled.TiledExtensions.SetTile*
  nameWithType.vb: TiledExtensions.SetTile(TiledMap, String, Integer, Integer, Integer)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap, String, Integer, Integer, Integer)
  name.vb: SetTile(TiledMap, String, Integer, Integer, Integer)
- uid: MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap,System.String,System.Int32,System.Int32,MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTilesetTile)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap,System.String,System.Int32,System.Int32,MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTilesetTile)
  id: SetTile(MonoGame.Extended.Tiled.TiledMap,System.String,System.Int32,System.Int32,MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTilesetTile)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: SetTile(TiledMap, string, int, int, TiledMapTileset, TiledMapTilesetTile)
  nameWithType: TiledExtensions.SetTile(TiledMap, string, int, int, TiledMapTileset, TiledMapTilesetTile)
  fullName: MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap, string, int, int, MonoGame.Extended.Tiled.TiledMapTileset, MonoGame.Extended.Tiled.TiledMapTilesetTile)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: SetTile
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 212
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: >-
    Sets the tiled map tile at the given location to the given tile from the given tileset.

    If the passed <code class="paramref">tileset</code> or <code class="paramref">tile</code> is null, the tile at the location is removed instead.
  example: []
  syntax:
    content: public static void SetTile(this TiledMap map, string layerName, int x, int y, TiledMapTileset tileset, TiledMapTilesetTile tile)
    parameters:
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
      description: The map
    - id: layerName
      type: System.String
      description: The name of the layer
    - id: x
      type: System.Int32
      description: The x coordinate
    - id: y
      type: System.Int32
      description: The y coordinate
    - id: tileset
      type: MonoGame.Extended.Tiled.TiledMapTileset
      description: The tileset to use, or null to remove the tile
    - id: tile
      type: MonoGame.Extended.Tiled.TiledMapTilesetTile
      description: The tile to place, from the given tileset, or null to remove the tile
    content.vb: Public Shared Sub SetTile(map As TiledMap, layerName As String, x As Integer, y As Integer, tileset As TiledMapTileset, tile As TiledMapTilesetTile)
  overload: MLEM.Extended.Tiled.TiledExtensions.SetTile*
  nameWithType.vb: TiledExtensions.SetTile(TiledMap, String, Integer, Integer, TiledMapTileset, TiledMapTilesetTile)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap, String, Integer, Integer, MonoGame.Extended.Tiled.TiledMapTileset, MonoGame.Extended.Tiled.TiledMapTilesetTile)
  name.vb: SetTile(TiledMap, String, Integer, Integer, TiledMapTileset, TiledMapTilesetTile)
- uid: MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap,MLEM.Extended.Tiled.LayerPosition,System.Int32)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap,MLEM.Extended.Tiled.LayerPosition,System.Int32)
  id: SetTile(MonoGame.Extended.Tiled.TiledMap,MLEM.Extended.Tiled.LayerPosition,System.Int32)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: SetTile(TiledMap, LayerPosition, int)
  nameWithType: TiledExtensions.SetTile(TiledMap, LayerPosition, int)
  fullName: MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap, MLEM.Extended.Tiled.LayerPosition, int)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: SetTile
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 222
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Sets the tiled map tile at the given location to the given global tile identifier.
  example: []
  syntax:
    content: public static void SetTile(this TiledMap map, LayerPosition pos, int globalTile)
    parameters:
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
      description: The map
    - id: pos
      type: MLEM.Extended.Tiled.LayerPosition
      description: The layer position
    - id: globalTile
      type: System.Int32
      description: The tile's global identifier to set
    content.vb: Public Shared Sub SetTile(map As TiledMap, pos As LayerPosition, globalTile As Integer)
  overload: MLEM.Extended.Tiled.TiledExtensions.SetTile*
  nameWithType.vb: TiledExtensions.SetTile(TiledMap, LayerPosition, Integer)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap, MLEM.Extended.Tiled.LayerPosition, Integer)
  name.vb: SetTile(TiledMap, LayerPosition, Integer)
- uid: MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap,MLEM.Extended.Tiled.LayerPosition,MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTilesetTile)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap,MLEM.Extended.Tiled.LayerPosition,MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTilesetTile)
  id: SetTile(MonoGame.Extended.Tiled.TiledMap,MLEM.Extended.Tiled.LayerPosition,MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTilesetTile)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: SetTile(TiledMap, LayerPosition, TiledMapTileset, TiledMapTilesetTile)
  nameWithType: TiledExtensions.SetTile(TiledMap, LayerPosition, TiledMapTileset, TiledMapTilesetTile)
  fullName: MLEM.Extended.Tiled.TiledExtensions.SetTile(MonoGame.Extended.Tiled.TiledMap, MLEM.Extended.Tiled.LayerPosition, MonoGame.Extended.Tiled.TiledMapTileset, MonoGame.Extended.Tiled.TiledMapTilesetTile)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: SetTile
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 234
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: >-
    Sets the tiled map tile at the given location to the given tile from the given tileset.

    If the passed <code class="paramref">tileset</code> or <code class="paramref">tile</code> is null, the tile at the location is removed instead.
  example: []
  syntax:
    content: public static void SetTile(this TiledMap map, LayerPosition pos, TiledMapTileset tileset, TiledMapTilesetTile tile)
    parameters:
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
      description: The map
    - id: pos
      type: MLEM.Extended.Tiled.LayerPosition
      description: The layer position
    - id: tileset
      type: MonoGame.Extended.Tiled.TiledMapTileset
      description: The tileset to use, or null to remove the tile
    - id: tile
      type: MonoGame.Extended.Tiled.TiledMapTilesetTile
      description: The tile to place, from the given tileset, or null to remove the tile
    content.vb: Public Shared Sub SetTile(map As TiledMap, pos As LayerPosition, tileset As TiledMapTileset, tile As TiledMapTilesetTile)
  overload: MLEM.Extended.Tiled.TiledExtensions.SetTile*
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTiles(MonoGame.Extended.Tiled.TiledMap,System.Int32,System.Int32)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetTiles(MonoGame.Extended.Tiled.TiledMap,System.Int32,System.Int32)
  id: GetTiles(MonoGame.Extended.Tiled.TiledMap,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetTiles(TiledMap, int, int)
  nameWithType: TiledExtensions.GetTiles(TiledMap, int, int)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTiles(MonoGame.Extended.Tiled.TiledMap, int, int)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetTiles
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 245
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: For an x and y coordinate, returns an enumerable of all of the tiles on each of the map's <xref href="MonoGame.Extended.Tiled.TiledMap.TileLayers" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static IEnumerable<TiledMapTile> GetTiles(this TiledMap map, int x, int y)
    parameters:
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
      description: The map
    - id: x
      type: System.Int32
      description: The x coordinate
    - id: y
      type: System.Int32
      description: The y coordinate
    return:
      type: System.Collections.Generic.IEnumerable{MonoGame.Extended.Tiled.TiledMapTile}
      description: All of the tiles on the map at the given location
    content.vb: Public Shared Function GetTiles(map As TiledMap, x As Integer, y As Integer) As IEnumerable(Of TiledMapTile)
  overload: MLEM.Extended.Tiled.TiledExtensions.GetTiles*
  nameWithType.vb: TiledExtensions.GetTiles(TiledMap, Integer, Integer)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.GetTiles(MonoGame.Extended.Tiled.TiledMap, Integer, Integer)
  name.vb: GetTiles(TiledMap, Integer, Integer)
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTile(MonoGame.Extended.Tiled.TiledMapTileLayer,System.Int32,System.Int32)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetTile(MonoGame.Extended.Tiled.TiledMapTileLayer,System.Int32,System.Int32)
  id: GetTile(MonoGame.Extended.Tiled.TiledMapTileLayer,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetTile(TiledMapTileLayer, int, int)
  nameWithType: TiledExtensions.GetTile(TiledMapTileLayer, int, int)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTile(MonoGame.Extended.Tiled.TiledMapTileLayer, int, int)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetTile
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 260
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Returns the tiled map at the given location on the given layer
  example: []
  syntax:
    content: public static TiledMapTile GetTile(this TiledMapTileLayer layer, int x, int y)
    parameters:
    - id: layer
      type: MonoGame.Extended.Tiled.TiledMapTileLayer
      description: The layer to get the tile from
    - id: x
      type: System.Int32
      description: The tile's x coordinate
    - id: y
      type: System.Int32
      description: The tile's y coordinate
    return:
      type: MonoGame.Extended.Tiled.TiledMapTile
      description: The tiled map tile at the location, or default if the location is out of bounds
    content.vb: Public Shared Function GetTile(layer As TiledMapTileLayer, x As Integer, y As Integer) As TiledMapTile
  overload: MLEM.Extended.Tiled.TiledExtensions.GetTile*
  nameWithType.vb: TiledExtensions.GetTile(TiledMapTileLayer, Integer, Integer)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.GetTile(MonoGame.Extended.Tiled.TiledMapTileLayer, Integer, Integer)
  name.vb: GetTile(TiledMapTileLayer, Integer, Integer)
- uid: MLEM.Extended.Tiled.TiledExtensions.GetArea(MonoGame.Extended.Tiled.TiledMapObject,MonoGame.Extended.Tiled.TiledMap,System.Nullable{Microsoft.Xna.Framework.Vector2},MonoGame.Extended.Tiled.TiledMapTileFlipFlags)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetArea(MonoGame.Extended.Tiled.TiledMapObject,MonoGame.Extended.Tiled.TiledMap,System.Nullable{Microsoft.Xna.Framework.Vector2},MonoGame.Extended.Tiled.TiledMapTileFlipFlags)
  id: GetArea(MonoGame.Extended.Tiled.TiledMapObject,MonoGame.Extended.Tiled.TiledMap,System.Nullable{Microsoft.Xna.Framework.Vector2},MonoGame.Extended.Tiled.TiledMapTileFlipFlags)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetArea(TiledMapObject, TiledMap, Vector2?, TiledMapTileFlipFlags)
  nameWithType: TiledExtensions.GetArea(TiledMapObject, TiledMap, Vector2?, TiledMapTileFlipFlags)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetArea(MonoGame.Extended.Tiled.TiledMapObject, MonoGame.Extended.Tiled.TiledMap, Microsoft.Xna.Framework.Vector2?, MonoGame.Extended.Tiled.TiledMapTileFlipFlags)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetArea
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 273
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: >-
    Returns the area that a tiled map object covers.

    The area returned is in percent, meaning that an area that covers a full tile has a size of 1,1.
  example: []
  syntax:
    content: public static RectangleF GetArea(this TiledMapObject obj, TiledMap map, Vector2? position = null, TiledMapTileFlipFlags flipFlags = TiledMapTileFlipFlags.None)
    parameters:
    - id: obj
      type: MonoGame.Extended.Tiled.TiledMapObject
      description: The object whose area to get
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
      description: The map
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position to add to the object's position
    - id: flipFlags
      type: MonoGame.Extended.Tiled.TiledMapTileFlipFlags
      description: The flipping of the tile that this object belongs to. If set, the returned area will be "flipped" in the tile's space so that it matches the flip flags.
    return:
      type: MonoGame.Extended.RectangleF
      description: The area that the tile covers
    content.vb: Public Shared Function GetArea(obj As TiledMapObject, map As TiledMap, position As Vector2? = Nothing, flipFlags As TiledMapTileFlipFlags = TiledMapTileFlipFlags.None) As RectangleF
  overload: MLEM.Extended.Tiled.TiledExtensions.GetArea*
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTileSize(MonoGame.Extended.Tiled.TiledMap)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetTileSize(MonoGame.Extended.Tiled.TiledMap)
  id: GetTileSize(MonoGame.Extended.Tiled.TiledMap)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetTileSize(TiledMap)
  nameWithType: TiledExtensions.GetTileSize(TiledMap)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTileSize(MonoGame.Extended.Tiled.TiledMap)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetTileSize
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 290
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Returns the width and height of a tile on the given map, as a vector.
  example: []
  syntax:
    content: public static Vector2 GetTileSize(this TiledMap map)
    parameters:
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
      description: The map
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The width and height of a tile
    content.vb: Public Shared Function GetTileSize(map As TiledMap) As Vector2
  overload: MLEM.Extended.Tiled.TiledExtensions.GetTileSize*
- uid: MLEM.Extended.Tiled.TiledExtensions.IsInBounds(MonoGame.Extended.Tiled.TiledMapTileLayer,System.Int32,System.Int32)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.IsInBounds(MonoGame.Extended.Tiled.TiledMapTileLayer,System.Int32,System.Int32)
  id: IsInBounds(MonoGame.Extended.Tiled.TiledMapTileLayer,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: IsInBounds(TiledMapTileLayer, int, int)
  nameWithType: TiledExtensions.IsInBounds(TiledMapTileLayer, int, int)
  fullName: MLEM.Extended.Tiled.TiledExtensions.IsInBounds(MonoGame.Extended.Tiled.TiledMapTileLayer, int, int)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsInBounds
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 301
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Returns whether the given position is in the bounds of the layer (that is, if each coordinate is &gt;= 0 and if they are both smaller than the layer's width and height).
  example: []
  syntax:
    content: public static bool IsInBounds(this TiledMapTileLayer layer, int x, int y)
    parameters:
    - id: layer
      type: MonoGame.Extended.Tiled.TiledMapTileLayer
      description: The layer
    - id: x
      type: System.Int32
      description: The x coordinate
    - id: y
      type: System.Int32
      description: The y coordinate
    return:
      type: System.Boolean
      description: Whether the position is in bounds of the layer
    content.vb: Public Shared Function IsInBounds(layer As TiledMapTileLayer, x As Integer, y As Integer) As Boolean
  overload: MLEM.Extended.Tiled.TiledExtensions.IsInBounds*
  nameWithType.vb: TiledExtensions.IsInBounds(TiledMapTileLayer, Integer, Integer)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.IsInBounds(MonoGame.Extended.Tiled.TiledMapTileLayer, Integer, Integer)
  name.vb: IsInBounds(TiledMapTileLayer, Integer, Integer)
- uid: MLEM.Extended.Tiled.TiledExtensions.GetObjects(MonoGame.Extended.Tiled.TiledMapObjectLayer,System.String,System.Boolean,System.Boolean)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetObjects(MonoGame.Extended.Tiled.TiledMapObjectLayer,System.String,System.Boolean,System.Boolean)
  id: GetObjects(MonoGame.Extended.Tiled.TiledMapObjectLayer,System.String,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetObjects(TiledMapObjectLayer, string, bool, bool)
  nameWithType: TiledExtensions.GetObjects(TiledMapObjectLayer, string, bool, bool)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetObjects(MonoGame.Extended.Tiled.TiledMapObjectLayer, string, bool, bool)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetObjects
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 313
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Returns all of the objects by the given name, or by the given type, in an object layer.
  example: []
  syntax:
    content: public static IEnumerable<TiledMapObject> GetObjects(this TiledMapObjectLayer layer, string id, bool searchName = true, bool searchType = false)
    parameters:
    - id: layer
      type: MonoGame.Extended.Tiled.TiledMapObjectLayer
      description: The layer whose objects to search
    - id: id
      type: System.String
      description: The name or type name of the objects to find
    - id: searchName
      type: System.Boolean
      description: Whether to search object names
    - id: searchType
      type: System.Boolean
      description: Whether to search object types
    return:
      type: System.Collections.Generic.IEnumerable{MonoGame.Extended.Tiled.TiledMapObject}
      description: An enumerable of tiled map objects that match the search
    content.vb: Public Shared Function GetObjects(layer As TiledMapObjectLayer, id As String, searchName As Boolean = True, searchType As Boolean = False) As IEnumerable(Of TiledMapObject)
  overload: MLEM.Extended.Tiled.TiledExtensions.GetObjects*
  nameWithType.vb: TiledExtensions.GetObjects(TiledMapObjectLayer, String, Boolean, Boolean)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.GetObjects(MonoGame.Extended.Tiled.TiledMapObjectLayer, String, Boolean, Boolean)
  name.vb: GetObjects(TiledMapObjectLayer, String, Boolean, Boolean)
- uid: MLEM.Extended.Tiled.TiledExtensions.GetObjects(MonoGame.Extended.Tiled.TiledMap,System.String,System.Boolean,System.Boolean)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetObjects(MonoGame.Extended.Tiled.TiledMap,System.String,System.Boolean,System.Boolean)
  id: GetObjects(MonoGame.Extended.Tiled.TiledMap,System.String,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetObjects(TiledMap, string, bool, bool)
  nameWithType: TiledExtensions.GetObjects(TiledMap, string, bool, bool)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetObjects(MonoGame.Extended.Tiled.TiledMap, string, bool, bool)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetObjects
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 328
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Returns all of the objects by the given name, or by the given type, on the given map.
  example: []
  syntax:
    content: public static IEnumerable<TiledMapObject> GetObjects(this TiledMap map, string id, bool searchName = true, bool searchType = false)
    parameters:
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
      description: The layer whose objects to search
    - id: id
      type: System.String
      description: The name or type name of the objects to find
    - id: searchName
      type: System.Boolean
      description: Whether to search object names
    - id: searchType
      type: System.Boolean
      description: Whether to search object types
    return:
      type: System.Collections.Generic.IEnumerable{MonoGame.Extended.Tiled.TiledMapObject}
      description: An enumerable of tiled map objects that match the search
    content.vb: Public Shared Function GetObjects(map As TiledMap, id As String, searchName As Boolean = True, searchType As Boolean = False) As IEnumerable(Of TiledMapObject)
  overload: MLEM.Extended.Tiled.TiledExtensions.GetObjects*
  nameWithType.vb: TiledExtensions.GetObjects(TiledMap, String, Boolean, Boolean)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.GetObjects(MonoGame.Extended.Tiled.TiledMap, String, Boolean, Boolean)
  name.vb: GetObjects(TiledMap, String, Boolean, Boolean)
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTextureRegion(MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTilesetTile)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetTextureRegion(MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTilesetTile)
  id: GetTextureRegion(MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTilesetTile)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetTextureRegion(TiledMapTileset, TiledMapTilesetTile)
  nameWithType: TiledExtensions.GetTextureRegion(TiledMapTileset, TiledMapTilesetTile)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTextureRegion(MonoGame.Extended.Tiled.TiledMapTileset, MonoGame.Extended.Tiled.TiledMapTilesetTile)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetTextureRegion
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 341
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Returns the texture region, as a rectangle, that the given tile uses for rendering.
  example: []
  syntax:
    content: public static Rectangle GetTextureRegion(this TiledMapTileset tileset, TiledMapTilesetTile tile)
    parameters:
    - id: tileset
      type: MonoGame.Extended.Tiled.TiledMapTileset
      description: The tileset the tile is on
    - id: tile
      type: MonoGame.Extended.Tiled.TiledMapTilesetTile
      description: The tile
    return:
      type: Microsoft.Xna.Framework.Rectangle
      description: The tile's texture region, in pixels.
    content.vb: Public Shared Function GetTextureRegion(tileset As TiledMapTileset, tile As TiledMapTilesetTile) As Rectangle
  overload: MLEM.Extended.Tiled.TiledExtensions.GetTextureRegion*
- uid: MLEM.Extended.Tiled.TiledExtensions.GetSpriteEffects(MonoGame.Extended.Tiled.TiledMapTile)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetSpriteEffects(MonoGame.Extended.Tiled.TiledMapTile)
  id: GetSpriteEffects(MonoGame.Extended.Tiled.TiledMapTile)
  isExtensionMethod: true
  parent: MLEM.Extended.Tiled.TiledExtensions
  langs:
  - csharp
  - vb
  name: GetSpriteEffects(TiledMapTile)
  nameWithType: TiledExtensions.GetSpriteEffects(TiledMapTile)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetSpriteEffects(MonoGame.Extended.Tiled.TiledMapTile)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetSpriteEffects
    path: ../MLEM.Extended/Tiled/TiledExtensions.cs
    startLine: 353
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  summary: Converts a tile's flip settings into <xref href="Microsoft.Xna.Framework.Graphics.SpriteEffects" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static SpriteEffects GetSpriteEffects(this TiledMapTile tile)
    parameters:
    - id: tile
      type: MonoGame.Extended.Tiled.TiledMapTile
      description: The tile whose flip settings to convert
    return:
      type: Microsoft.Xna.Framework.Graphics.SpriteEffects
      description: The tile's flip settings as sprite effects
    content.vb: Public Shared Function GetSpriteEffects(tile As TiledMapTile) As SpriteEffects
  overload: MLEM.Extended.Tiled.TiledExtensions.GetSpriteEffects*
references:
- uid: MLEM.Extended.Tiled
  commentId: N:MLEM.Extended.Tiled
  href: MLEM.html
  name: MLEM.Extended.Tiled
  nameWithType: MLEM.Extended.Tiled
  fullName: MLEM.Extended.Tiled
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Extended
    name: Extended
    href: MLEM.Extended.html
  - name: .
  - uid: MLEM.Extended.Tiled
    name: Tiled
    href: MLEM.Extended.Tiled.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Extended
    name: Extended
    href: MLEM.Extended.html
  - name: .
  - uid: MLEM.Extended.Tiled
    name: Tiled
    href: MLEM.Extended.Tiled.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Extended.Tiled.TiledExtensions.Get*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.Get
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_Get_MonoGame_Extended_Tiled_TiledMapProperties_System_String_
  name: Get
  nameWithType: TiledExtensions.Get
  fullName: MLEM.Extended.Tiled.TiledExtensions.Get
- uid: MonoGame.Extended.Tiled.TiledMapProperties
  commentId: T:MonoGame.Extended.Tiled.TiledMapProperties
  parent: MonoGame.Extended.Tiled
  isExternal: true
  name: TiledMapProperties
  nameWithType: TiledMapProperties
  fullName: MonoGame.Extended.Tiled.TiledMapProperties
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: MonoGame.Extended.Tiled
  commentId: N:MonoGame.Extended.Tiled
  isExternal: true
  name: MonoGame.Extended.Tiled
  nameWithType: MonoGame.Extended.Tiled
  fullName: MonoGame.Extended.Tiled
  spec.csharp:
  - uid: MonoGame
    name: MonoGame
    isExternal: true
  - name: .
  - uid: MonoGame.Extended
    name: Extended
    isExternal: true
  - name: .
  - uid: MonoGame.Extended.Tiled
    name: Tiled
    isExternal: true
  spec.vb:
  - uid: MonoGame
    name: MonoGame
    isExternal: true
  - name: .
  - uid: MonoGame.Extended
    name: Extended
    isExternal: true
  - name: .
  - uid: MonoGame.Extended.Tiled
    name: Tiled
    isExternal: true
- uid: MLEM.Extended.Tiled.TiledExtensions.GetBool*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.GetBool
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetBool_MonoGame_Extended_Tiled_TiledMapProperties_System_String_
  name: GetBool
  nameWithType: TiledExtensions.GetBool
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetBool
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: MLEM.Extended.Tiled.TiledExtensions.GetColor*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.GetColor
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetColor_MonoGame_Extended_Tiled_TiledMapProperties_System_String_
  name: GetColor
  nameWithType: TiledExtensions.GetColor
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetColor
- uid: Microsoft.Xna.Framework.Color
  commentId: T:Microsoft.Xna.Framework.Color
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: Microsoft.Xna.Framework.Color
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: MLEM.Extended.Tiled.TiledExtensions.GetFloat*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.GetFloat
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetFloat_MonoGame_Extended_Tiled_TiledMapProperties_System_String_
  name: GetFloat
  nameWithType: TiledExtensions.GetFloat
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetFloat
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: MLEM.Extended.Tiled.TiledExtensions.GetInt*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.GetInt
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetInt_MonoGame_Extended_Tiled_TiledMapProperties_System_String_
  name: GetInt
  nameWithType: TiledExtensions.GetInt
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetInt
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTileset*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.GetTileset
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetTileset_MonoGame_Extended_Tiled_TiledMapTile_MonoGame_Extended_Tiled_TiledMap_
  name: GetTileset
  nameWithType: TiledExtensions.GetTileset
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTileset
- uid: MonoGame.Extended.Tiled.TiledMapTile
  commentId: T:MonoGame.Extended.Tiled.TiledMapTile
  parent: MonoGame.Extended.Tiled
  isExternal: true
  name: TiledMapTile
  nameWithType: TiledMapTile
  fullName: MonoGame.Extended.Tiled.TiledMapTile
- uid: MonoGame.Extended.Tiled.TiledMap
  commentId: T:MonoGame.Extended.Tiled.TiledMap
  parent: MonoGame.Extended.Tiled
  isExternal: true
  name: TiledMap
  nameWithType: TiledMap
  fullName: MonoGame.Extended.Tiled.TiledMap
- uid: MonoGame.Extended.Tiled.TiledMapTileset
  commentId: T:MonoGame.Extended.Tiled.TiledMapTileset
  parent: MonoGame.Extended.Tiled
  isExternal: true
  name: TiledMapTileset
  nameWithType: TiledMapTileset
  fullName: MonoGame.Extended.Tiled.TiledMapTileset
- uid: MLEM.Extended.Tiled.TiledExtensions.GetLocalIdentifier*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.GetLocalIdentifier
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetLocalIdentifier_MonoGame_Extended_Tiled_TiledMapTile_MonoGame_Extended_Tiled_TiledMapTileset_MonoGame_Extended_Tiled_TiledMap_
  name: GetLocalIdentifier
  nameWithType: TiledExtensions.GetLocalIdentifier
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetLocalIdentifier
- uid: MLEM.Extended.Tiled.TiledExtensions.GetGlobalIdentifier*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.GetGlobalIdentifier
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetGlobalIdentifier_MonoGame_Extended_Tiled_TiledMapTilesetTile_MonoGame_Extended_Tiled_TiledMapTileset_MonoGame_Extended_Tiled_TiledMap_
  name: GetGlobalIdentifier
  nameWithType: TiledExtensions.GetGlobalIdentifier
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetGlobalIdentifier
- uid: MonoGame.Extended.Tiled.TiledMapTilesetTile
  commentId: T:MonoGame.Extended.Tiled.TiledMapTilesetTile
  parent: MonoGame.Extended.Tiled
  isExternal: true
  name: TiledMapTilesetTile
  nameWithType: TiledMapTilesetTile
  fullName: MonoGame.Extended.Tiled.TiledMapTilesetTile
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetTilesetTile_MonoGame_Extended_Tiled_TiledMapTileset_MonoGame_Extended_Tiled_TiledMapTile_MonoGame_Extended_Tiled_TiledMap_System_Boolean_
  name: GetTilesetTile
  nameWithType: TiledExtensions.GetTilesetTile
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMap,System.Boolean)
  commentId: M:MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMap,System.Boolean)
  isExternal: true
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetTilesetTile_MonoGame_Extended_Tiled_TiledMapTileset_MonoGame_Extended_Tiled_TiledMapTile_MonoGame_Extended_Tiled_TiledMap_System_Boolean_
  name: GetTilesetTile(TiledMapTileset, TiledMapTile, TiledMap, bool)
  nameWithType: TiledExtensions.GetTilesetTile(TiledMapTileset, TiledMapTile, TiledMap, bool)
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset, MonoGame.Extended.Tiled.TiledMapTile, MonoGame.Extended.Tiled.TiledMap, bool)
  nameWithType.vb: TiledExtensions.GetTilesetTile(TiledMapTileset, TiledMapTile, TiledMap, Boolean)
  fullName.vb: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset, MonoGame.Extended.Tiled.TiledMapTile, MonoGame.Extended.Tiled.TiledMap, Boolean)
  name.vb: GetTilesetTile(TiledMapTileset, TiledMapTile, TiledMap, Boolean)
  spec.csharp:
  - uid: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMap,System.Boolean)
    name: GetTilesetTile
    href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetTilesetTile_MonoGame_Extended_Tiled_TiledMapTileset_MonoGame_Extended_Tiled_TiledMapTile_MonoGame_Extended_Tiled_TiledMap_System_Boolean_
  - name: (
  - uid: MonoGame.Extended.Tiled.TiledMapTileset
    name: TiledMapTileset
    isExternal: true
  - name: ','
  - name: " "
  - uid: MonoGame.Extended.Tiled.TiledMapTile
    name: TiledMapTile
    isExternal: true
  - name: ','
  - name: " "
  - uid: MonoGame.Extended.Tiled.TiledMap
    name: TiledMap
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: MLEM.Extended.Tiled.TiledExtensions.GetTilesetTile(MonoGame.Extended.Tiled.TiledMapTileset,MonoGame.Extended.Tiled.TiledMapTile,MonoGame.Extended.Tiled.TiledMap,System.Boolean)
    name: GetTilesetTile
    href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetTilesetTile_MonoGame_Extended_Tiled_TiledMapTileset_MonoGame_Extended_Tiled_TiledMapTile_MonoGame_Extended_Tiled_TiledMap_System_Boolean_
  - name: (
  - uid: MonoGame.Extended.Tiled.TiledMapTileset
    name: TiledMapTileset
    isExternal: true
  - name: ','
  - name: " "
  - uid: MonoGame.Extended.Tiled.TiledMapTile
    name: TiledMapTile
    isExternal: true
  - name: ','
  - name: " "
  - uid: MonoGame.Extended.Tiled.TiledMap
    name: TiledMap
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: MonoGame.Extended.Tiled.TiledMap.Layers
  commentId: P:MonoGame.Extended.Tiled.TiledMap.Layers
  isExternal: true
  name: Layers
  nameWithType: TiledMap.Layers
  fullName: MonoGame.Extended.Tiled.TiledMap.Layers
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTileLayerIndex*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.GetTileLayerIndex
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetTileLayerIndex_MonoGame_Extended_Tiled_TiledMap_System_String_
  name: GetTileLayerIndex
  nameWithType: TiledExtensions.GetTileLayerIndex
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTileLayerIndex
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTile*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.GetTile
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetTile_MonoGame_Extended_Tiled_TiledMap_System_String_System_Int32_System_Int32_
  name: GetTile
  nameWithType: TiledExtensions.GetTile
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTile
- uid: MLEM.Extended.Tiled.LayerPosition
  commentId: T:MLEM.Extended.Tiled.LayerPosition
  parent: MLEM.Extended.Tiled
  href: MLEM.Extended.Tiled.LayerPosition.html
  name: LayerPosition
  nameWithType: LayerPosition
  fullName: MLEM.Extended.Tiled.LayerPosition
- uid: MLEM.Extended.Tiled.TiledExtensions.SetTile*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.SetTile
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_SetTile_MonoGame_Extended_Tiled_TiledMap_System_String_System_Int32_System_Int32_System_Int32_
  name: SetTile
  nameWithType: TiledExtensions.SetTile
  fullName: MLEM.Extended.Tiled.TiledExtensions.SetTile
- uid: MonoGame.Extended.Tiled.TiledMap.TileLayers
  commentId: P:MonoGame.Extended.Tiled.TiledMap.TileLayers
  isExternal: true
  name: TileLayers
  nameWithType: TiledMap.TileLayers
  fullName: MonoGame.Extended.Tiled.TiledMap.TileLayers
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTiles*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.GetTiles
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetTiles_MonoGame_Extended_Tiled_TiledMap_System_Int32_System_Int32_
  name: GetTiles
  nameWithType: TiledExtensions.GetTiles
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTiles
- uid: System.Collections.Generic.IEnumerable{MonoGame.Extended.Tiled.TiledMapTile}
  commentId: T:System.Collections.Generic.IEnumerable{MonoGame.Extended.Tiled.TiledMapTile}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TiledMapTile>
  nameWithType: IEnumerable<TiledMapTile>
  fullName: System.Collections.Generic.IEnumerable<MonoGame.Extended.Tiled.TiledMapTile>
  nameWithType.vb: IEnumerable(Of TiledMapTile)
  fullName.vb: System.Collections.Generic.IEnumerable(Of MonoGame.Extended.Tiled.TiledMapTile)
  name.vb: IEnumerable(Of TiledMapTile)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: MonoGame.Extended.Tiled.TiledMapTile
    name: TiledMapTile
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: MonoGame.Extended.Tiled.TiledMapTile
    name: TiledMapTile
    isExternal: true
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: MonoGame.Extended.Tiled.TiledMapTileLayer
  commentId: T:MonoGame.Extended.Tiled.TiledMapTileLayer
  parent: MonoGame.Extended.Tiled
  isExternal: true
  name: TiledMapTileLayer
  nameWithType: TiledMapTileLayer
  fullName: MonoGame.Extended.Tiled.TiledMapTileLayer
- uid: MLEM.Extended.Tiled.TiledExtensions.GetArea*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.GetArea
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetArea_MonoGame_Extended_Tiled_TiledMapObject_MonoGame_Extended_Tiled_TiledMap_System_Nullable_Microsoft_Xna_Framework_Vector2__MonoGame_Extended_Tiled_TiledMapTileFlipFlags_
  name: GetArea
  nameWithType: TiledExtensions.GetArea
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetArea
- uid: MonoGame.Extended.Tiled.TiledMapObject
  commentId: T:MonoGame.Extended.Tiled.TiledMapObject
  parent: MonoGame.Extended.Tiled
  isExternal: true
  name: TiledMapObject
  nameWithType: TiledMapObject
  fullName: MonoGame.Extended.Tiled.TiledMapObject
- uid: System.Nullable{Microsoft.Xna.Framework.Vector2}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Vector2}
  parent: System
  definition: System.Nullable`1
  name: Vector2?
  nameWithType: Vector2?
  fullName: Microsoft.Xna.Framework.Vector2?
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
- uid: MonoGame.Extended.Tiled.TiledMapTileFlipFlags
  commentId: T:MonoGame.Extended.Tiled.TiledMapTileFlipFlags
  parent: MonoGame.Extended.Tiled
  isExternal: true
  name: TiledMapTileFlipFlags
  nameWithType: TiledMapTileFlipFlags
  fullName: MonoGame.Extended.Tiled.TiledMapTileFlipFlags
- uid: MonoGame.Extended.RectangleF
  commentId: T:MonoGame.Extended.RectangleF
  parent: MonoGame.Extended
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MonoGame.Extended.RectangleF
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MonoGame.Extended
  commentId: N:MonoGame.Extended
  isExternal: true
  name: MonoGame.Extended
  nameWithType: MonoGame.Extended
  fullName: MonoGame.Extended
  spec.csharp:
  - uid: MonoGame
    name: MonoGame
    isExternal: true
  - name: .
  - uid: MonoGame.Extended
    name: Extended
    isExternal: true
  spec.vb:
  - uid: MonoGame
    name: MonoGame
    isExternal: true
  - name: .
  - uid: MonoGame.Extended
    name: Extended
    isExternal: true
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTileSize*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.GetTileSize
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetTileSize_MonoGame_Extended_Tiled_TiledMap_
  name: GetTileSize
  nameWithType: TiledExtensions.GetTileSize
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTileSize
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: MLEM.Extended.Tiled.TiledExtensions.IsInBounds*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.IsInBounds
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_IsInBounds_MonoGame_Extended_Tiled_TiledMapTileLayer_System_Int32_System_Int32_
  name: IsInBounds
  nameWithType: TiledExtensions.IsInBounds
  fullName: MLEM.Extended.Tiled.TiledExtensions.IsInBounds
- uid: MLEM.Extended.Tiled.TiledExtensions.GetObjects*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.GetObjects
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetObjects_MonoGame_Extended_Tiled_TiledMapObjectLayer_System_String_System_Boolean_System_Boolean_
  name: GetObjects
  nameWithType: TiledExtensions.GetObjects
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetObjects
- uid: MonoGame.Extended.Tiled.TiledMapObjectLayer
  commentId: T:MonoGame.Extended.Tiled.TiledMapObjectLayer
  parent: MonoGame.Extended.Tiled
  isExternal: true
  name: TiledMapObjectLayer
  nameWithType: TiledMapObjectLayer
  fullName: MonoGame.Extended.Tiled.TiledMapObjectLayer
- uid: System.Collections.Generic.IEnumerable{MonoGame.Extended.Tiled.TiledMapObject}
  commentId: T:System.Collections.Generic.IEnumerable{MonoGame.Extended.Tiled.TiledMapObject}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TiledMapObject>
  nameWithType: IEnumerable<TiledMapObject>
  fullName: System.Collections.Generic.IEnumerable<MonoGame.Extended.Tiled.TiledMapObject>
  nameWithType.vb: IEnumerable(Of TiledMapObject)
  fullName.vb: System.Collections.Generic.IEnumerable(Of MonoGame.Extended.Tiled.TiledMapObject)
  name.vb: IEnumerable(Of TiledMapObject)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: MonoGame.Extended.Tiled.TiledMapObject
    name: TiledMapObject
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: MonoGame.Extended.Tiled.TiledMapObject
    name: TiledMapObject
    isExternal: true
  - name: )
- uid: MLEM.Extended.Tiled.TiledExtensions.GetTextureRegion*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.GetTextureRegion
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetTextureRegion_MonoGame_Extended_Tiled_TiledMapTileset_MonoGame_Extended_Tiled_TiledMapTilesetTile_
  name: GetTextureRegion
  nameWithType: TiledExtensions.GetTextureRegion
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetTextureRegion
- uid: Microsoft.Xna.Framework.Rectangle
  commentId: T:Microsoft.Xna.Framework.Rectangle
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Rectangle
  nameWithType: Rectangle
  fullName: Microsoft.Xna.Framework.Rectangle
- uid: Microsoft.Xna.Framework.Graphics.SpriteEffects
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteEffects
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteEffects
  nameWithType: SpriteEffects
  fullName: Microsoft.Xna.Framework.Graphics.SpriteEffects
- uid: MLEM.Extended.Tiled.TiledExtensions.GetSpriteEffects*
  commentId: Overload:MLEM.Extended.Tiled.TiledExtensions.GetSpriteEffects
  href: MLEM.Extended.Tiled.TiledExtensions.html#MLEM_Extended_Tiled_TiledExtensions_GetSpriteEffects_MonoGame_Extended_Tiled_TiledMapTile_
  name: GetSpriteEffects
  nameWithType: TiledExtensions.GetSpriteEffects
  fullName: MLEM.Extended.Tiled.TiledExtensions.GetSpriteEffects
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
