### YamlMime:ManagedReference
items:
- uid: MLEM.Extended.Extensions.NumberExtensions
  commentId: T:MLEM.Extended.Extensions.NumberExtensions
  id: NumberExtensions
  parent: MLEM.Extended.Extensions
  children:
  - MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range{System.Int32},System.Single)
  - MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range{System.Single},System.Single)
  - MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range{System.Int32},System.Single)
  - MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range{System.Single},System.Single)
  - MLEM.Extended.Extensions.NumberExtensions.Penetrate(MonoGame.Extended.RectangleF,MonoGame.Extended.RectangleF,Microsoft.Xna.Framework.Vector2@,System.Single@)
  - MLEM.Extended.Extensions.NumberExtensions.ToExtended(MLEM.Misc.RectangleF)
  - MLEM.Extended.Extensions.NumberExtensions.ToMlem(MonoGame.Extended.RectangleF)
  langs:
  - csharp
  - vb
  name: NumberExtensions
  nameWithType: NumberExtensions
  fullName: MLEM.Extended.Extensions.NumberExtensions
  type: Class
  source:
    remote:
      path: MLEM.Extended/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: NumberExtensions
    path: ../MLEM.Extended/Extensions/NumberExtensions.cs
    startLine: 8
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Extensions
  summary: A set of extension methods that convert MLEM types to MonoGame.Extended types and vice versa.
  example: []
  syntax:
    content: public static class NumberExtensions
    content.vb: Public Module NumberExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: MLEM.Extended.Extensions.NumberExtensions.ToExtended(MLEM.Misc.RectangleF)
  commentId: M:MLEM.Extended.Extensions.NumberExtensions.ToExtended(MLEM.Misc.RectangleF)
  id: ToExtended(MLEM.Misc.RectangleF)
  isExtensionMethod: true
  parent: MLEM.Extended.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: ToExtended(RectangleF)
  nameWithType: NumberExtensions.ToExtended(RectangleF)
  fullName: MLEM.Extended.Extensions.NumberExtensions.ToExtended(MLEM.Misc.RectangleF)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ToExtended
    path: ../MLEM.Extended/Extensions/NumberExtensions.cs
    startLine: 15
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Extensions
  summary: Converts a MLEM <xref href="MLEM.Misc.RectangleF" data-throw-if-not-resolved="false"></xref> to a MonoGame.Extended <xref href="MonoGame.Extended.RectangleF" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static RectangleF ToExtended(this RectangleF rect)
    parameters:
    - id: rect
      type: MLEM.Misc.RectangleF
      description: The rectangle to convert
    return:
      type: MonoGame.Extended.RectangleF
      description: The converted rectangle
    content.vb: Public Shared Function ToExtended(rect As RectangleF) As RectangleF
  overload: MLEM.Extended.Extensions.NumberExtensions.ToExtended*
- uid: MLEM.Extended.Extensions.NumberExtensions.ToMlem(MonoGame.Extended.RectangleF)
  commentId: M:MLEM.Extended.Extensions.NumberExtensions.ToMlem(MonoGame.Extended.RectangleF)
  id: ToMlem(MonoGame.Extended.RectangleF)
  isExtensionMethod: true
  parent: MLEM.Extended.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: ToMlem(RectangleF)
  nameWithType: NumberExtensions.ToMlem(RectangleF)
  fullName: MLEM.Extended.Extensions.NumberExtensions.ToMlem(MonoGame.Extended.RectangleF)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ToMlem
    path: ../MLEM.Extended/Extensions/NumberExtensions.cs
    startLine: 24
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Extensions
  summary: Converts a MonoGame.Extended <xref href="MonoGame.Extended.RectangleF" data-throw-if-not-resolved="false"></xref> to a MLEM <xref href="MLEM.Misc.RectangleF" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static RectangleF ToMlem(this RectangleF rect)
    parameters:
    - id: rect
      type: MonoGame.Extended.RectangleF
      description: The rectangle to convert
    return:
      type: MLEM.Misc.RectangleF
      description: The converted rectangle
    content.vb: Public Shared Function ToMlem(rect As RectangleF) As RectangleF
  overload: MLEM.Extended.Extensions.NumberExtensions.ToMlem*
- uid: MLEM.Extended.Extensions.NumberExtensions.Penetrate(MonoGame.Extended.RectangleF,MonoGame.Extended.RectangleF,Microsoft.Xna.Framework.Vector2@,System.Single@)
  commentId: M:MLEM.Extended.Extensions.NumberExtensions.Penetrate(MonoGame.Extended.RectangleF,MonoGame.Extended.RectangleF,Microsoft.Xna.Framework.Vector2@,System.Single@)
  id: Penetrate(MonoGame.Extended.RectangleF,MonoGame.Extended.RectangleF,Microsoft.Xna.Framework.Vector2@,System.Single@)
  isExtensionMethod: true
  parent: MLEM.Extended.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: Penetrate(RectangleF, RectangleF, out Vector2, out float)
  nameWithType: NumberExtensions.Penetrate(RectangleF, RectangleF, out Vector2, out float)
  fullName: MLEM.Extended.Extensions.NumberExtensions.Penetrate(MonoGame.Extended.RectangleF, MonoGame.Extended.RectangleF, out Microsoft.Xna.Framework.Vector2, out float)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Penetrate
    path: ../MLEM.Extended/Extensions/NumberExtensions.cs
    startLine: 38
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Extensions
  summary: >-
    Calculates the amount that the rectangle <code class="paramref">rect</code> is penetrating the rectangle <code class="paramref">other</code> by.

    If a penetration on both axes is occuring, the one with the lower value is returned.

    This is useful for collision detection, as it can be used to push colliding objects out of each other.
  example: []
  syntax:
    content: public static bool Penetrate(this RectangleF rect, RectangleF other, out Vector2 normal, out float penetration)
    parameters:
    - id: rect
      type: MonoGame.Extended.RectangleF
      description: The rectangle to do the penetration
    - id: other
      type: MonoGame.Extended.RectangleF
      description: The rectangle that should be penetrated
    - id: normal
      type: Microsoft.Xna.Framework.Vector2
      description: The direction that the penetration occured in
    - id: penetration
      type: System.Single
      description: The amount that the penetration occured by, in the direction of <code class="paramref">normal</code>
    return:
      type: System.Boolean
      description: Whether or not a penetration occured
    content.vb: Public Shared Function Penetrate(rect As RectangleF, other As RectangleF, normal As Vector2, penetration As Single) As Boolean
  overload: MLEM.Extended.Extensions.NumberExtensions.Penetrate*
  nameWithType.vb: NumberExtensions.Penetrate(RectangleF, RectangleF, Vector2, Single)
  fullName.vb: MLEM.Extended.Extensions.NumberExtensions.Penetrate(MonoGame.Extended.RectangleF, MonoGame.Extended.RectangleF, Microsoft.Xna.Framework.Vector2, Single)
  name.vb: Penetrate(RectangleF, RectangleF, Vector2, Single)
- uid: MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range{System.Single},System.Single)
  commentId: M:MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range{System.Single},System.Single)
  id: GetPercentage(MonoGame.Extended.Range{System.Single},System.Single)
  isExtensionMethod: true
  parent: MLEM.Extended.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: GetPercentage(Range<float>, float)
  nameWithType: NumberExtensions.GetPercentage(Range<float>, float)
  fullName: MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range<float>, float)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetPercentage
    path: ../MLEM.Extended/Extensions/NumberExtensions.cs
    startLine: 50
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Extensions
  summary: >-
    Returns how far between the given <code class="paramref">range</code>'s <xref href="MonoGame.Extended.Range%601.Min" data-throw-if-not-resolved="false"></xref> and <xref href="MonoGame.Extended.Range%601.Max" data-throw-if-not-resolved="false"></xref> value the given <code class="paramref">value</code> is, as a number between 0 and 1.

    Note that, if the <code class="paramref">value</code> is outside the given <code class="paramref">range</code>, a correct proportional value outside the 0 to 1 range will still be returned.

    This method is the reverse action of <xref href="MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range%7bSystem.Single%7d%2cSystem.Single)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static float GetPercentage(this Range<float> range, float value)
    parameters:
    - id: range
      type: MonoGame.Extended.Range{System.Single}
      description: The range to query.
    - id: value
      type: System.Single
      description: The value to query.
    return:
      type: System.Single
      description: The percentage.
    content.vb: Public Shared Function GetPercentage(range As Range(Of Single), value As Single) As Single
  overload: MLEM.Extended.Extensions.NumberExtensions.GetPercentage*
  nameWithType.vb: NumberExtensions.GetPercentage(Range(Of Single), Single)
  fullName.vb: MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range(Of Single), Single)
  name.vb: GetPercentage(Range(Of Single), Single)
- uid: MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range{System.Int32},System.Single)
  commentId: M:MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range{System.Int32},System.Single)
  id: GetPercentage(MonoGame.Extended.Range{System.Int32},System.Single)
  isExtensionMethod: true
  parent: MLEM.Extended.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: GetPercentage(Range<int>, float)
  nameWithType: NumberExtensions.GetPercentage(Range<int>, float)
  fullName: MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range<int>, float)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetPercentage
    path: ../MLEM.Extended/Extensions/NumberExtensions.cs
    startLine: 62
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Extensions
  summary: >-
    Returns how far between the given <code class="paramref">range</code>'s <xref href="MonoGame.Extended.Range%601.Min" data-throw-if-not-resolved="false"></xref> and <xref href="MonoGame.Extended.Range%601.Max" data-throw-if-not-resolved="false"></xref> value the given <code class="paramref">value</code> is, as a number between 0 and 1.

    Note that, if the <code class="paramref">value</code> is outside the given <code class="paramref">range</code>, a correct proportional value outside the 0 to 1 range will still be returned.

    This method is the reverse action of <xref href="MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range%7bSystem.Int32%7d%2cSystem.Single)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static float GetPercentage(this Range<int> range, float value)
    parameters:
    - id: range
      type: MonoGame.Extended.Range{System.Int32}
      description: The range to query.
    - id: value
      type: System.Single
      description: The value to query.
    return:
      type: System.Single
      description: The percentage.
    content.vb: Public Shared Function GetPercentage(range As Range(Of Integer), value As Single) As Single
  overload: MLEM.Extended.Extensions.NumberExtensions.GetPercentage*
  nameWithType.vb: NumberExtensions.GetPercentage(Range(Of Integer), Single)
  fullName.vb: MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range(Of Integer), Single)
  name.vb: GetPercentage(Range(Of Integer), Single)
- uid: MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range{System.Single},System.Single)
  commentId: M:MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range{System.Single},System.Single)
  id: FromPercentage(MonoGame.Extended.Range{System.Single},System.Single)
  isExtensionMethod: true
  parent: MLEM.Extended.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: FromPercentage(Range<float>, float)
  nameWithType: NumberExtensions.FromPercentage(Range<float>, float)
  fullName: MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range<float>, float)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: FromPercentage
    path: ../MLEM.Extended/Extensions/NumberExtensions.cs
    startLine: 74
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Extensions
  summary: >-
    Returns a value within the given <code class="paramref">range</code>'s <xref href="MonoGame.Extended.Range%601.Min" data-throw-if-not-resolved="false"></xref> and <xref href="MonoGame.Extended.Range%601.Max" data-throw-if-not-resolved="false"></xref> values based on the given <code class="paramref">percentage</code> into the range.

    Note that, if the <code class="paramref">percentage</code> is outside the 0 to 1 range, a correct value outside the <code class="paramref">range</code> will still be returned.

    This method is the reverse action of <xref href="MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range%7bSystem.Single%7d%2cSystem.Single)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static float FromPercentage(this Range<float> range, float percentage)
    parameters:
    - id: range
      type: MonoGame.Extended.Range{System.Single}
      description: The range to query.
    - id: percentage
      type: System.Single
      description: The percentage to query.
    return:
      type: System.Single
      description: The value.
    content.vb: Public Shared Function FromPercentage(range As Range(Of Single), percentage As Single) As Single
  overload: MLEM.Extended.Extensions.NumberExtensions.FromPercentage*
  nameWithType.vb: NumberExtensions.FromPercentage(Range(Of Single), Single)
  fullName.vb: MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range(Of Single), Single)
  name.vb: FromPercentage(Range(Of Single), Single)
- uid: MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range{System.Int32},System.Single)
  commentId: M:MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range{System.Int32},System.Single)
  id: FromPercentage(MonoGame.Extended.Range{System.Int32},System.Single)
  isExtensionMethod: true
  parent: MLEM.Extended.Extensions.NumberExtensions
  langs:
  - csharp
  - vb
  name: FromPercentage(Range<int>, float)
  nameWithType: NumberExtensions.FromPercentage(Range<int>, float)
  fullName: MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range<int>, float)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Extensions/NumberExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: FromPercentage
    path: ../MLEM.Extended/Extensions/NumberExtensions.cs
    startLine: 86
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Extensions
  summary: >-
    Returns a value within the given <code class="paramref">range</code>'s <xref href="MonoGame.Extended.Range%601.Min" data-throw-if-not-resolved="false"></xref> and <xref href="MonoGame.Extended.Range%601.Max" data-throw-if-not-resolved="false"></xref> values based on the given <code class="paramref">percentage</code> into the range.

    Note that, if the <code class="paramref">percentage</code> is outside the 0 to 1 range, a correct value outside the <code class="paramref">range</code> will still be returned.

    This method is the reverse action of <xref href="MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range%7bSystem.Int32%7d%2cSystem.Single)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static float FromPercentage(this Range<int> range, float percentage)
    parameters:
    - id: range
      type: MonoGame.Extended.Range{System.Int32}
      description: The range to query.
    - id: percentage
      type: System.Single
      description: The percentage to query.
    return:
      type: System.Single
      description: The value.
    content.vb: Public Shared Function FromPercentage(range As Range(Of Integer), percentage As Single) As Single
  overload: MLEM.Extended.Extensions.NumberExtensions.FromPercentage*
  nameWithType.vb: NumberExtensions.FromPercentage(Range(Of Integer), Single)
  fullName.vb: MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range(Of Integer), Single)
  name.vb: FromPercentage(Range(Of Integer), Single)
references:
- uid: MLEM.Extended.Extensions
  commentId: N:MLEM.Extended.Extensions
  href: MLEM.html
  name: MLEM.Extended.Extensions
  nameWithType: MLEM.Extended.Extensions
  fullName: MLEM.Extended.Extensions
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Extended
    name: Extended
    href: MLEM.Extended.html
  - name: .
  - uid: MLEM.Extended.Extensions
    name: Extensions
    href: MLEM.Extended.Extensions.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Extended
    name: Extended
    href: MLEM.Extended.html
  - name: .
  - uid: MLEM.Extended.Extensions
    name: Extensions
    href: MLEM.Extended.Extensions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Misc.RectangleF
  commentId: T:MLEM.Misc.RectangleF
  parent: MLEM.Misc
  href: MLEM.Misc.RectangleF.html
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Misc.RectangleF
- uid: MonoGame.Extended.RectangleF
  commentId: T:MonoGame.Extended.RectangleF
  parent: MonoGame.Extended
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MonoGame.Extended.RectangleF
- uid: MLEM.Extended.Extensions.NumberExtensions.ToExtended*
  commentId: Overload:MLEM.Extended.Extensions.NumberExtensions.ToExtended
  href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_ToExtended_MLEM_Misc_RectangleF_
  name: ToExtended
  nameWithType: NumberExtensions.ToExtended
  fullName: MLEM.Extended.Extensions.NumberExtensions.ToExtended
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  href: MLEM.html
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Misc
    name: Misc
    href: MLEM.Misc.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Misc
    name: Misc
    href: MLEM.Misc.html
- uid: MonoGame.Extended
  commentId: N:MonoGame.Extended
  isExternal: true
  name: MonoGame.Extended
  nameWithType: MonoGame.Extended
  fullName: MonoGame.Extended
  spec.csharp:
  - uid: MonoGame
    name: MonoGame
    isExternal: true
  - name: .
  - uid: MonoGame.Extended
    name: Extended
    isExternal: true
  spec.vb:
  - uid: MonoGame
    name: MonoGame
    isExternal: true
  - name: .
  - uid: MonoGame.Extended
    name: Extended
    isExternal: true
- uid: MLEM.Extended.Extensions.NumberExtensions.ToMlem*
  commentId: Overload:MLEM.Extended.Extensions.NumberExtensions.ToMlem
  href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_ToMlem_MonoGame_Extended_RectangleF_
  name: ToMlem
  nameWithType: NumberExtensions.ToMlem
  fullName: MLEM.Extended.Extensions.NumberExtensions.ToMlem
- uid: MLEM.Extended.Extensions.NumberExtensions.Penetrate*
  commentId: Overload:MLEM.Extended.Extensions.NumberExtensions.Penetrate
  href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_Penetrate_MonoGame_Extended_RectangleF_MonoGame_Extended_RectangleF_Microsoft_Xna_Framework_Vector2__System_Single__
  name: Penetrate
  nameWithType: NumberExtensions.Penetrate
  fullName: MLEM.Extended.Extensions.NumberExtensions.Penetrate
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: MonoGame.Extended.Range`1.Min
  commentId: P:MonoGame.Extended.Range`1.Min
  isExternal: true
  name: Min
  nameWithType: Range<T>.Min
  fullName: MonoGame.Extended.Range<T>.Min
  nameWithType.vb: Range(Of T).Min
  fullName.vb: MonoGame.Extended.Range(Of T).Min
- uid: MonoGame.Extended.Range`1.Max
  commentId: P:MonoGame.Extended.Range`1.Max
  isExternal: true
  name: Max
  nameWithType: Range<T>.Max
  fullName: MonoGame.Extended.Range<T>.Max
  nameWithType.vb: Range(Of T).Max
  fullName.vb: MonoGame.Extended.Range(Of T).Max
- uid: MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range{System.Single},System.Single)
  commentId: M:MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range{System.Single},System.Single)
  isExternal: true
  href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_FromPercentage_MonoGame_Extended_Range_System_Single__System_Single_
  name: FromPercentage(Range<float>, float)
  nameWithType: NumberExtensions.FromPercentage(Range<float>, float)
  fullName: MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range<float>, float)
  nameWithType.vb: NumberExtensions.FromPercentage(Range(Of Single), Single)
  fullName.vb: MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range(Of Single), Single)
  name.vb: FromPercentage(Range(Of Single), Single)
  spec.csharp:
  - uid: MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range{System.Single},System.Single)
    name: FromPercentage
    href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_FromPercentage_MonoGame_Extended_Range_System_Single__System_Single_
  - name: (
  - uid: MonoGame.Extended.Range`1
    name: Range
    isExternal: true
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range{System.Single},System.Single)
    name: FromPercentage
    href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_FromPercentage_MonoGame_Extended_Range_System_Single__System_Single_
  - name: (
  - uid: MonoGame.Extended.Range`1
    name: Range
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: MLEM.Extended.Extensions.NumberExtensions.GetPercentage*
  commentId: Overload:MLEM.Extended.Extensions.NumberExtensions.GetPercentage
  href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_GetPercentage_MonoGame_Extended_Range_System_Single__System_Single_
  name: GetPercentage
  nameWithType: NumberExtensions.GetPercentage
  fullName: MLEM.Extended.Extensions.NumberExtensions.GetPercentage
- uid: MonoGame.Extended.Range{System.Single}
  commentId: T:MonoGame.Extended.Range{System.Single}
  parent: MonoGame.Extended
  definition: MonoGame.Extended.Range`1
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: Range<float>
  nameWithType: Range<float>
  fullName: MonoGame.Extended.Range<float>
  nameWithType.vb: Range(Of Single)
  fullName.vb: MonoGame.Extended.Range(Of Single)
  name.vb: Range(Of Single)
  spec.csharp:
  - uid: MonoGame.Extended.Range`1
    name: Range
    isExternal: true
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: MonoGame.Extended.Range`1
    name: Range
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: MonoGame.Extended.Range`1
  commentId: T:MonoGame.Extended.Range`1
  isExternal: true
  name: Range<T>
  nameWithType: Range<T>
  fullName: MonoGame.Extended.Range<T>
  nameWithType.vb: Range(Of T)
  fullName.vb: MonoGame.Extended.Range(Of T)
  name.vb: Range(Of T)
  spec.csharp:
  - uid: MonoGame.Extended.Range`1
    name: Range
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: MonoGame.Extended.Range`1
    name: Range
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range{System.Int32},System.Single)
  commentId: M:MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range{System.Int32},System.Single)
  isExternal: true
  href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_FromPercentage_MonoGame_Extended_Range_System_Int32__System_Single_
  name: FromPercentage(Range<int>, float)
  nameWithType: NumberExtensions.FromPercentage(Range<int>, float)
  fullName: MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range<int>, float)
  nameWithType.vb: NumberExtensions.FromPercentage(Range(Of Integer), Single)
  fullName.vb: MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range(Of Integer), Single)
  name.vb: FromPercentage(Range(Of Integer), Single)
  spec.csharp:
  - uid: MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range{System.Int32},System.Single)
    name: FromPercentage
    href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_FromPercentage_MonoGame_Extended_Range_System_Int32__System_Single_
  - name: (
  - uid: MonoGame.Extended.Range`1
    name: Range
    isExternal: true
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: MLEM.Extended.Extensions.NumberExtensions.FromPercentage(MonoGame.Extended.Range{System.Int32},System.Single)
    name: FromPercentage
    href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_FromPercentage_MonoGame_Extended_Range_System_Int32__System_Single_
  - name: (
  - uid: MonoGame.Extended.Range`1
    name: Range
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: MonoGame.Extended.Range{System.Int32}
  commentId: T:MonoGame.Extended.Range{System.Int32}
  parent: MonoGame.Extended
  definition: MonoGame.Extended.Range`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: Range<int>
  nameWithType: Range<int>
  fullName: MonoGame.Extended.Range<int>
  nameWithType.vb: Range(Of Integer)
  fullName.vb: MonoGame.Extended.Range(Of Integer)
  name.vb: Range(Of Integer)
  spec.csharp:
  - uid: MonoGame.Extended.Range`1
    name: Range
    isExternal: true
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: MonoGame.Extended.Range`1
    name: Range
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range{System.Single},System.Single)
  commentId: M:MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range{System.Single},System.Single)
  isExternal: true
  href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_GetPercentage_MonoGame_Extended_Range_System_Single__System_Single_
  name: GetPercentage(Range<float>, float)
  nameWithType: NumberExtensions.GetPercentage(Range<float>, float)
  fullName: MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range<float>, float)
  nameWithType.vb: NumberExtensions.GetPercentage(Range(Of Single), Single)
  fullName.vb: MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range(Of Single), Single)
  name.vb: GetPercentage(Range(Of Single), Single)
  spec.csharp:
  - uid: MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range{System.Single},System.Single)
    name: GetPercentage
    href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_GetPercentage_MonoGame_Extended_Range_System_Single__System_Single_
  - name: (
  - uid: MonoGame.Extended.Range`1
    name: Range
    isExternal: true
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range{System.Single},System.Single)
    name: GetPercentage
    href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_GetPercentage_MonoGame_Extended_Range_System_Single__System_Single_
  - name: (
  - uid: MonoGame.Extended.Range`1
    name: Range
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: MLEM.Extended.Extensions.NumberExtensions.FromPercentage*
  commentId: Overload:MLEM.Extended.Extensions.NumberExtensions.FromPercentage
  href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_FromPercentage_MonoGame_Extended_Range_System_Single__System_Single_
  name: FromPercentage
  nameWithType: NumberExtensions.FromPercentage
  fullName: MLEM.Extended.Extensions.NumberExtensions.FromPercentage
- uid: MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range{System.Int32},System.Single)
  commentId: M:MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range{System.Int32},System.Single)
  isExternal: true
  href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_GetPercentage_MonoGame_Extended_Range_System_Int32__System_Single_
  name: GetPercentage(Range<int>, float)
  nameWithType: NumberExtensions.GetPercentage(Range<int>, float)
  fullName: MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range<int>, float)
  nameWithType.vb: NumberExtensions.GetPercentage(Range(Of Integer), Single)
  fullName.vb: MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range(Of Integer), Single)
  name.vb: GetPercentage(Range(Of Integer), Single)
  spec.csharp:
  - uid: MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range{System.Int32},System.Single)
    name: GetPercentage
    href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_GetPercentage_MonoGame_Extended_Range_System_Int32__System_Single_
  - name: (
  - uid: MonoGame.Extended.Range`1
    name: Range
    isExternal: true
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: MLEM.Extended.Extensions.NumberExtensions.GetPercentage(MonoGame.Extended.Range{System.Int32},System.Single)
    name: GetPercentage
    href: MLEM.Extended.Extensions.NumberExtensions.html#MLEM_Extended_Extensions_NumberExtensions_GetPercentage_MonoGame_Extended_Range_System_Int32__System_Single_
  - name: (
  - uid: MonoGame.Extended.Range`1
    name: Range
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
