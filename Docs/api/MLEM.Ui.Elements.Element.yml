### YamlMime:ManagedReference
items:
- uid: MLEM.Ui.Elements.Element
  commentId: T:MLEM.Ui.Elements.Element
  id: Element
  parent: MLEM.Ui.Elements
  children:
  - MLEM.Ui.Elements.Element.#ctor(MLEM.Ui.Anchor,Microsoft.Xna.Framework.Vector2)
  - MLEM.Ui.Elements.Element.ActionSound
  - MLEM.Ui.Elements.Element.AddChild``1(``0,System.Int32)
  - MLEM.Ui.Elements.Element.AddedToUi(MLEM.Ui.UiSystem,MLEM.Ui.RootElement)
  - MLEM.Ui.Elements.Element.Anchor
  - MLEM.Ui.Elements.Element.AndChildren(System.Action{MLEM.Ui.Elements.Element})
  - MLEM.Ui.Elements.Element.Area
  - MLEM.Ui.Elements.Element.AreaDirty
  - MLEM.Ui.Elements.Element.AutoNavGroup
  - MLEM.Ui.Elements.Element.AutoSizeAddedAbsolute
  - MLEM.Ui.Elements.Element.CalcActualSize(MLEM.Maths.RectangleF)
  - MLEM.Ui.Elements.Element.CanAutoAnchorsAttach
  - MLEM.Ui.Elements.Element.CanBeMoused
  - MLEM.Ui.Elements.Element.CanBePressed
  - MLEM.Ui.Elements.Element.CanBeSelected
  - MLEM.Ui.Elements.Element.ChildPaddedArea
  - MLEM.Ui.Elements.Element.ChildPadding
  - MLEM.Ui.Elements.Element.Children
  - MLEM.Ui.Elements.Element.Controls
  - MLEM.Ui.Elements.Element.DisplayArea
  - MLEM.Ui.Elements.Element.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,MLEM.Graphics.SpriteBatchContext)
  - MLEM.Ui.Elements.Element.DrawAlpha
  - MLEM.Ui.Elements.Element.DrawTransformed(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,MLEM.Graphics.SpriteBatchContext)
  - MLEM.Ui.Elements.Element.Epsilon
  - MLEM.Ui.Elements.Element.ForceUpdateArea
  - MLEM.Ui.Elements.Element.ForceUpdateSortedChildren
  - MLEM.Ui.Elements.Element.GetAreaForAutoAnchors
  - MLEM.Ui.Elements.Element.GetChildren(System.Func{MLEM.Ui.Elements.Element,System.Boolean},System.Boolean,System.Boolean)
  - MLEM.Ui.Elements.Element.GetChildren``1(System.Func{``0,System.Boolean},System.Boolean,System.Boolean)
  - MLEM.Ui.Elements.Element.GetElementUnderPos(Microsoft.Xna.Framework.Vector2)
  - MLEM.Ui.Elements.Element.GetGamepadNextElement
  - MLEM.Ui.Elements.Element.GetLowestChild(System.Func{MLEM.Ui.Elements.Element,System.Boolean},System.Boolean)
  - MLEM.Ui.Elements.Element.GetLowestOlderSibling(System.Func{MLEM.Ui.Elements.Element,System.Boolean},System.Boolean)
  - MLEM.Ui.Elements.Element.GetOlderSibling(System.Func{MLEM.Ui.Elements.Element,System.Boolean})
  - MLEM.Ui.Elements.Element.GetParentTree
  - MLEM.Ui.Elements.Element.GetRelevantChildren
  - MLEM.Ui.Elements.Element.GetRightmostChild(System.Func{MLEM.Ui.Elements.Element,System.Boolean},System.Boolean)
  - MLEM.Ui.Elements.Element.GetSiblings(System.Func{MLEM.Ui.Elements.Element,System.Boolean})
  - MLEM.Ui.Elements.Element.GetTabNextElement
  - MLEM.Ui.Elements.Element.GetTotalCoveredArea(System.Boolean)
  - MLEM.Ui.Elements.Element.InitStyle(MLEM.Ui.Style.UiStyle)
  - MLEM.Ui.Elements.Element.Input
  - MLEM.Ui.Elements.Element.IsHidden
  - MLEM.Ui.Elements.Element.IsMouseOver
  - MLEM.Ui.Elements.Element.IsSelected
  - MLEM.Ui.Elements.Element.IsSelectedActive
  - MLEM.Ui.Elements.Element.MouseEnterAnimation
  - MLEM.Ui.Elements.Element.MouseExitAnimation
  - MLEM.Ui.Elements.Element.OnAddedToUi
  - MLEM.Ui.Elements.Element.OnAreaUpdated
  - MLEM.Ui.Elements.Element.OnChildAdded
  - MLEM.Ui.Elements.Element.OnChildAreaDirty(MLEM.Ui.Elements.Element,System.Boolean)
  - MLEM.Ui.Elements.Element.OnChildRemoved
  - MLEM.Ui.Elements.Element.OnDeselected
  - MLEM.Ui.Elements.Element.OnDrawn
  - MLEM.Ui.Elements.Element.OnMouseEnter
  - MLEM.Ui.Elements.Element.OnMouseExit
  - MLEM.Ui.Elements.Element.OnMousedElementChanged
  - MLEM.Ui.Elements.Element.OnPressed
  - MLEM.Ui.Elements.Element.OnRemovedFromUi
  - MLEM.Ui.Elements.Element.OnSecondaryPressed
  - MLEM.Ui.Elements.Element.OnSelected
  - MLEM.Ui.Elements.Element.OnSelectedElementChanged
  - MLEM.Ui.Elements.Element.OnStyleInit
  - MLEM.Ui.Elements.Element.OnTextInput
  - MLEM.Ui.Elements.Element.OnTouchEnter
  - MLEM.Ui.Elements.Element.OnTouchExit
  - MLEM.Ui.Elements.Element.OnTouchedElementChanged
  - MLEM.Ui.Elements.Element.OnUpdated
  - MLEM.Ui.Elements.Element.Padding
  - MLEM.Ui.Elements.Element.Parent
  - MLEM.Ui.Elements.Element.ParentArea
  - MLEM.Ui.Elements.Element.PlayAnimation(MLEM.Ui.UiAnimation)
  - MLEM.Ui.Elements.Element.PlayingAnimations
  - MLEM.Ui.Elements.Element.PositionOffset
  - MLEM.Ui.Elements.Element.PreventParentSpill
  - MLEM.Ui.Elements.Element.Priority
  - MLEM.Ui.Elements.Element.RemoveChild(MLEM.Ui.Elements.Element)
  - MLEM.Ui.Elements.Element.RemoveChildren(System.Func{MLEM.Ui.Elements.Element,System.Boolean})
  - MLEM.Ui.Elements.Element.RemovedFromUi
  - MLEM.Ui.Elements.Element.ReorderChildren(System.Comparison{MLEM.Ui.Elements.Element})
  - MLEM.Ui.Elements.Element.ReverseChildren(System.Int32,System.Nullable{System.Int32})
  - MLEM.Ui.Elements.Element.Root
  - MLEM.Ui.Elements.Element.Scale
  - MLEM.Ui.Elements.Element.ScaleTransform(System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2})
  - MLEM.Ui.Elements.Element.ScaledAutoSizeAddedAbsolute
  - MLEM.Ui.Elements.Element.ScaledChildPadding
  - MLEM.Ui.Elements.Element.ScaledOffset
  - MLEM.Ui.Elements.Element.ScaledPadding
  - MLEM.Ui.Elements.Element.ScaledScrollOffset
  - MLEM.Ui.Elements.Element.ScaledSize
  - MLEM.Ui.Elements.Element.ScrollOffset
  - MLEM.Ui.Elements.Element.SecondActionSound
  - MLEM.Ui.Elements.Element.SelectionIndicator
  - MLEM.Ui.Elements.Element.SetAreaAndUpdateChildren(MLEM.Maths.RectangleF)
  - MLEM.Ui.Elements.Element.SetAreaDirty
  - MLEM.Ui.Elements.Element.SetHeightBasedOnChildren
  - MLEM.Ui.Elements.Element.SetSortedChildrenDirty
  - MLEM.Ui.Elements.Element.SetWidthBasedOnChildren
  - MLEM.Ui.Elements.Element.Size
  - MLEM.Ui.Elements.Element.SortedChildren
  - MLEM.Ui.Elements.Element.StopAnimation(MLEM.Ui.UiAnimation)
  - MLEM.Ui.Elements.Element.Style
  - MLEM.Ui.Elements.Element.System
  - MLEM.Ui.Elements.Element.ToString
  - MLEM.Ui.Elements.Element.Transform
  - MLEM.Ui.Elements.Element.TransformInverse(Microsoft.Xna.Framework.Vector2)
  - MLEM.Ui.Elements.Element.TransformInverseAll(Microsoft.Xna.Framework.Vector2)
  - MLEM.Ui.Elements.Element.TreatSizeAsMaximum
  - MLEM.Ui.Elements.Element.TreatSizeAsMinimum
  - MLEM.Ui.Elements.Element.UnscrolledArea
  - MLEM.Ui.Elements.Element.Update(Microsoft.Xna.Framework.GameTime)
  - MLEM.Ui.Elements.Element.UpdateAreaIfDirty
  - MLEM.Ui.Elements.Element.UpdateSortedChildrenIfDirty
  langs:
  - csharp
  - vb
  name: Element
  nameWithType: Element
  fullName: MLEM.Ui.Elements.Element
  type: Class
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Element
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 20
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: This class represents a generic base class for ui elements of a <xref href="MLEM.Ui.UiSystem" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: 'public abstract class Element : GenericDataHolder, IGenericDataHolder'
    content.vb: Public MustInherit Class Element Inherits GenericDataHolder Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Misc.GenericDataHolder
  derivedClasses:
  - MLEM.Ui.Elements.Button
  - MLEM.Ui.Elements.Checkbox
  - MLEM.Ui.Elements.Group
  - MLEM.Ui.Elements.Image
  - MLEM.Ui.Elements.Panel
  - MLEM.Ui.Elements.Paragraph
  - MLEM.Ui.Elements.Paragraph.Link
  - MLEM.Ui.Elements.ProgressBar
  - MLEM.Ui.Elements.ScrollBar
  - MLEM.Ui.Elements.TextField
  - MLEM.Ui.Elements.VerticalSpace
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Misc.GenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  - MLEM.Misc.GenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - MLEM.Ui.Elements.Element.MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Paragraph.TextCallback)
  - MLEM.Ui.Elements.Element.MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Tooltip)
  - MLEM.Ui.Elements.Element.MLEM.Ui.Elements.ElementExtensions.AddTooltip(System.String)
- uid: MLEM.Ui.Elements.Element.Epsilon
  commentId: F:MLEM.Ui.Elements.Element.Epsilon
  id: Epsilon
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Epsilon
  nameWithType: Element.Epsilon
  fullName: MLEM.Ui.Elements.Element.Epsilon
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Epsilon
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 26
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    This field holds an epsilon value used in element <xref href="MLEM.Ui.Elements.Element.Size" data-throw-if-not-resolved="false"></xref>, position and resulting <xref href="MLEM.Ui.Elements.Element.Area" data-throw-if-not-resolved="false"></xref> calculations to mitigate floating point rounding inaccuracies.

    If ui elements used are extremely small or extremely large, this value can be reduced or increased.
  example: []
  syntax:
    content: public static float Epsilon
    return:
      type: System.Single
    content.vb: Public Shared Epsilon As Single
- uid: MLEM.Ui.Elements.Element.System
  commentId: P:MLEM.Ui.Elements.Element.System
  id: System
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: System
  nameWithType: Element.System
  fullName: MLEM.Ui.Elements.Element.System
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: System
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 31
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: The ui system that this element is currently a part of
  example: []
  syntax:
    content: public UiSystem System { get; }
    parameters: []
    return:
      type: MLEM.Ui.UiSystem
    content.vb: Public Property System As UiSystem
  overload: MLEM.Ui.Elements.Element.System*
- uid: MLEM.Ui.Elements.Element.Controls
  commentId: F:MLEM.Ui.Elements.Element.Controls
  id: Controls
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Controls
  nameWithType: Element.Controls
  fullName: MLEM.Ui.Elements.Element.Controls
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Controls
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 42
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: The controls that this element's <xref href="MLEM.Ui.Elements.Element.System" data-throw-if-not-resolved="false"></xref> uses
  example: []
  syntax:
    content: public UiControls Controls
    return:
      type: MLEM.Ui.UiControls
    content.vb: Public Controls As UiControls
- uid: MLEM.Ui.Elements.Element.Parent
  commentId: P:MLEM.Ui.Elements.Element.Parent
  id: Parent
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: Element.Parent
  fullName: MLEM.Ui.Elements.Element.Parent
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Parent
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 47
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    This element's parent element.

    If this element has no parent (it is the <xref href="MLEM.Ui.RootElement" data-throw-if-not-resolved="false"></xref> of a ui system), this value is <code>null</code>.
  example: []
  syntax:
    content: public Element Parent { get; }
    parameters: []
    return:
      type: MLEM.Ui.Elements.Element
    content.vb: Public Property Parent As Element
  overload: MLEM.Ui.Elements.Element.Parent*
- uid: MLEM.Ui.Elements.Element.Root
  commentId: P:MLEM.Ui.Elements.Element.Root
  id: Root
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Root
  nameWithType: Element.Root
  fullName: MLEM.Ui.Elements.Element.Root
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Root
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 52
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    This element's <xref href="MLEM.Ui.RootElement" data-throw-if-not-resolved="false"></xref>.

    Note that this value is set even if this element has a <xref href="MLEM.Ui.Elements.Element.Parent" data-throw-if-not-resolved="false"></xref>. To get the element that represents the root element, use <xref href="MLEM.Ui.RootElement.Element" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public RootElement Root { get; }
    parameters: []
    return:
      type: MLEM.Ui.RootElement
    content.vb: Public Property Root As RootElement
  overload: MLEM.Ui.Elements.Element.Root*
- uid: MLEM.Ui.Elements.Element.Scale
  commentId: P:MLEM.Ui.Elements.Element.Scale
  id: Scale
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Scale
  nameWithType: Element.Scale
  fullName: MLEM.Ui.Elements.Element.Scale
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Scale
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 56
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: The scale that this ui element renders with
  example: []
  syntax:
    content: public float Scale { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Scale As Single
  overload: MLEM.Ui.Elements.Element.Scale*
- uid: MLEM.Ui.Elements.Element.Anchor
  commentId: P:MLEM.Ui.Elements.Element.Anchor
  id: Anchor
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Anchor
  nameWithType: Element.Anchor
  fullName: MLEM.Ui.Elements.Element.Anchor
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Anchor
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 60
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: The <xref href="MLEM.Ui.Elements.Element.Anchor" data-throw-if-not-resolved="false"></xref> that this element uses for positioning within its parent
  example: []
  syntax:
    content: public Anchor Anchor { get; set; }
    parameters: []
    return:
      type: MLEM.Ui.Anchor
    content.vb: Public Property Anchor As Anchor
  overload: MLEM.Ui.Elements.Element.Anchor*
- uid: MLEM.Ui.Elements.Element.Size
  commentId: P:MLEM.Ui.Elements.Element.Size
  id: Size
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: Element.Size
  fullName: MLEM.Ui.Elements.Element.Size
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Size
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 82
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    The size of this element, where X represents the width and Y represents the height.

    If the x or y value of the size is between 0 and 1, the size will be seen as a percentage of its parent's size rather than as an absolute value.

    If the x (or y) value of the size is negative, the width (or height) is seen as a percentage of the element's resulting height (or width).

    Additionally, if auto-sizing is used, <xref href="MLEM.Ui.Elements.Element.AutoSizeAddedAbsolute" data-throw-if-not-resolved="false"></xref> can be set to add or subtract an absolute value from the automatically calculated size.
  example:
  - >-
    The following example, ignoring <xref href="MLEM.Ui.Elements.Element.Scale" data-throw-if-not-resolved="false"></xref>, combines both types of percentage-based sizing.

    If this element is inside of a <xref href="MLEM.Ui.Elements.Element.Parent" data-throw-if-not-resolved="false"></xref> whose width is 20, this element's width will be set to <code>0.5 * 20 = 10</code>, and its height will be set to <code>2.5 * 10 = 25</code>.

    <pre><code class="lang-csharp">element.Size = new Vector2(0.5F, -2.5F);</code></pre>
  syntax:
    content: public Vector2 Size { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public Property Size As Vector2
  overload: MLEM.Ui.Elements.Element.Size*
- uid: MLEM.Ui.Elements.Element.ScaledSize
  commentId: P:MLEM.Ui.Elements.Element.ScaledSize
  id: ScaledSize
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ScaledSize
  nameWithType: Element.ScaledSize
  fullName: MLEM.Ui.Elements.Element.ScaledSize
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ScaledSize
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 94
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: The <xref href="MLEM.Ui.Elements.Element.Size" data-throw-if-not-resolved="false"></xref>, but with <xref href="MLEM.Ui.Elements.Element.Scale" data-throw-if-not-resolved="false"></xref> applied.
  example: []
  syntax:
    content: public Vector2 ScaledSize { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public ReadOnly Property ScaledSize As Vector2
  overload: MLEM.Ui.Elements.Element.ScaledSize*
- uid: MLEM.Ui.Elements.Element.AutoSizeAddedAbsolute
  commentId: P:MLEM.Ui.Elements.Element.AutoSizeAddedAbsolute
  id: AutoSizeAddedAbsolute
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: AutoSizeAddedAbsolute
  nameWithType: Element.AutoSizeAddedAbsolute
  fullName: MLEM.Ui.Elements.Element.AutoSizeAddedAbsolute
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: AutoSizeAddedAbsolute
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 102
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    If auto-sizing is used by setting <xref href="MLEM.Ui.Elements.Element.Size" data-throw-if-not-resolved="false"></xref> less than or equal to 1, this property allows adding or subtracting an additional, absolute value from the automatically calculated size.

    If this element is not using auto-sizing, this property is ignored.
  example:
  - Ignoring <xref href="MLEM.Ui.Elements.Element.Scale" data-throw-if-not-resolved="false"></xref>, if this element's <xref href="MLEM.Ui.Elements.Element.Size" data-throw-if-not-resolved="false"></xref> is set to <code>0.5, 0.75</code> and its <xref href="MLEM.Ui.Elements.Element.Parent" data-throw-if-not-resolved="false"></xref> has a size of <code>200, 100</code>, then an added absolute size of <code>-50, 25</code> will result in a final <xref href="MLEM.Ui.Elements.Element.Area" data-throw-if-not-resolved="false"></xref> size of <code>0.5 * 200 - 50, 0.75 * 100 + 25</code>, or <code>50, 100</code>.
  syntax:
    content: public Vector2 AutoSizeAddedAbsolute { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public Property AutoSizeAddedAbsolute As Vector2
  overload: MLEM.Ui.Elements.Element.AutoSizeAddedAbsolute*
- uid: MLEM.Ui.Elements.Element.ScaledAutoSizeAddedAbsolute
  commentId: P:MLEM.Ui.Elements.Element.ScaledAutoSizeAddedAbsolute
  id: ScaledAutoSizeAddedAbsolute
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ScaledAutoSizeAddedAbsolute
  nameWithType: Element.ScaledAutoSizeAddedAbsolute
  fullName: MLEM.Ui.Elements.Element.ScaledAutoSizeAddedAbsolute
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ScaledAutoSizeAddedAbsolute
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 114
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: The <xref href="MLEM.Ui.Elements.Element.AutoSizeAddedAbsolute" data-throw-if-not-resolved="false"></xref>, but with <xref href="MLEM.Ui.Elements.Element.Scale" data-throw-if-not-resolved="false"></xref> applied.
  example: []
  syntax:
    content: public Vector2 ScaledAutoSizeAddedAbsolute { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public ReadOnly Property ScaledAutoSizeAddedAbsolute As Vector2
  overload: MLEM.Ui.Elements.Element.ScaledAutoSizeAddedAbsolute*
- uid: MLEM.Ui.Elements.Element.PositionOffset
  commentId: P:MLEM.Ui.Elements.Element.PositionOffset
  id: PositionOffset
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: PositionOffset
  nameWithType: Element.PositionOffset
  fullName: MLEM.Ui.Elements.Element.PositionOffset
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: PositionOffset
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 119
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    This element's offset from its default position, which is dictated by its <xref href="MLEM.Ui.Elements.Element.Anchor" data-throw-if-not-resolved="false"></xref>.

    Note that, depending on the side that the element is anchored to, this offset moves it in a different direction.
  example: []
  syntax:
    content: public Vector2 PositionOffset { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public Property PositionOffset As Vector2
  overload: MLEM.Ui.Elements.Element.PositionOffset*
- uid: MLEM.Ui.Elements.Element.ScaledOffset
  commentId: P:MLEM.Ui.Elements.Element.ScaledOffset
  id: ScaledOffset
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ScaledOffset
  nameWithType: Element.ScaledOffset
  fullName: MLEM.Ui.Elements.Element.ScaledOffset
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ScaledOffset
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 131
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: The <xref href="MLEM.Ui.Elements.Element.PositionOffset" data-throw-if-not-resolved="false"></xref>, but with <xref href="MLEM.Ui.Elements.Element.Scale" data-throw-if-not-resolved="false"></xref> applied.
  example: []
  syntax:
    content: public Vector2 ScaledOffset { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public ReadOnly Property ScaledOffset As Vector2
  overload: MLEM.Ui.Elements.Element.ScaledOffset*
- uid: MLEM.Ui.Elements.Element.ScaledPadding
  commentId: P:MLEM.Ui.Elements.Element.ScaledPadding
  id: ScaledPadding
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ScaledPadding
  nameWithType: Element.ScaledPadding
  fullName: MLEM.Ui.Elements.Element.ScaledPadding
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ScaledPadding
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 135
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: The <xref href="MLEM.Ui.Elements.Element.Padding" data-throw-if-not-resolved="false"></xref>, but with <xref href="MLEM.Ui.Elements.Element.Scale" data-throw-if-not-resolved="false"></xref> applied.
  example: []
  syntax:
    content: public Padding ScaledPadding { get; }
    parameters: []
    return:
      type: MLEM.Maths.Padding
    content.vb: Public ReadOnly Property ScaledPadding As Padding
  overload: MLEM.Ui.Elements.Element.ScaledPadding*
- uid: MLEM.Ui.Elements.Element.ScaledChildPadding
  commentId: P:MLEM.Ui.Elements.Element.ScaledChildPadding
  id: ScaledChildPadding
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ScaledChildPadding
  nameWithType: Element.ScaledChildPadding
  fullName: MLEM.Ui.Elements.Element.ScaledChildPadding
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ScaledChildPadding
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 139
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: The <xref href="MLEM.Ui.Elements.Element.ChildPadding" data-throw-if-not-resolved="false"></xref>, but with <xref href="MLEM.Ui.Elements.Element.Scale" data-throw-if-not-resolved="false"></xref> applied.
  example: []
  syntax:
    content: public Padding ScaledChildPadding { get; }
    parameters: []
    return:
      type: MLEM.Maths.Padding
    content.vb: Public ReadOnly Property ScaledChildPadding As Padding
  overload: MLEM.Ui.Elements.Element.ScaledChildPadding*
- uid: MLEM.Ui.Elements.Element.ChildPaddedArea
  commentId: P:MLEM.Ui.Elements.Element.ChildPaddedArea
  id: ChildPaddedArea
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ChildPaddedArea
  nameWithType: Element.ChildPaddedArea
  fullName: MLEM.Ui.Elements.Element.ChildPaddedArea
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ChildPaddedArea
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 143
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: This element's current <xref href="MLEM.Ui.Elements.Element.Area" data-throw-if-not-resolved="false"></xref>, but with <xref href="MLEM.Ui.Elements.Element.ScaledChildPadding" data-throw-if-not-resolved="false"></xref> applied.
  example: []
  syntax:
    content: public RectangleF ChildPaddedArea { get; }
    parameters: []
    return:
      type: MLEM.Maths.RectangleF
    content.vb: Public ReadOnly Property ChildPaddedArea As RectangleF
  overload: MLEM.Ui.Elements.Element.ChildPaddedArea*
- uid: MLEM.Ui.Elements.Element.UnscrolledArea
  commentId: P:MLEM.Ui.Elements.Element.UnscrolledArea
  id: UnscrolledArea
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: UnscrolledArea
  nameWithType: Element.UnscrolledArea
  fullName: MLEM.Ui.Elements.Element.UnscrolledArea
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: UnscrolledArea
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 148
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    This element's area, without respecting its <xref href="MLEM.Ui.Elements.Element.ScrollOffset" data-throw-if-not-resolved="false"></xref>.

    This area is updated automatically to fit this element's sizing and positioning properties.
  example: []
  syntax:
    content: public RectangleF UnscrolledArea { get; }
    parameters: []
    return:
      type: MLEM.Maths.RectangleF
    content.vb: Public ReadOnly Property UnscrolledArea As RectangleF
  overload: MLEM.Ui.Elements.Element.UnscrolledArea*
- uid: MLEM.Ui.Elements.Element.Area
  commentId: P:MLEM.Ui.Elements.Element.Area
  id: Area
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Area
  nameWithType: Element.Area
  fullName: MLEM.Ui.Elements.Element.Area
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Area
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 157
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: The <xref href="MLEM.Ui.Elements.Element.UnscrolledArea" data-throw-if-not-resolved="false"></xref> of this element, but with <xref href="MLEM.Ui.Elements.Element.ScaledScrollOffset" data-throw-if-not-resolved="false"></xref> applied.
  example: []
  syntax:
    content: public RectangleF Area { get; }
    parameters: []
    return:
      type: MLEM.Maths.RectangleF
    content.vb: Public ReadOnly Property Area As RectangleF
  overload: MLEM.Ui.Elements.Element.Area*
- uid: MLEM.Ui.Elements.Element.DisplayArea
  commentId: P:MLEM.Ui.Elements.Element.DisplayArea
  id: DisplayArea
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: DisplayArea
  nameWithType: Element.DisplayArea
  fullName: MLEM.Ui.Elements.Element.DisplayArea
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: DisplayArea
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 162
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    The area that this element is displayed in, which is <xref href="MLEM.Ui.Elements.Element.Area" data-throw-if-not-resolved="false"></xref> shrunk by this element's <xref href="MLEM.Ui.Elements.Element.ScaledPadding" data-throw-if-not-resolved="false"></xref>.

    This is the property that should be used for drawing this element, as well as mouse input handling and culling.
  example: []
  syntax:
    content: public RectangleF DisplayArea { get; }
    parameters: []
    return:
      type: MLEM.Maths.RectangleF
    content.vb: Public ReadOnly Property DisplayArea As RectangleF
  overload: MLEM.Ui.Elements.Element.DisplayArea*
- uid: MLEM.Ui.Elements.Element.ScrollOffset
  commentId: F:MLEM.Ui.Elements.Element.ScrollOffset
  id: ScrollOffset
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ScrollOffset
  nameWithType: Element.ScrollOffset
  fullName: MLEM.Ui.Elements.Element.ScrollOffset
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ScrollOffset
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 166
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: The offset that this element has as a result of <xref href="MLEM.Ui.Elements.Panel" data-throw-if-not-resolved="false"></xref> scrolling.
  example: []
  syntax:
    content: public Vector2 ScrollOffset
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public ScrollOffset As Vector2
- uid: MLEM.Ui.Elements.Element.ScaledScrollOffset
  commentId: P:MLEM.Ui.Elements.Element.ScaledScrollOffset
  id: ScaledScrollOffset
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ScaledScrollOffset
  nameWithType: Element.ScaledScrollOffset
  fullName: MLEM.Ui.Elements.Element.ScaledScrollOffset
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ScaledScrollOffset
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 170
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: The <xref href="MLEM.Ui.Elements.Element.ScrollOffset" data-throw-if-not-resolved="false"></xref>, but with <xref href="MLEM.Ui.Elements.Element.Scale" data-throw-if-not-resolved="false"></xref> applied.
  example: []
  syntax:
    content: public Vector2 ScaledScrollOffset { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public ReadOnly Property ScaledScrollOffset As Vector2
  overload: MLEM.Ui.Elements.Element.ScaledScrollOffset*
- uid: MLEM.Ui.Elements.Element.IsHidden
  commentId: P:MLEM.Ui.Elements.Element.IsHidden
  id: IsHidden
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: IsHidden
  nameWithType: Element.IsHidden
  fullName: MLEM.Ui.Elements.Element.IsHidden
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsHidden
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 175
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Set this property to <code>true</code> to cause this element to be hidden.

    Hidden elements don't receive input events, aren't rendered and don't factor into auto-anchoring.
  example: []
  syntax:
    content: public virtual bool IsHidden { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property IsHidden As Boolean
  overload: MLEM.Ui.Elements.Element.IsHidden*
- uid: MLEM.Ui.Elements.Element.Priority
  commentId: P:MLEM.Ui.Elements.Element.Priority
  id: Priority
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Priority
  nameWithType: Element.Priority
  fullName: MLEM.Ui.Elements.Element.Priority
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Priority
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 188
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    The priority of this element as part of its <xref href="MLEM.Ui.Elements.Element.Parent" data-throw-if-not-resolved="false"></xref> element.

    A higher priority means the element will be drawn first, but not anchored higher up if auto-anchoring is used.
  example: []
  syntax:
    content: public int Priority { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Priority As Integer
  overload: MLEM.Ui.Elements.Element.Priority*
- uid: MLEM.Ui.Elements.Element.Transform
  commentId: F:MLEM.Ui.Elements.Element.Transform
  id: Transform
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Transform
  nameWithType: Element.Transform
  fullName: MLEM.Ui.Elements.Element.Transform
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Transform
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 203
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    This element's transform matrix.

    Can easily be scaled using <xref href="MLEM.Ui.Elements.Element.ScaleTransform(System.Single%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Vector2%7d)" data-throw-if-not-resolved="false"></xref>.

    Note that, when this is non-null, a new <code>SpriteBatch.Begin</code> call is used for this element.
  example: []
  syntax:
    content: public Matrix Transform
    return:
      type: Microsoft.Xna.Framework.Matrix
    content.vb: Public Transform As Matrix
- uid: MLEM.Ui.Elements.Element.CanBeSelected
  commentId: P:MLEM.Ui.Elements.Element.CanBeSelected
  id: CanBeSelected
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: CanBeSelected
  nameWithType: Element.CanBeSelected
  fullName: MLEM.Ui.Elements.Element.CanBeSelected
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CanBeSelected
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 208
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Set this field to false to disallow the element from being selected.

    An unselectable element is skipped by automatic navigation and its <xref href="MLEM.Ui.Elements.Element.OnSelected" data-throw-if-not-resolved="false"></xref> callback will never be called.
  example: []
  syntax:
    content: public virtual bool CanBeSelected { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property CanBeSelected As Boolean
  overload: MLEM.Ui.Elements.Element.CanBeSelected*
- uid: MLEM.Ui.Elements.Element.CanBeMoused
  commentId: P:MLEM.Ui.Elements.Element.CanBeMoused
  id: CanBeMoused
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: CanBeMoused
  nameWithType: Element.CanBeMoused
  fullName: MLEM.Ui.Elements.Element.CanBeMoused
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CanBeMoused
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 219
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Set this field to false to disallow the element from reacting to being moused over.
  example: []
  syntax:
    content: public virtual bool CanBeMoused { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property CanBeMoused As Boolean
  overload: MLEM.Ui.Elements.Element.CanBeMoused*
- uid: MLEM.Ui.Elements.Element.CanBePressed
  commentId: P:MLEM.Ui.Elements.Element.CanBePressed
  id: CanBePressed
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: CanBePressed
  nameWithType: Element.CanBePressed
  fullName: MLEM.Ui.Elements.Element.CanBePressed
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CanBePressed
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 223
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Set this field to false to disallow this element's <xref href="MLEM.Ui.Elements.Element.OnPressed" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Ui.Elements.Element.OnSecondaryPressed" data-throw-if-not-resolved="false"></xref> events to be called.
  example: []
  syntax:
    content: public virtual bool CanBePressed { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property CanBePressed As Boolean
  overload: MLEM.Ui.Elements.Element.CanBePressed*
- uid: MLEM.Ui.Elements.Element.CanAutoAnchorsAttach
  commentId: P:MLEM.Ui.Elements.Element.CanAutoAnchorsAttach
  id: CanAutoAnchorsAttach
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: CanAutoAnchorsAttach
  nameWithType: Element.CanAutoAnchorsAttach
  fullName: MLEM.Ui.Elements.Element.CanAutoAnchorsAttach
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CanAutoAnchorsAttach
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 227
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Set this field to false to cause auto-anchored siblings to ignore this element as a possible anchor point.
  example: []
  syntax:
    content: public virtual bool CanAutoAnchorsAttach { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property CanAutoAnchorsAttach As Boolean
  overload: MLEM.Ui.Elements.Element.CanAutoAnchorsAttach*
- uid: MLEM.Ui.Elements.Element.SetWidthBasedOnChildren
  commentId: P:MLEM.Ui.Elements.Element.SetWidthBasedOnChildren
  id: SetWidthBasedOnChildren
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: SetWidthBasedOnChildren
  nameWithType: Element.SetWidthBasedOnChildren
  fullName: MLEM.Ui.Elements.Element.SetWidthBasedOnChildren
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: SetWidthBasedOnChildren
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 240
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Set this field to true to cause this element's width to be automatically calculated based on the area that its <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref> take up.

    To use this element's <xref href="MLEM.Ui.Elements.Element.Size" data-throw-if-not-resolved="false"></xref>'s X coordinate as a minimum or maximum width rather than ignoring it, set <xref href="MLEM.Ui.Elements.Element.TreatSizeAsMinimum" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Ui.Elements.Element.TreatSizeAsMaximum" data-throw-if-not-resolved="false"></xref> to true.
  example: []
  syntax:
    content: public virtual bool SetWidthBasedOnChildren { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property SetWidthBasedOnChildren As Boolean
  overload: MLEM.Ui.Elements.Element.SetWidthBasedOnChildren*
- uid: MLEM.Ui.Elements.Element.SetHeightBasedOnChildren
  commentId: P:MLEM.Ui.Elements.Element.SetHeightBasedOnChildren
  id: SetHeightBasedOnChildren
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: SetHeightBasedOnChildren
  nameWithType: Element.SetHeightBasedOnChildren
  fullName: MLEM.Ui.Elements.Element.SetHeightBasedOnChildren
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: SetHeightBasedOnChildren
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 253
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Set this field to true to cause this element's height to be automatically calculated based on the area that its <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref> take up.

    To use this element's <xref href="MLEM.Ui.Elements.Element.Size" data-throw-if-not-resolved="false"></xref>'s Y coordinate as a minimum or maximum height rather than ignoring it, set <xref href="MLEM.Ui.Elements.Element.TreatSizeAsMinimum" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Ui.Elements.Element.TreatSizeAsMaximum" data-throw-if-not-resolved="false"></xref> to true.
  example: []
  syntax:
    content: public virtual bool SetHeightBasedOnChildren { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property SetHeightBasedOnChildren As Boolean
  overload: MLEM.Ui.Elements.Element.SetHeightBasedOnChildren*
- uid: MLEM.Ui.Elements.Element.TreatSizeAsMinimum
  commentId: P:MLEM.Ui.Elements.Element.TreatSizeAsMinimum
  id: TreatSizeAsMinimum
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: TreatSizeAsMinimum
  nameWithType: Element.TreatSizeAsMinimum
  fullName: MLEM.Ui.Elements.Element.TreatSizeAsMinimum
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TreatSizeAsMinimum
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 267
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    If this field is set to true, and <xref href="MLEM.Ui.Elements.Element.SetWidthBasedOnChildren" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Ui.Elements.Element.SetHeightBasedOnChildren" data-throw-if-not-resolved="false"></xref> are enabled, the resulting width or height will always be greather than or equal to this element's <xref href="MLEM.Ui.Elements.Element.Size" data-throw-if-not-resolved="false"></xref>.

    For example, if an element's <xref href="MLEM.Ui.Elements.Element.Size" data-throw-if-not-resolved="false"></xref>'s Y coordinate is set to 20, but there is only one child with a height of 10 in it, the element's height would be shrunk to 10 if this value was false, but would remain at 20 if it was true.

    Note that this value only has an effect if <xref href="MLEM.Ui.Elements.Element.SetWidthBasedOnChildren" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Ui.Elements.Element.SetHeightBasedOnChildren" data-throw-if-not-resolved="false"></xref> are enabled.
  example: []
  syntax:
    content: public virtual bool TreatSizeAsMinimum { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property TreatSizeAsMinimum As Boolean
  overload: MLEM.Ui.Elements.Element.TreatSizeAsMinimum*
- uid: MLEM.Ui.Elements.Element.TreatSizeAsMaximum
  commentId: P:MLEM.Ui.Elements.Element.TreatSizeAsMaximum
  id: TreatSizeAsMaximum
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: TreatSizeAsMaximum
  nameWithType: Element.TreatSizeAsMaximum
  fullName: MLEM.Ui.Elements.Element.TreatSizeAsMaximum
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TreatSizeAsMaximum
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 280
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    If this field is set to true, and <xref href="MLEM.Ui.Elements.Element.SetWidthBasedOnChildren" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Ui.Elements.Element.SetHeightBasedOnChildren" data-throw-if-not-resolved="false"></xref>are enabled, the resulting width or height weill always be less than or equal to this element's <xref href="MLEM.Ui.Elements.Element.Size" data-throw-if-not-resolved="false"></xref>.

    Note that this value only has an effect if <xref href="MLEM.Ui.Elements.Element.SetWidthBasedOnChildren" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Ui.Elements.Element.SetHeightBasedOnChildren" data-throw-if-not-resolved="false"></xref> are enabled.
  example: []
  syntax:
    content: public virtual bool TreatSizeAsMaximum { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property TreatSizeAsMaximum As Boolean
  overload: MLEM.Ui.Elements.Element.TreatSizeAsMaximum*
- uid: MLEM.Ui.Elements.Element.PreventParentSpill
  commentId: P:MLEM.Ui.Elements.Element.PreventParentSpill
  id: PreventParentSpill
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: PreventParentSpill
  nameWithType: Element.PreventParentSpill
  fullName: MLEM.Ui.Elements.Element.PreventParentSpill
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: PreventParentSpill
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 294
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Set this field to true to cause this element's final display area to never exceed that of its <xref href="MLEM.Ui.Elements.Element.Parent" data-throw-if-not-resolved="false"></xref>.

    If the resulting area is too large, the size of this element is shrunk to fit the target area.

    This can be useful if an element should fill the remaining area of a parent exactly.
  example: []
  syntax:
    content: public virtual bool PreventParentSpill { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property PreventParentSpill As Boolean
  overload: MLEM.Ui.Elements.Element.PreventParentSpill*
- uid: MLEM.Ui.Elements.Element.DrawAlpha
  commentId: P:MLEM.Ui.Elements.Element.DrawAlpha
  id: DrawAlpha
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: DrawAlpha
  nameWithType: Element.DrawAlpha
  fullName: MLEM.Ui.Elements.Element.DrawAlpha
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: DrawAlpha
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 307
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    The transparency (alpha value) that this element is rendered with.

    Note that, when <xref href="MLEM.Ui.Elements.Element.Draw(Microsoft.Xna.Framework.GameTime%2cMicrosoft.Xna.Framework.Graphics.SpriteBatch%2cSystem.Single%2cMLEM.Graphics.SpriteBatchContext)" data-throw-if-not-resolved="false"></xref> is called, this alpha value is multiplied with the <xref href="MLEM.Ui.Elements.Element.Parent" data-throw-if-not-resolved="false"></xref>'s alpha value and passed down to this element's <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual float DrawAlpha { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Overridable Property DrawAlpha As Single
  overload: MLEM.Ui.Elements.Element.DrawAlpha*
- uid: MLEM.Ui.Elements.Element.IsMouseOver
  commentId: P:MLEM.Ui.Elements.Element.IsMouseOver
  id: IsMouseOver
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: IsMouseOver
  nameWithType: Element.IsMouseOver
  fullName: MLEM.Ui.Elements.Element.IsMouseOver
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsMouseOver
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 311
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Stores whether this element is currently being moused over or touched.
  example: []
  syntax:
    content: public bool IsMouseOver { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsMouseOver As Boolean
  overload: MLEM.Ui.Elements.Element.IsMouseOver*
- uid: MLEM.Ui.Elements.Element.IsSelected
  commentId: P:MLEM.Ui.Elements.Element.IsSelected
  id: IsSelected
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: IsSelected
  nameWithType: Element.IsSelected
  fullName: MLEM.Ui.Elements.Element.IsSelected
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsSelected
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 316
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Returns whether this element is its <xref href="MLEM.Ui.Elements.Element.Root" data-throw-if-not-resolved="false"></xref>'s <xref href="MLEM.Ui.RootElement.SelectedElement" data-throw-if-not-resolved="false"></xref>.

    Note that, unlike <xref href="MLEM.Ui.Elements.Element.IsSelectedActive" data-throw-if-not-resolved="false"></xref>, this property will be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> even if this element's <xref href="MLEM.Ui.Elements.Element.Root" data-throw-if-not-resolved="false"></xref> is not the <xref href="MLEM.Ui.UiControls.ActiveRoot" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool IsSelected { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSelected As Boolean
  overload: MLEM.Ui.Elements.Element.IsSelected*
- uid: MLEM.Ui.Elements.Element.IsSelectedActive
  commentId: P:MLEM.Ui.Elements.Element.IsSelectedActive
  id: IsSelectedActive
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: IsSelectedActive
  nameWithType: Element.IsSelectedActive
  fullName: MLEM.Ui.Elements.Element.IsSelectedActive
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsSelectedActive
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 321
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Returns whether this element is its <xref href="MLEM.Ui.Elements.Element.Controls" data-throw-if-not-resolved="false"></xref>'s <xref href="MLEM.Ui.UiControls.SelectedElement" data-throw-if-not-resolved="false"></xref>.

    Note that <xref href="MLEM.Ui.Elements.Element.IsSelected" data-throw-if-not-resolved="false"></xref> can be used to query whether this element is its <xref href="MLEM.Ui.Elements.Element.Root" data-throw-if-not-resolved="false"></xref>'s <xref href="MLEM.Ui.RootElement.SelectedElement" data-throw-if-not-resolved="false"></xref> instead.
  example: []
  syntax:
    content: public bool IsSelectedActive { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSelectedActive As Boolean
  overload: MLEM.Ui.Elements.Element.IsSelectedActive*
- uid: MLEM.Ui.Elements.Element.AreaDirty
  commentId: P:MLEM.Ui.Elements.Element.AreaDirty
  id: AreaDirty
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: AreaDirty
  nameWithType: Element.AreaDirty
  fullName: MLEM.Ui.Elements.Element.AreaDirty
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: AreaDirty
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 325
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Returns whether this element's <xref href="MLEM.Ui.Elements.Element.SetAreaDirty" data-throw-if-not-resolved="false"></xref> method has been recently called and its area has not been updated since then using <xref href="MLEM.Ui.Elements.Element.UpdateAreaIfDirty" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Ui.Elements.Element.ForceUpdateArea" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool AreaDirty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AreaDirty As Boolean
  overload: MLEM.Ui.Elements.Element.AreaDirty*
- uid: MLEM.Ui.Elements.Element.AutoNavGroup
  commentId: P:MLEM.Ui.Elements.Element.AutoNavGroup
  id: AutoNavGroup
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: AutoNavGroup
  nameWithType: Element.AutoNavGroup
  fullName: MLEM.Ui.Elements.Element.AutoNavGroup
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: AutoNavGroup
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 331
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    An optional string that represents a group of elements for automatic (keyboard and gamepad) navigation.

    All elements that share the same auto-nav group will be able to be navigated between, and all other elements will not be reachable from elements of other groups.

    Note that, if no element is previously selected and auto-navigation is invoked, this element cannot be chosen as the first element to navigate to if its auto-nav group is non-null.
  example: []
  syntax:
    content: public virtual string AutoNavGroup { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable Property AutoNavGroup As String
  overload: MLEM.Ui.Elements.Element.AutoNavGroup*
- uid: MLEM.Ui.Elements.Element.Style
  commentId: P:MLEM.Ui.Elements.Element.Style
  id: Style
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Style
  nameWithType: Element.Style
  fullName: MLEM.Ui.Elements.Element.Style
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Style
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 337
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    This Element's current <xref href="MLEM.Ui.Style.UiStyle" data-throw-if-not-resolved="false"></xref>.

    When this property is set, <xref href="MLEM.Ui.Elements.Element.InitStyle(MLEM.Ui.Style.UiStyle)" data-throw-if-not-resolved="false"></xref> is called.
  example: []
  syntax:
    content: public StyleProp<UiStyle> Style { get; set; }
    parameters: []
    return:
      type: MLEM.Ui.Style.StyleProp{MLEM.Ui.Style.UiStyle}
    content.vb: Public Property Style As StyleProp(Of UiStyle)
  overload: MLEM.Ui.Elements.Element.Style*
- uid: MLEM.Ui.Elements.Element.SelectionIndicator
  commentId: F:MLEM.Ui.Elements.Element.SelectionIndicator
  id: SelectionIndicator
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: SelectionIndicator
  nameWithType: Element.SelectionIndicator
  fullName: MLEM.Ui.Elements.Element.SelectionIndicator
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: SelectionIndicator
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 348
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: A style property that contains the selection indicator that is displayed on this element if it is the <xref href="MLEM.Ui.RootElement.SelectedElement" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public StyleProp<NinePatch> SelectionIndicator
    return:
      type: MLEM.Ui.Style.StyleProp{MLEM.Textures.NinePatch}
    content.vb: Public SelectionIndicator As StyleProp(Of NinePatch)
- uid: MLEM.Ui.Elements.Element.ActionSound
  commentId: F:MLEM.Ui.Elements.Element.ActionSound
  id: ActionSound
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ActionSound
  nameWithType: Element.ActionSound
  fullName: MLEM.Ui.Elements.Element.ActionSound
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ActionSound
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 352
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: A style property that contains the sound effect that is played when this element's <xref href="MLEM.Ui.Elements.Element.OnPressed" data-throw-if-not-resolved="false"></xref> is called
  example: []
  syntax:
    content: public StyleProp<SoundEffectInfo> ActionSound
    return:
      type: MLEM.Ui.Style.StyleProp{MLEM.Sound.SoundEffectInfo}
    content.vb: Public ActionSound As StyleProp(Of SoundEffectInfo)
- uid: MLEM.Ui.Elements.Element.SecondActionSound
  commentId: F:MLEM.Ui.Elements.Element.SecondActionSound
  id: SecondActionSound
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: SecondActionSound
  nameWithType: Element.SecondActionSound
  fullName: MLEM.Ui.Elements.Element.SecondActionSound
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: SecondActionSound
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 356
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: A style property that contains the sound effect that is played when this element's <xref href="MLEM.Ui.Elements.Element.OnSecondaryPressed" data-throw-if-not-resolved="false"></xref> is called
  example: []
  syntax:
    content: public StyleProp<SoundEffectInfo> SecondActionSound
    return:
      type: MLEM.Ui.Style.StyleProp{MLEM.Sound.SoundEffectInfo}
    content.vb: Public SecondActionSound As StyleProp(Of SoundEffectInfo)
- uid: MLEM.Ui.Elements.Element.Padding
  commentId: F:MLEM.Ui.Elements.Element.Padding
  id: Padding
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Padding
  nameWithType: Element.Padding
  fullName: MLEM.Ui.Elements.Element.Padding
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Padding
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 361
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    The padding that this element has.

    The padding is subtracted from the element's <xref href="MLEM.Ui.Elements.Element.Size" data-throw-if-not-resolved="false"></xref>, and it is an area that the element does not extend into. This means that this element's resulting <xref href="MLEM.Ui.Elements.Element.DisplayArea" data-throw-if-not-resolved="false"></xref> does not include this padding.
  example: []
  syntax:
    content: public StyleProp<Padding> Padding
    return:
      type: MLEM.Ui.Style.StyleProp{MLEM.Maths.Padding}
    content.vb: Public Padding As StyleProp(Of Padding)
- uid: MLEM.Ui.Elements.Element.ChildPadding
  commentId: P:MLEM.Ui.Elements.Element.ChildPadding
  id: ChildPadding
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ChildPadding
  nameWithType: Element.ChildPadding
  fullName: MLEM.Ui.Elements.Element.ChildPadding
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ChildPadding
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 366
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    The child padding that this element has.

    The child padding moves any <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref> added to this element inwards by the given amount in each direction.
  example: []
  syntax:
    content: public StyleProp<Padding> ChildPadding { get; set; }
    parameters: []
    return:
      type: MLEM.Ui.Style.StyleProp{MLEM.Maths.Padding}
    content.vb: Public Property ChildPadding As StyleProp(Of Padding)
  overload: MLEM.Ui.Elements.Element.ChildPadding*
- uid: MLEM.Ui.Elements.Element.MouseEnterAnimation
  commentId: F:MLEM.Ui.Elements.Element.MouseEnterAnimation
  id: MouseEnterAnimation
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: MouseEnterAnimation
  nameWithType: Element.MouseEnterAnimation
  fullName: MLEM.Ui.Elements.Element.MouseEnterAnimation
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: MouseEnterAnimation
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 376
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: A <xref href="MLEM.Ui.UiAnimation" data-throw-if-not-resolved="false"></xref> that is played when the mouse enters this element, in <xref href="MLEM.Ui.Elements.Element.OnMouseEnter" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public StyleProp<UiAnimation> MouseEnterAnimation
    return:
      type: MLEM.Ui.Style.StyleProp{MLEM.Ui.UiAnimation}
    content.vb: Public MouseEnterAnimation As StyleProp(Of UiAnimation)
- uid: MLEM.Ui.Elements.Element.MouseExitAnimation
  commentId: F:MLEM.Ui.Elements.Element.MouseExitAnimation
  id: MouseExitAnimation
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: MouseExitAnimation
  nameWithType: Element.MouseExitAnimation
  fullName: MLEM.Ui.Elements.Element.MouseExitAnimation
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: MouseExitAnimation
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 380
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: A <xref href="MLEM.Ui.UiAnimation" data-throw-if-not-resolved="false"></xref> that is played when the mouse exits this element, in <xref href="MLEM.Ui.Elements.Element.OnMouseExit" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public StyleProp<UiAnimation> MouseExitAnimation
    return:
      type: MLEM.Ui.Style.StyleProp{MLEM.Ui.UiAnimation}
    content.vb: Public MouseExitAnimation As StyleProp(Of UiAnimation)
- uid: MLEM.Ui.Elements.Element.OnDrawn
  commentId: F:MLEM.Ui.Elements.Element.OnDrawn
  id: OnDrawn
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnDrawn
  nameWithType: Element.OnDrawn
  fullName: MLEM.Ui.Elements.Element.OnDrawn
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnDrawn
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 385
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Event that is called after this element is drawn, but before its children are drawn
  example: []
  syntax:
    content: public Element.DrawCallback OnDrawn
    return:
      type: MLEM.Ui.Elements.Element.DrawCallback
    content.vb: Public OnDrawn As Element.DrawCallback
- uid: MLEM.Ui.Elements.Element.OnUpdated
  commentId: F:MLEM.Ui.Elements.Element.OnUpdated
  id: OnUpdated
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnUpdated
  nameWithType: Element.OnUpdated
  fullName: MLEM.Ui.Elements.Element.OnUpdated
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnUpdated
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 389
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Event that is called when this element is updated
  example: []
  syntax:
    content: public Element.TimeCallback OnUpdated
    return:
      type: MLEM.Ui.Elements.Element.TimeCallback
    content.vb: Public OnUpdated As Element.TimeCallback
- uid: MLEM.Ui.Elements.Element.OnPressed
  commentId: F:MLEM.Ui.Elements.Element.OnPressed
  id: OnPressed
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnPressed
  nameWithType: Element.OnPressed
  fullName: MLEM.Ui.Elements.Element.OnPressed
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnPressed
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 393
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Event that is called when this element is pressed
  example: []
  syntax:
    content: public Element.GenericCallback OnPressed
    return:
      type: MLEM.Ui.Elements.Element.GenericCallback
    content.vb: Public OnPressed As Element.GenericCallback
- uid: MLEM.Ui.Elements.Element.OnSecondaryPressed
  commentId: F:MLEM.Ui.Elements.Element.OnSecondaryPressed
  id: OnSecondaryPressed
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnSecondaryPressed
  nameWithType: Element.OnSecondaryPressed
  fullName: MLEM.Ui.Elements.Element.OnSecondaryPressed
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnSecondaryPressed
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 397
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Event that is called when this element is pressed using the secondary action
  example: []
  syntax:
    content: public Element.GenericCallback OnSecondaryPressed
    return:
      type: MLEM.Ui.Elements.Element.GenericCallback
    content.vb: Public OnSecondaryPressed As Element.GenericCallback
- uid: MLEM.Ui.Elements.Element.OnSelected
  commentId: F:MLEM.Ui.Elements.Element.OnSelected
  id: OnSelected
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnSelected
  nameWithType: Element.OnSelected
  fullName: MLEM.Ui.Elements.Element.OnSelected
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnSelected
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 401
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Event that is called when this element's <xref href="MLEM.Ui.Elements.Element.IsSelected" data-throw-if-not-resolved="false"></xref> is turned true
  example: []
  syntax:
    content: public Element.GenericCallback OnSelected
    return:
      type: MLEM.Ui.Elements.Element.GenericCallback
    content.vb: Public OnSelected As Element.GenericCallback
- uid: MLEM.Ui.Elements.Element.OnDeselected
  commentId: F:MLEM.Ui.Elements.Element.OnDeselected
  id: OnDeselected
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnDeselected
  nameWithType: Element.OnDeselected
  fullName: MLEM.Ui.Elements.Element.OnDeselected
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnDeselected
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 405
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Event that is called when this element's <xref href="MLEM.Ui.Elements.Element.IsSelected" data-throw-if-not-resolved="false"></xref> is turned false
  example: []
  syntax:
    content: public Element.GenericCallback OnDeselected
    return:
      type: MLEM.Ui.Elements.Element.GenericCallback
    content.vb: Public OnDeselected As Element.GenericCallback
- uid: MLEM.Ui.Elements.Element.OnMouseEnter
  commentId: F:MLEM.Ui.Elements.Element.OnMouseEnter
  id: OnMouseEnter
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnMouseEnter
  nameWithType: Element.OnMouseEnter
  fullName: MLEM.Ui.Elements.Element.OnMouseEnter
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnMouseEnter
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 409
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Event that is called when this element starts being moused over
  example: []
  syntax:
    content: public Element.GenericCallback OnMouseEnter
    return:
      type: MLEM.Ui.Elements.Element.GenericCallback
    content.vb: Public OnMouseEnter As Element.GenericCallback
- uid: MLEM.Ui.Elements.Element.OnMouseExit
  commentId: F:MLEM.Ui.Elements.Element.OnMouseExit
  id: OnMouseExit
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnMouseExit
  nameWithType: Element.OnMouseExit
  fullName: MLEM.Ui.Elements.Element.OnMouseExit
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnMouseExit
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 413
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Event that is called when this element stops being moused over
  example: []
  syntax:
    content: public Element.GenericCallback OnMouseExit
    return:
      type: MLEM.Ui.Elements.Element.GenericCallback
    content.vb: Public OnMouseExit As Element.GenericCallback
- uid: MLEM.Ui.Elements.Element.OnTouchEnter
  commentId: F:MLEM.Ui.Elements.Element.OnTouchEnter
  id: OnTouchEnter
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnTouchEnter
  nameWithType: Element.OnTouchEnter
  fullName: MLEM.Ui.Elements.Element.OnTouchEnter
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnTouchEnter
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 417
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Event that is called when this element starts being touched
  example: []
  syntax:
    content: public Element.GenericCallback OnTouchEnter
    return:
      type: MLEM.Ui.Elements.Element.GenericCallback
    content.vb: Public OnTouchEnter As Element.GenericCallback
- uid: MLEM.Ui.Elements.Element.OnTouchExit
  commentId: F:MLEM.Ui.Elements.Element.OnTouchExit
  id: OnTouchExit
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnTouchExit
  nameWithType: Element.OnTouchExit
  fullName: MLEM.Ui.Elements.Element.OnTouchExit
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnTouchExit
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 421
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Event that is called when this element stops being touched
  example: []
  syntax:
    content: public Element.GenericCallback OnTouchExit
    return:
      type: MLEM.Ui.Elements.Element.GenericCallback
    content.vb: Public OnTouchExit As Element.GenericCallback
- uid: MLEM.Ui.Elements.Element.OnTextInput
  commentId: F:MLEM.Ui.Elements.Element.OnTextInput
  id: OnTextInput
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnTextInput
  nameWithType: Element.OnTextInput
  fullName: MLEM.Ui.Elements.Element.OnTextInput
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnTextInput
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 428
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Event that is called when text input is made.

    When an element uses this event, it should call <xref href="MLEM.Misc.MlemPlatform.EnsureExists" data-throw-if-not-resolved="false"></xref> on construction to ensure that the MLEM platform is initialized.

    Note that this event is called for every element, even if it is not selected.

    Also note that if the active <xref href="MLEM.Misc.MlemPlatform" data-throw-if-not-resolved="false"></xref> uses an on-screen keyboard, this event is never called.
  example: []
  syntax:
    content: public Element.TextInputCallback OnTextInput
    return:
      type: MLEM.Ui.Elements.Element.TextInputCallback
    content.vb: Public OnTextInput As Element.TextInputCallback
- uid: MLEM.Ui.Elements.Element.OnAreaUpdated
  commentId: F:MLEM.Ui.Elements.Element.OnAreaUpdated
  id: OnAreaUpdated
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnAreaUpdated
  nameWithType: Element.OnAreaUpdated
  fullName: MLEM.Ui.Elements.Element.OnAreaUpdated
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnAreaUpdated
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 432
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Event that is called when this element's <xref href="MLEM.Ui.Elements.Element.DisplayArea" data-throw-if-not-resolved="false"></xref> is changed.
  example: []
  syntax:
    content: public Element.GenericCallback OnAreaUpdated
    return:
      type: MLEM.Ui.Elements.Element.GenericCallback
    content.vb: Public OnAreaUpdated As Element.GenericCallback
- uid: MLEM.Ui.Elements.Element.OnStyleInit
  commentId: F:MLEM.Ui.Elements.Element.OnStyleInit
  id: OnStyleInit
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnStyleInit
  nameWithType: Element.OnStyleInit
  fullName: MLEM.Ui.Elements.Element.OnStyleInit
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnStyleInit
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 436
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Event that is called when this element's <xref href="MLEM.Ui.Elements.Element.InitStyle(MLEM.Ui.Style.UiStyle)" data-throw-if-not-resolved="false"></xref> method is called while setting the <xref href="MLEM.Ui.Elements.Element.Style" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Element.GenericCallback OnStyleInit
    return:
      type: MLEM.Ui.Elements.Element.GenericCallback
    content.vb: Public OnStyleInit As Element.GenericCallback
- uid: MLEM.Ui.Elements.Element.OnMousedElementChanged
  commentId: F:MLEM.Ui.Elements.Element.OnMousedElementChanged
  id: OnMousedElementChanged
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnMousedElementChanged
  nameWithType: Element.OnMousedElementChanged
  fullName: MLEM.Ui.Elements.Element.OnMousedElementChanged
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnMousedElementChanged
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 441
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Event that is called when the element that is currently being moused changes within the ui system.

    Note that the event fired doesn't necessarily correlate to this specific element.
  example: []
  syntax:
    content: public Element.OtherElementCallback OnMousedElementChanged
    return:
      type: MLEM.Ui.Elements.Element.OtherElementCallback
    content.vb: Public OnMousedElementChanged As Element.OtherElementCallback
- uid: MLEM.Ui.Elements.Element.OnTouchedElementChanged
  commentId: F:MLEM.Ui.Elements.Element.OnTouchedElementChanged
  id: OnTouchedElementChanged
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnTouchedElementChanged
  nameWithType: Element.OnTouchedElementChanged
  fullName: MLEM.Ui.Elements.Element.OnTouchedElementChanged
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnTouchedElementChanged
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 446
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Event that is called when the element that is currently being touched changes within the ui system.

    Note that the event fired doesn't necessarily correlate to this specific element.
  example: []
  syntax:
    content: public Element.OtherElementCallback OnTouchedElementChanged
    return:
      type: MLEM.Ui.Elements.Element.OtherElementCallback
    content.vb: Public OnTouchedElementChanged As Element.OtherElementCallback
- uid: MLEM.Ui.Elements.Element.OnSelectedElementChanged
  commentId: F:MLEM.Ui.Elements.Element.OnSelectedElementChanged
  id: OnSelectedElementChanged
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnSelectedElementChanged
  nameWithType: Element.OnSelectedElementChanged
  fullName: MLEM.Ui.Elements.Element.OnSelectedElementChanged
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnSelectedElementChanged
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 451
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Event that is called when the element that is currently selected changes within the ui system.

    Note that the event fired doesn't necessarily correlate to this specific element.
  example: []
  syntax:
    content: public Element.OtherElementCallback OnSelectedElementChanged
    return:
      type: MLEM.Ui.Elements.Element.OtherElementCallback
    content.vb: Public OnSelectedElementChanged As Element.OtherElementCallback
- uid: MLEM.Ui.Elements.Element.GetTabNextElement
  commentId: F:MLEM.Ui.Elements.Element.GetTabNextElement
  id: GetTabNextElement
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: GetTabNextElement
  nameWithType: Element.GetTabNextElement
  fullName: MLEM.Ui.Elements.Element.GetTabNextElement
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetTabNextElement
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 456
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Event that is called when the next element to select when pressing tab is calculated.

    To cause a different element than the default one to be selected, return it during this event.
  example: []
  syntax:
    content: public Element.TabNextElementCallback GetTabNextElement
    return:
      type: MLEM.Ui.Elements.Element.TabNextElementCallback
    content.vb: Public GetTabNextElement As Element.TabNextElementCallback
- uid: MLEM.Ui.Elements.Element.GetGamepadNextElement
  commentId: F:MLEM.Ui.Elements.Element.GetGamepadNextElement
  id: GetGamepadNextElement
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: GetGamepadNextElement
  nameWithType: Element.GetGamepadNextElement
  fullName: MLEM.Ui.Elements.Element.GetGamepadNextElement
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetGamepadNextElement
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 461
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Event that is called when the next element to select when using gamepad input is calculated.

    To cause a different element than the default one to be selected, return it during this event.
  example: []
  syntax:
    content: public Element.GamepadNextElementCallback GetGamepadNextElement
    return:
      type: MLEM.Ui.Elements.Element.GamepadNextElementCallback
    content.vb: Public GetGamepadNextElement As Element.GamepadNextElementCallback
- uid: MLEM.Ui.Elements.Element.OnChildAdded
  commentId: F:MLEM.Ui.Elements.Element.OnChildAdded
  id: OnChildAdded
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnChildAdded
  nameWithType: Element.OnChildAdded
  fullName: MLEM.Ui.Elements.Element.OnChildAdded
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnChildAdded
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 466
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Event that is called when a child is added to this element using <xref href="MLEM.Ui.Elements.Element.AddChild%60%601(%60%600%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>

    Note that, while this event is only called for immediate children of this element, <xref href="MLEM.Ui.RootElement.OnElementAdded" data-throw-if-not-resolved="false"></xref> is called for all children and grandchildren.
  example: []
  syntax:
    content: public Element.OtherElementCallback OnChildAdded
    return:
      type: MLEM.Ui.Elements.Element.OtherElementCallback
    content.vb: Public OnChildAdded As Element.OtherElementCallback
- uid: MLEM.Ui.Elements.Element.OnChildRemoved
  commentId: F:MLEM.Ui.Elements.Element.OnChildRemoved
  id: OnChildRemoved
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnChildRemoved
  nameWithType: Element.OnChildRemoved
  fullName: MLEM.Ui.Elements.Element.OnChildRemoved
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnChildRemoved
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 471
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Event that is called when a child is removed from this element using <xref href="MLEM.Ui.Elements.Element.RemoveChild(MLEM.Ui.Elements.Element)" data-throw-if-not-resolved="false"></xref>.

    Note that, while this event is only called for immediate children of this element, <xref href="MLEM.Ui.RootElement.OnElementRemoved" data-throw-if-not-resolved="false"></xref> is called for all children and grandchildren.
  example: []
  syntax:
    content: public Element.OtherElementCallback OnChildRemoved
    return:
      type: MLEM.Ui.Elements.Element.OtherElementCallback
    content.vb: Public OnChildRemoved As Element.OtherElementCallback
- uid: MLEM.Ui.Elements.Element.OnAddedToUi
  commentId: F:MLEM.Ui.Elements.Element.OnAddedToUi
  id: OnAddedToUi
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnAddedToUi
  nameWithType: Element.OnAddedToUi
  fullName: MLEM.Ui.Elements.Element.OnAddedToUi
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnAddedToUi
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 475
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Event that is called when this element is added to a <xref href="MLEM.Ui.UiSystem" data-throw-if-not-resolved="false"></xref>, that is, when this element's <xref href="MLEM.Ui.Elements.Element.System" data-throw-if-not-resolved="false"></xref> is set to a non-<a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> value.
  example: []
  syntax:
    content: public Element.GenericCallback OnAddedToUi
    return:
      type: MLEM.Ui.Elements.Element.GenericCallback
    content.vb: Public OnAddedToUi As Element.GenericCallback
- uid: MLEM.Ui.Elements.Element.OnRemovedFromUi
  commentId: F:MLEM.Ui.Elements.Element.OnRemovedFromUi
  id: OnRemovedFromUi
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnRemovedFromUi
  nameWithType: Element.OnRemovedFromUi
  fullName: MLEM.Ui.Elements.Element.OnRemovedFromUi
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnRemovedFromUi
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 479
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Event that is called when this element is removed from a <xref href="MLEM.Ui.UiSystem" data-throw-if-not-resolved="false"></xref>, that is, when this element's <xref href="MLEM.Ui.Elements.Element.System" data-throw-if-not-resolved="false"></xref> is set to <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  example: []
  syntax:
    content: public Element.GenericCallback OnRemovedFromUi
    return:
      type: MLEM.Ui.Elements.Element.GenericCallback
    content.vb: Public OnRemovedFromUi As Element.GenericCallback
- uid: MLEM.Ui.Elements.Element.Children
  commentId: F:MLEM.Ui.Elements.Element.Children
  id: Children
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: Element.Children
  fullName: MLEM.Ui.Elements.Element.Children
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Children
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 485
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    A list of all of this element's direct children.

    Use <xref href="MLEM.Ui.Elements.Element.AddChild%60%601(%60%600%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Ui.Elements.Element.RemoveChild(MLEM.Ui.Elements.Element)" data-throw-if-not-resolved="false"></xref> to manipulate this list while calling all of the necessary callbacks.
  example: []
  syntax:
    content: public readonly IList<Element> Children
    return:
      type: System.Collections.Generic.IList{MLEM.Ui.Elements.Element}
    content.vb: Public ReadOnly Children As IList(Of Element)
- uid: MLEM.Ui.Elements.Element.PlayingAnimations
  commentId: F:MLEM.Ui.Elements.Element.PlayingAnimations
  id: PlayingAnimations
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: PlayingAnimations
  nameWithType: Element.PlayingAnimations
  fullName: MLEM.Ui.Elements.Element.PlayingAnimations
  type: Field
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: PlayingAnimations
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 490
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    A list of all of the <xref href="MLEM.Ui.UiAnimation" data-throw-if-not-resolved="false"></xref> instances that are currently playing.

    You can modify this collection through <xref href="MLEM.Ui.Elements.Element.PlayAnimation(MLEM.Ui.UiAnimation)" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Ui.Elements.Element.StopAnimation(MLEM.Ui.UiAnimation)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected readonly List<UiAnimation> PlayingAnimations
    return:
      type: System.Collections.Generic.List{MLEM.Ui.UiAnimation}
    content.vb: Protected ReadOnly PlayingAnimations As List(Of UiAnimation)
- uid: MLEM.Ui.Elements.Element.SortedChildren
  commentId: P:MLEM.Ui.Elements.Element.SortedChildren
  id: SortedChildren
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: SortedChildren
  nameWithType: Element.SortedChildren
  fullName: MLEM.Ui.Elements.Element.SortedChildren
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: SortedChildren
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 495
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: A sorted version of <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref>. The children are sorted by their <xref href="MLEM.Ui.Elements.Element.Priority" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected IList<Element> SortedChildren { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{MLEM.Ui.Elements.Element}
    content.vb: Protected ReadOnly Property SortedChildren As IList(Of Element)
  overload: MLEM.Ui.Elements.Element.SortedChildren*
- uid: MLEM.Ui.Elements.Element.Input
  commentId: P:MLEM.Ui.Elements.Element.Input
  id: Input
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Input
  nameWithType: Element.Input
  fullName: MLEM.Ui.Elements.Element.Input
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Input
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 504
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: The input handler that this element's <xref href="MLEM.Ui.Elements.Element.Controls" data-throw-if-not-resolved="false"></xref> use
  example: []
  syntax:
    content: protected InputHandler Input { get; }
    parameters: []
    return:
      type: MLEM.Input.InputHandler
    content.vb: Protected ReadOnly Property Input As InputHandler
  overload: MLEM.Ui.Elements.Element.Input*
- uid: MLEM.Ui.Elements.Element.ParentArea
  commentId: P:MLEM.Ui.Elements.Element.ParentArea
  id: ParentArea
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ParentArea
  nameWithType: Element.ParentArea
  fullName: MLEM.Ui.Elements.Element.ParentArea
  type: Property
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ParentArea
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 509
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    The <xref href="MLEM.Ui.Elements.Element.ChildPaddedArea" data-throw-if-not-resolved="false"></xref> of this element's <xref href="MLEM.Ui.Elements.Element.Parent" data-throw-if-not-resolved="false"></xref>, or the <xref href="MLEM.Ui.UiSystem.Viewport" data-throw-if-not-resolved="false"></xref> if this element has no parent.

    This value is the one that is passed to <xref href="MLEM.Ui.Elements.Element.CalcActualSize(MLEM.Maths.RectangleF)" data-throw-if-not-resolved="false"></xref> during <xref href="MLEM.Ui.Elements.Element.ForceUpdateArea" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected RectangleF ParentArea { get; }
    parameters: []
    return:
      type: MLEM.Maths.RectangleF
    content.vb: Protected ReadOnly Property ParentArea As RectangleF
  overload: MLEM.Ui.Elements.Element.ParentArea*
- uid: MLEM.Ui.Elements.Element.#ctor(MLEM.Ui.Anchor,Microsoft.Xna.Framework.Vector2)
  commentId: M:MLEM.Ui.Elements.Element.#ctor(MLEM.Ui.Anchor,Microsoft.Xna.Framework.Vector2)
  id: '#ctor(MLEM.Ui.Anchor,Microsoft.Xna.Framework.Vector2)'
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Element(Anchor, Vector2)
  nameWithType: Element.Element(Anchor, Vector2)
  fullName: MLEM.Ui.Elements.Element.Element(MLEM.Ui.Anchor, Microsoft.Xna.Framework.Vector2)
  type: Constructor
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 538
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Creates a new element with the given anchor and size and sets up some default event reactions.
  example: []
  syntax:
    content: protected Element(Anchor anchor, Vector2 size)
    parameters:
    - id: anchor
      type: MLEM.Ui.Anchor
      description: This element's <xref href="MLEM.Ui.Elements.Element.Anchor" data-throw-if-not-resolved="false"></xref>
    - id: size
      type: Microsoft.Xna.Framework.Vector2
      description: This element's default <xref href="MLEM.Ui.Elements.Element.Size" data-throw-if-not-resolved="false"></xref>
    content.vb: Protected Sub New(anchor As Anchor, size As Vector2)
  overload: MLEM.Ui.Elements.Element.#ctor*
  nameWithType.vb: Element.New(Anchor, Vector2)
  fullName.vb: MLEM.Ui.Elements.Element.New(MLEM.Ui.Anchor, Microsoft.Xna.Framework.Vector2)
  name.vb: New(Anchor, Vector2)
- uid: MLEM.Ui.Elements.Element.AddChild``1(``0,System.Int32)
  commentId: M:MLEM.Ui.Elements.Element.AddChild``1(``0,System.Int32)
  id: AddChild``1(``0,System.Int32)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: AddChild<T>(T, int)
  nameWithType: Element.AddChild<T>(T, int)
  fullName: MLEM.Ui.Elements.Element.AddChild<T>(T, int)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: AddChild
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 565
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Adds a child to this element.
  example: []
  syntax:
    content: 'public virtual T AddChild<T>(T element, int index = -1) where T : Element'
    parameters:
    - id: element
      type: '{T}'
      description: The child element to add
    - id: index
      type: System.Int32
      description: The index to add the child at, or -1 to add it to the end of the <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref> list
    typeParameters:
    - id: T
      description: The type of child to add
    return:
      type: '{T}'
      description: This element, for chaining
    content.vb: Public Overridable Function AddChild(Of T As Element)(element As T, index As Integer = -1) As T
  overload: MLEM.Ui.Elements.Element.AddChild*
  nameWithType.vb: Element.AddChild(Of T)(T, Integer)
  fullName.vb: MLEM.Ui.Elements.Element.AddChild(Of T)(T, Integer)
  name.vb: AddChild(Of T)(T, Integer)
- uid: MLEM.Ui.Elements.Element.RemoveChild(MLEM.Ui.Elements.Element)
  commentId: M:MLEM.Ui.Elements.Element.RemoveChild(MLEM.Ui.Elements.Element)
  id: RemoveChild(MLEM.Ui.Elements.Element)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: RemoveChild(Element)
  nameWithType: Element.RemoveChild(Element)
  fullName: MLEM.Ui.Elements.Element.RemoveChild(MLEM.Ui.Elements.Element)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: RemoveChild
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 581
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Removes the given child from this element.
  example: []
  syntax:
    content: public virtual void RemoveChild(Element element)
    parameters:
    - id: element
      type: MLEM.Ui.Elements.Element
      description: The child element to remove
    content.vb: Public Overridable Sub RemoveChild(element As Element)
  overload: MLEM.Ui.Elements.Element.RemoveChild*
- uid: MLEM.Ui.Elements.Element.RemoveChildren(System.Func{MLEM.Ui.Elements.Element,System.Boolean})
  commentId: M:MLEM.Ui.Elements.Element.RemoveChildren(System.Func{MLEM.Ui.Elements.Element,System.Boolean})
  id: RemoveChildren(System.Func{MLEM.Ui.Elements.Element,System.Boolean})
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: RemoveChildren(Func<Element, bool>)
  nameWithType: Element.RemoveChildren(Func<Element, bool>)
  fullName: MLEM.Ui.Elements.Element.RemoveChildren(System.Func<MLEM.Ui.Elements.Element, bool>)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: RemoveChildren
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 598
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Removes all children from this element that match the given condition.
  example: []
  syntax:
    content: public virtual void RemoveChildren(Func<Element, bool> condition = null)
    parameters:
    - id: condition
      type: System.Func{MLEM.Ui.Elements.Element,System.Boolean}
      description: The condition that determines if a child should be removed
    content.vb: Public Overridable Sub RemoveChildren(condition As Func(Of Element, Boolean) = Nothing)
  overload: MLEM.Ui.Elements.Element.RemoveChildren*
  nameWithType.vb: Element.RemoveChildren(Func(Of Element, Boolean))
  fullName.vb: MLEM.Ui.Elements.Element.RemoveChildren(System.Func(Of MLEM.Ui.Elements.Element, Boolean))
  name.vb: RemoveChildren(Func(Of Element, Boolean))
- uid: MLEM.Ui.Elements.Element.SetSortedChildrenDirty
  commentId: M:MLEM.Ui.Elements.Element.SetSortedChildrenDirty
  id: SetSortedChildrenDirty
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: SetSortedChildrenDirty()
  nameWithType: Element.SetSortedChildrenDirty()
  fullName: MLEM.Ui.Elements.Element.SetSortedChildrenDirty()
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: SetSortedChildrenDirty
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 610
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Causes <xref href="MLEM.Ui.Elements.Element.SortedChildren" data-throw-if-not-resolved="false"></xref> to be recalculated as soon as possible.
  example: []
  syntax:
    content: public void SetSortedChildrenDirty()
    content.vb: Public Sub SetSortedChildrenDirty()
  overload: MLEM.Ui.Elements.Element.SetSortedChildrenDirty*
- uid: MLEM.Ui.Elements.Element.UpdateSortedChildrenIfDirty
  commentId: M:MLEM.Ui.Elements.Element.UpdateSortedChildrenIfDirty
  id: UpdateSortedChildrenIfDirty
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: UpdateSortedChildrenIfDirty()
  nameWithType: Element.UpdateSortedChildrenIfDirty()
  fullName: MLEM.Ui.Elements.Element.UpdateSortedChildrenIfDirty()
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: UpdateSortedChildrenIfDirty
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 617
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Updates the <xref href="MLEM.Ui.Elements.Element.SortedChildren" data-throw-if-not-resolved="false"></xref> list if <xref href="MLEM.Ui.Elements.Element.SetSortedChildrenDirty" data-throw-if-not-resolved="false"></xref> is true.
  example: []
  syntax:
    content: public void UpdateSortedChildrenIfDirty()
    content.vb: Public Sub UpdateSortedChildrenIfDirty()
  overload: MLEM.Ui.Elements.Element.UpdateSortedChildrenIfDirty*
- uid: MLEM.Ui.Elements.Element.ForceUpdateSortedChildren
  commentId: M:MLEM.Ui.Elements.Element.ForceUpdateSortedChildren
  id: ForceUpdateSortedChildren
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ForceUpdateSortedChildren()
  nameWithType: Element.ForceUpdateSortedChildren()
  fullName: MLEM.Ui.Elements.Element.ForceUpdateSortedChildren()
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ForceUpdateSortedChildren
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 625
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Forces an update of the <xref href="MLEM.Ui.Elements.Element.SortedChildren" data-throw-if-not-resolved="false"></xref> list.
  example: []
  syntax:
    content: public virtual void ForceUpdateSortedChildren()
    content.vb: Public Overridable Sub ForceUpdateSortedChildren()
  overload: MLEM.Ui.Elements.Element.ForceUpdateSortedChildren*
- uid: MLEM.Ui.Elements.Element.SetAreaDirty
  commentId: M:MLEM.Ui.Elements.Element.SetAreaDirty
  id: SetAreaDirty
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: SetAreaDirty()
  nameWithType: Element.SetAreaDirty()
  fullName: MLEM.Ui.Elements.Element.SetAreaDirty()
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: SetAreaDirty
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 634
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Causes this element's <xref href="MLEM.Ui.Elements.Element.Area" data-throw-if-not-resolved="false"></xref> to be recalculated as soon as possible.

    If this element is auto-anchored or its parent automatically changes its size based on its children, this element's parent's area is also marked dirty.
  example: []
  syntax:
    content: public void SetAreaDirty()
    content.vb: Public Sub SetAreaDirty()
  overload: MLEM.Ui.Elements.Element.SetAreaDirty*
- uid: MLEM.Ui.Elements.Element.UpdateAreaIfDirty
  commentId: M:MLEM.Ui.Elements.Element.UpdateAreaIfDirty
  id: UpdateAreaIfDirty
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: UpdateAreaIfDirty()
  nameWithType: Element.UpdateAreaIfDirty()
  fullName: MLEM.Ui.Elements.Element.UpdateAreaIfDirty()
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: UpdateAreaIfDirty
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 643
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Updates this element's <xref href="MLEM.Ui.Elements.Element.Area" data-throw-if-not-resolved="false"></xref> and all of its <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref> by calling <xref href="MLEM.Ui.Elements.Element.ForceUpdateArea" data-throw-if-not-resolved="false"></xref> if <xref href="MLEM.Ui.Elements.Element.AreaDirty" data-throw-if-not-resolved="false"></xref> is true.
  example: []
  syntax:
    content: public bool UpdateAreaIfDirty()
    return:
      type: System.Boolean
      description: Whether <xref href="MLEM.Ui.Elements.Element.AreaDirty" data-throw-if-not-resolved="false"></xref> was true and <xref href="MLEM.Ui.Elements.Element.ForceUpdateArea" data-throw-if-not-resolved="false"></xref> was called
    content.vb: Public Function UpdateAreaIfDirty() As Boolean
  overload: MLEM.Ui.Elements.Element.UpdateAreaIfDirty*
- uid: MLEM.Ui.Elements.Element.ForceUpdateArea
  commentId: M:MLEM.Ui.Elements.Element.ForceUpdateArea
  id: ForceUpdateArea
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ForceUpdateArea()
  nameWithType: Element.ForceUpdateArea()
  fullName: MLEM.Ui.Elements.Element.ForceUpdateArea()
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ForceUpdateArea
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 655
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Forces this element's <xref href="MLEM.Ui.Elements.Element.Area" data-throw-if-not-resolved="false"></xref> to be updated if it is not <xref href="MLEM.Ui.Elements.Element.IsHidden" data-throw-if-not-resolved="false"></xref>.

    This method also updates all of this element's <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref>'s areas.
  example: []
  syntax:
    content: public virtual void ForceUpdateArea()
    content.vb: Public Overridable Sub ForceUpdateArea()
  overload: MLEM.Ui.Elements.Element.ForceUpdateArea*
- uid: MLEM.Ui.Elements.Element.SetAreaAndUpdateChildren(MLEM.Maths.RectangleF)
  commentId: M:MLEM.Ui.Elements.Element.SetAreaAndUpdateChildren(MLEM.Maths.RectangleF)
  id: SetAreaAndUpdateChildren(MLEM.Maths.RectangleF)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: SetAreaAndUpdateChildren(RectangleF)
  nameWithType: Element.SetAreaAndUpdateChildren(RectangleF)
  fullName: MLEM.Ui.Elements.Element.SetAreaAndUpdateChildren(MLEM.Maths.RectangleF)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: SetAreaAndUpdateChildren
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 833
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Sets this element's <xref href="MLEM.Ui.Elements.Element.Area" data-throw-if-not-resolved="false"></xref> to the given <xref href="MLEM.Maths.RectangleF" data-throw-if-not-resolved="false"></xref> and invokes the <xref href="MLEM.Ui.UiSystem.OnElementAreaUpdated" data-throw-if-not-resolved="false"></xref> event.

    This method also updates all of this element's <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref>'s areas.

    Note that this method does not take into account any auto-sizing, anchoring or positioning, and so it should be used sparingly, if at all.
  example: []
  syntax:
    content: public virtual void SetAreaAndUpdateChildren(RectangleF area)
    parameters:
    - id: area
      type: MLEM.Maths.RectangleF
    content.vb: Public Overridable Sub SetAreaAndUpdateChildren(area As RectangleF)
  overload: MLEM.Ui.Elements.Element.SetAreaAndUpdateChildren*
  seealso:
  - linkId: MLEM.Ui.Elements.Element.ForceUpdateArea
    commentId: M:MLEM.Ui.Elements.Element.ForceUpdateArea
- uid: MLEM.Ui.Elements.Element.CalcActualSize(MLEM.Maths.RectangleF)
  commentId: M:MLEM.Ui.Elements.Element.CalcActualSize(MLEM.Maths.RectangleF)
  id: CalcActualSize(MLEM.Maths.RectangleF)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: CalcActualSize(RectangleF)
  nameWithType: Element.CalcActualSize(RectangleF)
  fullName: MLEM.Ui.Elements.Element.CalcActualSize(MLEM.Maths.RectangleF)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CalcActualSize
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 847
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Calculates the actual size that this element should take up, based on the area that its parent encompasses.

    By default, this is based on the information specified in <xref href="MLEM.Ui.Elements.Element.Size" data-throw-if-not-resolved="false"></xref>'s documentation.
  example: []
  syntax:
    content: protected virtual Vector2 CalcActualSize(RectangleF parentArea)
    parameters:
    - id: parentArea
      type: MLEM.Maths.RectangleF
      description: This parent's area, or the ui system's viewport if it has no parent
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The actual size of this element, taking <xref href="MLEM.Ui.Elements.Element.Scale" data-throw-if-not-resolved="false"></xref> into account
    content.vb: Protected Overridable Function CalcActualSize(parentArea As RectangleF) As Vector2
  overload: MLEM.Ui.Elements.Element.CalcActualSize*
- uid: MLEM.Ui.Elements.Element.GetAreaForAutoAnchors
  commentId: M:MLEM.Ui.Elements.Element.GetAreaForAutoAnchors
  id: GetAreaForAutoAnchors
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: GetAreaForAutoAnchors()
  nameWithType: Element.GetAreaForAutoAnchors()
  fullName: MLEM.Ui.Elements.Element.GetAreaForAutoAnchors()
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetAreaForAutoAnchors
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 862
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Returns the area that should be used for determining where auto-anchoring children should attach.
  example: []
  syntax:
    content: protected virtual RectangleF GetAreaForAutoAnchors()
    return:
      type: MLEM.Maths.RectangleF
      description: The area for auto anchors
    content.vb: Protected Overridable Function GetAreaForAutoAnchors() As RectangleF
  overload: MLEM.Ui.Elements.Element.GetAreaForAutoAnchors*
- uid: MLEM.Ui.Elements.Element.GetLowestChild(System.Func{MLEM.Ui.Elements.Element,System.Boolean},System.Boolean)
  commentId: M:MLEM.Ui.Elements.Element.GetLowestChild(System.Func{MLEM.Ui.Elements.Element,System.Boolean},System.Boolean)
  id: GetLowestChild(System.Func{MLEM.Ui.Elements.Element,System.Boolean},System.Boolean)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: GetLowestChild(Func<Element, bool>, bool)
  nameWithType: Element.GetLowestChild(Func<Element, bool>, bool)
  fullName: MLEM.Ui.Elements.Element.GetLowestChild(System.Func<MLEM.Ui.Elements.Element, bool>, bool)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetLowestChild
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 872
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Returns this element's lowest child element (in terms of y position) that matches the given condition.
  example: []
  syntax:
    content: public Element GetLowestChild(Func<Element, bool> condition = null, bool total = false)
    parameters:
    - id: condition
      type: System.Func{MLEM.Ui.Elements.Element,System.Boolean}
      description: The condition to match
    - id: total
      type: System.Boolean
      description: Whether to evaluate based on the child's <xref href="MLEM.Ui.Elements.Element.GetTotalCoveredArea(System.Boolean)" data-throw-if-not-resolved="false"></xref>, rather than its <xref href="MLEM.Ui.Elements.Element.UnscrolledArea" data-throw-if-not-resolved="false"></xref>.
    return:
      type: MLEM.Ui.Elements.Element
      description: The lowest element, or null if no such element exists
    content.vb: Public Function GetLowestChild(condition As Func(Of Element, Boolean) = Nothing, total As Boolean = False) As Element
  overload: MLEM.Ui.Elements.Element.GetLowestChild*
  nameWithType.vb: Element.GetLowestChild(Func(Of Element, Boolean), Boolean)
  fullName.vb: MLEM.Ui.Elements.Element.GetLowestChild(System.Func(Of MLEM.Ui.Elements.Element, Boolean), Boolean)
  name.vb: GetLowestChild(Func(Of Element, Boolean), Boolean)
- uid: MLEM.Ui.Elements.Element.GetRightmostChild(System.Func{MLEM.Ui.Elements.Element,System.Boolean},System.Boolean)
  commentId: M:MLEM.Ui.Elements.Element.GetRightmostChild(System.Func{MLEM.Ui.Elements.Element,System.Boolean},System.Boolean)
  id: GetRightmostChild(System.Func{MLEM.Ui.Elements.Element,System.Boolean},System.Boolean)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: GetRightmostChild(Func<Element, bool>, bool)
  nameWithType: Element.GetRightmostChild(Func<Element, bool>, bool)
  fullName: MLEM.Ui.Elements.Element.GetRightmostChild(System.Func<MLEM.Ui.Elements.Element, bool>, bool)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetRightmostChild
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 894
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Returns this element's rightmost child (in terms of x position) that matches the given condition.
  example: []
  syntax:
    content: public Element GetRightmostChild(Func<Element, bool> condition = null, bool total = false)
    parameters:
    - id: condition
      type: System.Func{MLEM.Ui.Elements.Element,System.Boolean}
      description: The condition to match
    - id: total
      type: System.Boolean
      description: Whether to evaluate based on the child's <xref href="MLEM.Ui.Elements.Element.GetTotalCoveredArea(System.Boolean)" data-throw-if-not-resolved="false"></xref>, rather than its <xref href="MLEM.Ui.Elements.Element.UnscrolledArea" data-throw-if-not-resolved="false"></xref>.
    return:
      type: MLEM.Ui.Elements.Element
      description: The rightmost element, or null if no such element exists
    content.vb: Public Function GetRightmostChild(condition As Func(Of Element, Boolean) = Nothing, total As Boolean = False) As Element
  overload: MLEM.Ui.Elements.Element.GetRightmostChild*
  nameWithType.vb: Element.GetRightmostChild(Func(Of Element, Boolean), Boolean)
  fullName.vb: MLEM.Ui.Elements.Element.GetRightmostChild(System.Func(Of MLEM.Ui.Elements.Element, Boolean), Boolean)
  name.vb: GetRightmostChild(Func(Of Element, Boolean), Boolean)
- uid: MLEM.Ui.Elements.Element.GetLowestOlderSibling(System.Func{MLEM.Ui.Elements.Element,System.Boolean},System.Boolean)
  commentId: M:MLEM.Ui.Elements.Element.GetLowestOlderSibling(System.Func{MLEM.Ui.Elements.Element,System.Boolean},System.Boolean)
  id: GetLowestOlderSibling(System.Func{MLEM.Ui.Elements.Element,System.Boolean},System.Boolean)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: GetLowestOlderSibling(Func<Element, bool>, bool)
  nameWithType: Element.GetLowestOlderSibling(Func<Element, bool>, bool)
  fullName: MLEM.Ui.Elements.Element.GetLowestOlderSibling(System.Func<MLEM.Ui.Elements.Element, bool>, bool)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetLowestOlderSibling
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 917
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Returns this element's lowest sibling that is also older (lower in its parent's <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref> list) than this element that also matches the given condition.

    The returned element's <xref href="MLEM.Ui.Elements.Element.Parent" data-throw-if-not-resolved="false"></xref> will always be equal to this element's <xref href="MLEM.Ui.Elements.Element.Parent" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Element GetLowestOlderSibling(Func<Element, bool> condition = null, bool total = false)
    parameters:
    - id: condition
      type: System.Func{MLEM.Ui.Elements.Element,System.Boolean}
      description: The condition to match
    - id: total
      type: System.Boolean
      description: Whether to evaluate based on the child's <xref href="MLEM.Ui.Elements.Element.GetTotalCoveredArea(System.Boolean)" data-throw-if-not-resolved="false"></xref>, rather than its <xref href="MLEM.Ui.Elements.Element.UnscrolledArea" data-throw-if-not-resolved="false"></xref>.
    return:
      type: MLEM.Ui.Elements.Element
      description: The lowest older sibling of this element, or null if no such element exists
    content.vb: Public Function GetLowestOlderSibling(condition As Func(Of Element, Boolean) = Nothing, total As Boolean = False) As Element
  overload: MLEM.Ui.Elements.Element.GetLowestOlderSibling*
  nameWithType.vb: Element.GetLowestOlderSibling(Func(Of Element, Boolean), Boolean)
  fullName.vb: MLEM.Ui.Elements.Element.GetLowestOlderSibling(System.Func(Of MLEM.Ui.Elements.Element, Boolean), Boolean)
  name.vb: GetLowestOlderSibling(Func(Of Element, Boolean), Boolean)
- uid: MLEM.Ui.Elements.Element.GetOlderSibling(System.Func{MLEM.Ui.Elements.Element,System.Boolean})
  commentId: M:MLEM.Ui.Elements.Element.GetOlderSibling(System.Func{MLEM.Ui.Elements.Element,System.Boolean})
  id: GetOlderSibling(System.Func{MLEM.Ui.Elements.Element,System.Boolean})
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: GetOlderSibling(Func<Element, bool>)
  nameWithType: Element.GetOlderSibling(Func<Element, bool>)
  fullName: MLEM.Ui.Elements.Element.GetOlderSibling(System.Func<MLEM.Ui.Elements.Element, bool>)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetOlderSibling
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 938
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Returns this element's first older sibling that matches the given condition.

    The returned element's <xref href="MLEM.Ui.Elements.Element.Parent" data-throw-if-not-resolved="false"></xref> will always be equal to this element's <xref href="MLEM.Ui.Elements.Element.Parent" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Element GetOlderSibling(Func<Element, bool> condition = null)
    parameters:
    - id: condition
      type: System.Func{MLEM.Ui.Elements.Element,System.Boolean}
      description: The condition to match
    return:
      type: MLEM.Ui.Elements.Element
      description: The older sibling, or null if no such element exists
    content.vb: Public Function GetOlderSibling(condition As Func(Of Element, Boolean) = Nothing) As Element
  overload: MLEM.Ui.Elements.Element.GetOlderSibling*
  nameWithType.vb: Element.GetOlderSibling(Func(Of Element, Boolean))
  fullName.vb: MLEM.Ui.Elements.Element.GetOlderSibling(System.Func(Of MLEM.Ui.Elements.Element, Boolean))
  name.vb: GetOlderSibling(Func(Of Element, Boolean))
- uid: MLEM.Ui.Elements.Element.GetSiblings(System.Func{MLEM.Ui.Elements.Element,System.Boolean})
  commentId: M:MLEM.Ui.Elements.Element.GetSiblings(System.Func{MLEM.Ui.Elements.Element,System.Boolean})
  id: GetSiblings(System.Func{MLEM.Ui.Elements.Element,System.Boolean})
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: GetSiblings(Func<Element, bool>)
  nameWithType: Element.GetSiblings(Func<Element, bool>)
  fullName: MLEM.Ui.Elements.Element.GetSiblings(System.Func<MLEM.Ui.Elements.Element, bool>)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetSiblings
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 958
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Returns all of this element's siblings that match the given condition.

    Siblings are elements that have the same <xref href="MLEM.Ui.Elements.Element.Parent" data-throw-if-not-resolved="false"></xref> as this element.
  example: []
  syntax:
    content: public IEnumerable<Element> GetSiblings(Func<Element, bool> condition = null)
    parameters:
    - id: condition
      type: System.Func{MLEM.Ui.Elements.Element,System.Boolean}
      description: The condition to match
    return:
      type: System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}
      description: This element's siblings
    content.vb: Public Function GetSiblings(condition As Func(Of Element, Boolean) = Nothing) As IEnumerable(Of Element)
  overload: MLEM.Ui.Elements.Element.GetSiblings*
  nameWithType.vb: Element.GetSiblings(Func(Of Element, Boolean))
  fullName.vb: MLEM.Ui.Elements.Element.GetSiblings(System.Func(Of MLEM.Ui.Elements.Element, Boolean))
  name.vb: GetSiblings(Func(Of Element, Boolean))
- uid: MLEM.Ui.Elements.Element.GetChildren``1(System.Func{``0,System.Boolean},System.Boolean,System.Boolean)
  commentId: M:MLEM.Ui.Elements.Element.GetChildren``1(System.Func{``0,System.Boolean},System.Boolean,System.Boolean)
  id: GetChildren``1(System.Func{``0,System.Boolean},System.Boolean,System.Boolean)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: GetChildren<T>(Func<T, bool>, bool, bool)
  nameWithType: Element.GetChildren<T>(Func<T, bool>, bool, bool)
  fullName: MLEM.Ui.Elements.Element.GetChildren<T>(System.Func<T, bool>, bool, bool)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetChildren
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 978
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Returns all of this element's children of the given type that match the given condition.

    Optionally, the entire tree of children (grandchildren) can be searched.
  example: []
  syntax:
    content: 'public IEnumerable<T> GetChildren<T>(Func<T, bool> condition = null, bool regardGrandchildren = false, bool ignoreFalseGrandchildren = false) where T : Element'
    parameters:
    - id: condition
      type: System.Func{{T},System.Boolean}
      description: The condition to match
    - id: regardGrandchildren
      type: System.Boolean
      description: If this value is true, children of children of this element are also searched
    - id: ignoreFalseGrandchildren
      type: System.Boolean
      description: If this value is true, children for which the condition does not match will not have their children searched
    typeParameters:
    - id: T
      description: The type of children to search for
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: All children that match the condition
    content.vb: Public Function GetChildren(Of T As Element)(condition As Func(Of T, Boolean) = Nothing, regardGrandchildren As Boolean = False, ignoreFalseGrandchildren As Boolean = False) As IEnumerable(Of T)
  overload: MLEM.Ui.Elements.Element.GetChildren*
  nameWithType.vb: Element.GetChildren(Of T)(Func(Of T, Boolean), Boolean, Boolean)
  fullName.vb: MLEM.Ui.Elements.Element.GetChildren(Of T)(System.Func(Of T, Boolean), Boolean, Boolean)
  name.vb: GetChildren(Of T)(Func(Of T, Boolean), Boolean, Boolean)
- uid: MLEM.Ui.Elements.Element.GetChildren(System.Func{MLEM.Ui.Elements.Element,System.Boolean},System.Boolean,System.Boolean)
  commentId: M:MLEM.Ui.Elements.Element.GetChildren(System.Func{MLEM.Ui.Elements.Element,System.Boolean},System.Boolean,System.Boolean)
  id: GetChildren(System.Func{MLEM.Ui.Elements.Element,System.Boolean},System.Boolean,System.Boolean)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: GetChildren(Func<Element, bool>, bool, bool)
  nameWithType: Element.GetChildren(Func<Element, bool>, bool, bool)
  fullName: MLEM.Ui.Elements.Element.GetChildren(System.Func<MLEM.Ui.Elements.Element, bool>, bool, bool)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetChildren
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 991
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Returns all of this element's children of the given type that match the given condition.

    Optionally, the entire tree of children (grandchildren) can be searched.
  example: []
  syntax:
    content: public IEnumerable<Element> GetChildren(Func<Element, bool> condition = null, bool regardGrandchildren = false, bool ignoreFalseGrandchildren = false)
    parameters:
    - id: condition
      type: System.Func{MLEM.Ui.Elements.Element,System.Boolean}
      description: The condition to match
    - id: regardGrandchildren
      type: System.Boolean
      description: If this value is true, children of children of this element are also searched
    - id: ignoreFalseGrandchildren
      type: System.Boolean
      description: If this value is true, children for which the condition does not match will not have their children searched
    return:
      type: System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}
      description: All children that match the condition
    content.vb: Public Function GetChildren(condition As Func(Of Element, Boolean) = Nothing, regardGrandchildren As Boolean = False, ignoreFalseGrandchildren As Boolean = False) As IEnumerable(Of Element)
  overload: MLEM.Ui.Elements.Element.GetChildren*
  nameWithType.vb: Element.GetChildren(Func(Of Element, Boolean), Boolean, Boolean)
  fullName.vb: MLEM.Ui.Elements.Element.GetChildren(System.Func(Of MLEM.Ui.Elements.Element, Boolean), Boolean, Boolean)
  name.vb: GetChildren(Func(Of Element, Boolean), Boolean, Boolean)
- uid: MLEM.Ui.Elements.Element.GetParentTree
  commentId: M:MLEM.Ui.Elements.Element.GetParentTree
  id: GetParentTree
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: GetParentTree()
  nameWithType: Element.GetParentTree()
  fullName: MLEM.Ui.Elements.Element.GetParentTree()
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetParentTree
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1000
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Returns the parent tree of this element.

    The parent tree is this element's <xref href="MLEM.Ui.Elements.Element.Parent" data-throw-if-not-resolved="false"></xref>, followed by its parent, and so on, up until the <xref href="MLEM.Ui.RootElement" data-throw-if-not-resolved="false"></xref>'s <xref href="MLEM.Ui.RootElement.Element" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public IEnumerable<Element> GetParentTree()
    return:
      type: System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}
      description: This element's parent tree
    content.vb: Public Function GetParentTree() As IEnumerable(Of Element)
  overload: MLEM.Ui.Elements.Element.GetParentTree*
- uid: MLEM.Ui.Elements.Element.GetTotalCoveredArea(System.Boolean)
  commentId: M:MLEM.Ui.Elements.Element.GetTotalCoveredArea(System.Boolean)
  id: GetTotalCoveredArea(System.Boolean)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: GetTotalCoveredArea(bool)
  nameWithType: Element.GetTotalCoveredArea(bool)
  fullName: MLEM.Ui.Elements.Element.GetTotalCoveredArea(bool)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetTotalCoveredArea
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1014
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Returns the total covered area of this element, which is its <xref href="MLEM.Ui.Elements.Element.Area" data-throw-if-not-resolved="false"></xref> (or <xref href="MLEM.Ui.Elements.Element.UnscrolledArea" data-throw-if-not-resolved="false"></xref>), unioned with all of the total covered areas of its <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref>.

    The returned area is only different from this element's <xref href="MLEM.Ui.Elements.Element.Area" data-throw-if-not-resolved="false"></xref> (or <xref href="MLEM.Ui.Elements.Element.UnscrolledArea" data-throw-if-not-resolved="false"></xref>) if it has any <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref> that are outside of this element's area, or are bigger than this element.
  example: []
  syntax:
    content: public RectangleF GetTotalCoveredArea(bool unscrolled)
    parameters:
    - id: unscrolled
      type: System.Boolean
      description: Whether to use elements' <xref href="MLEM.Ui.Elements.Element.UnscrolledArea" data-throw-if-not-resolved="false"></xref> (instead of their <xref href="MLEM.Ui.Elements.Element.Area" data-throw-if-not-resolved="false"></xref>).
    return:
      type: MLEM.Maths.RectangleF
      description: This element's total covered area.
    content.vb: Public Function GetTotalCoveredArea(unscrolled As Boolean) As RectangleF
  overload: MLEM.Ui.Elements.Element.GetTotalCoveredArea*
  nameWithType.vb: Element.GetTotalCoveredArea(Boolean)
  fullName.vb: MLEM.Ui.Elements.Element.GetTotalCoveredArea(Boolean)
  name.vb: GetTotalCoveredArea(Boolean)
- uid: MLEM.Ui.Elements.Element.GetRelevantChildren
  commentId: M:MLEM.Ui.Elements.Element.GetRelevantChildren
  id: GetRelevantChildren
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: GetRelevantChildren()
  nameWithType: Element.GetRelevantChildren()
  fullName: MLEM.Ui.Elements.Element.GetRelevantChildren()
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetRelevantChildren
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1028
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Returns a subset of <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref> that are currently relevant in terms of drawing and input querying.

    A <xref href="MLEM.Ui.Elements.Panel" data-throw-if-not-resolved="false"></xref> only returns elements that are currently in view here.
  example: []
  syntax:
    content: protected virtual IList<Element> GetRelevantChildren()
    return:
      type: System.Collections.Generic.IList{MLEM.Ui.Elements.Element}
      description: This element's relevant children
    content.vb: Protected Overridable Function GetRelevantChildren() As IList(Of Element)
  overload: MLEM.Ui.Elements.Element.GetRelevantChildren*
- uid: MLEM.Ui.Elements.Element.Update(Microsoft.Xna.Framework.GameTime)
  commentId: M:MLEM.Ui.Elements.Element.Update(Microsoft.Xna.Framework.GameTime)
  id: Update(Microsoft.Xna.Framework.GameTime)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Update(GameTime)
  nameWithType: Element.Update(GameTime)
  fullName: MLEM.Ui.Elements.Element.Update(Microsoft.Xna.Framework.GameTime)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Update
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1036
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Updates this element and all of its <xref href="MLEM.Ui.Elements.Element.SortedChildren" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public virtual void Update(GameTime time)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game's time
    content.vb: Public Overridable Sub Update(time As GameTime)
  overload: MLEM.Ui.Elements.Element.Update*
- uid: MLEM.Ui.Elements.Element.DrawTransformed(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,MLEM.Graphics.SpriteBatchContext)
  commentId: M:MLEM.Ui.Elements.Element.DrawTransformed(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,MLEM.Graphics.SpriteBatchContext)
  id: DrawTransformed(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,MLEM.Graphics.SpriteBatchContext)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: DrawTransformed(GameTime, SpriteBatch, float, SpriteBatchContext)
  nameWithType: Element.DrawTransformed(GameTime, SpriteBatch, float, SpriteBatchContext)
  fullName: MLEM.Ui.Elements.Element.DrawTransformed(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, float, MLEM.Graphics.SpriteBatchContext)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: DrawTransformed
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1065
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Draws this element by calling <xref href="MLEM.Ui.Elements.Element.Draw(Microsoft.Xna.Framework.GameTime%2cMicrosoft.Xna.Framework.Graphics.SpriteBatch%2cSystem.Single%2cMLEM.Graphics.SpriteBatchContext)" data-throw-if-not-resolved="false"></xref> internally.

    If <xref href="MLEM.Ui.Elements.Element.Transform" data-throw-if-not-resolved="false"></xref> is set, a new <code>SpriteBatch.Begin</code> call is also started.
  example: []
  syntax:
    content: public void DrawTransformed(GameTime time, SpriteBatch batch, float alpha, SpriteBatchContext context)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game's time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing
    - id: alpha
      type: System.Single
      description: The alpha to draw this element and its children with
    - id: context
      type: MLEM.Graphics.SpriteBatchContext
      description: The sprite batch context to use for drawing
    content.vb: Public Sub DrawTransformed(time As GameTime, batch As SpriteBatch, alpha As Single, context As SpriteBatchContext)
  overload: MLEM.Ui.Elements.Element.DrawTransformed*
  nameWithType.vb: Element.DrawTransformed(GameTime, SpriteBatch, Single, SpriteBatchContext)
  fullName.vb: MLEM.Ui.Elements.Element.DrawTransformed(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Single, MLEM.Graphics.SpriteBatchContext)
  name.vb: DrawTransformed(GameTime, SpriteBatch, Single, SpriteBatchContext)
- uid: MLEM.Ui.Elements.Element.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,MLEM.Graphics.SpriteBatchContext)
  commentId: M:MLEM.Ui.Elements.Element.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,MLEM.Graphics.SpriteBatchContext)
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,MLEM.Graphics.SpriteBatchContext)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch, float, SpriteBatchContext)
  nameWithType: Element.Draw(GameTime, SpriteBatch, float, SpriteBatchContext)
  fullName: MLEM.Ui.Elements.Element.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, float, MLEM.Graphics.SpriteBatchContext)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Draw
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1098
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Draws this element and all of its children. Override this method to draw the content of custom elements.

    Note that, when this is called, <code>SpriteBatch.Begin</code> has already been called with custom <xref href="MLEM.Ui.Elements.Element.Transform" data-throw-if-not-resolved="false"></xref> etc. applied.
  example: []
  syntax:
    content: public virtual void Draw(GameTime time, SpriteBatch batch, float alpha, SpriteBatchContext context)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game's time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing
    - id: alpha
      type: System.Single
      description: The alpha to draw this element and its children with
    - id: context
      type: MLEM.Graphics.SpriteBatchContext
      description: The sprite batch context to use for drawing
    content.vb: Public Overridable Sub Draw(time As GameTime, batch As SpriteBatch, alpha As Single, context As SpriteBatchContext)
  overload: MLEM.Ui.Elements.Element.Draw*
  nameWithType.vb: Element.Draw(GameTime, SpriteBatch, Single, SpriteBatchContext)
  fullName.vb: MLEM.Ui.Elements.Element.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Single, MLEM.Graphics.SpriteBatchContext)
  name.vb: Draw(GameTime, SpriteBatch, Single, SpriteBatchContext)
- uid: MLEM.Ui.Elements.Element.GetElementUnderPos(Microsoft.Xna.Framework.Vector2)
  commentId: M:MLEM.Ui.Elements.Element.GetElementUnderPos(Microsoft.Xna.Framework.Vector2)
  id: GetElementUnderPos(Microsoft.Xna.Framework.Vector2)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: GetElementUnderPos(Vector2)
  nameWithType: Element.GetElementUnderPos(Vector2)
  fullName: MLEM.Ui.Elements.Element.GetElementUnderPos(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetElementUnderPos
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1114
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Returns the element under the given position, searching the current element and all of its <xref href="MLEM.Ui.Elements.Element.GetRelevantChildren" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual Element GetElementUnderPos(Vector2 position)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: The position to query
    return:
      type: MLEM.Ui.Elements.Element
      description: The element under the position, or null if no such element exists
    content.vb: Public Overridable Function GetElementUnderPos(position As Vector2) As Element
  overload: MLEM.Ui.Elements.Element.GetElementUnderPos*
- uid: MLEM.Ui.Elements.Element.PlayAnimation(MLEM.Ui.UiAnimation)
  commentId: M:MLEM.Ui.Elements.Element.PlayAnimation(MLEM.Ui.UiAnimation)
  id: PlayAnimation(MLEM.Ui.UiAnimation)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: PlayAnimation(UiAnimation)
  nameWithType: Element.PlayAnimation(UiAnimation)
  fullName: MLEM.Ui.Elements.Element.PlayAnimation(MLEM.Ui.UiAnimation)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: PlayAnimation
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1132
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Plays the given <xref href="MLEM.Ui.UiAnimation" data-throw-if-not-resolved="false"></xref> on this element, causing it to be added to the <xref href="MLEM.Ui.Elements.Element.PlayingAnimations" data-throw-if-not-resolved="false"></xref> and updated in <xref href="MLEM.Ui.Elements.Element.Update(Microsoft.Xna.Framework.GameTime)" data-throw-if-not-resolved="false"></xref>.

    If the given <code class="paramref">animation</code> is already playing on this element, it will be restarted.
  example: []
  syntax:
    content: public virtual void PlayAnimation(UiAnimation animation)
    parameters:
    - id: animation
      type: MLEM.Ui.UiAnimation
      description: The animation to play.
    content.vb: Public Overridable Sub PlayAnimation(animation As UiAnimation)
  overload: MLEM.Ui.Elements.Element.PlayAnimation*
- uid: MLEM.Ui.Elements.Element.StopAnimation(MLEM.Ui.UiAnimation)
  commentId: M:MLEM.Ui.Elements.Element.StopAnimation(MLEM.Ui.UiAnimation)
  id: StopAnimation(MLEM.Ui.UiAnimation)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: StopAnimation(UiAnimation)
  nameWithType: Element.StopAnimation(UiAnimation)
  fullName: MLEM.Ui.Elements.Element.StopAnimation(MLEM.Ui.UiAnimation)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: StopAnimation
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1146
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Stops the given <xref href="MLEM.Ui.UiAnimation" data-throw-if-not-resolved="false"></xref> on this element, causing it to be removed from the <xref href="MLEM.Ui.Elements.Element.PlayingAnimations" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Ui.UiAnimation.OnFinished(MLEM.Ui.Elements.Element)" data-throw-if-not-resolved="false"></xref> to be invoked.
  example: []
  syntax:
    content: public virtual bool StopAnimation(UiAnimation animation)
    parameters:
    - id: animation
      type: MLEM.Ui.UiAnimation
      description: The animation to stop.
    return:
      type: System.Boolean
      description: Whether the animation was present in this element's <xref href="MLEM.Ui.Elements.Element.PlayingAnimations" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overridable Function StopAnimation(animation As UiAnimation) As Boolean
  overload: MLEM.Ui.Elements.Element.StopAnimation*
- uid: MLEM.Ui.Elements.Element.ToString
  commentId: M:MLEM.Ui.Elements.Element.ToString
  id: ToString
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Element.ToString()
  fullName: MLEM.Ui.Elements.Element.ToString()
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ToString
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1155
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Returns a string that represents the current object.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string that represents the current object.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: MLEM.Ui.Elements.Element.ToString*
- uid: MLEM.Ui.Elements.Element.AndChildren(System.Action{MLEM.Ui.Elements.Element})
  commentId: M:MLEM.Ui.Elements.Element.AndChildren(System.Action{MLEM.Ui.Elements.Element})
  id: AndChildren(System.Action{MLEM.Ui.Elements.Element})
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: AndChildren(Action<Element>)
  nameWithType: Element.AndChildren(Action<Element>)
  fullName: MLEM.Ui.Elements.Element.AndChildren(System.Action<MLEM.Ui.Elements.Element>)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: AndChildren
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1171
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Performs the specified action on this element and all of its <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public void AndChildren(Action<Element> action)
    parameters:
    - id: action
      type: System.Action{MLEM.Ui.Elements.Element}
      description: The action to perform
    content.vb: Public Sub AndChildren(action As Action(Of Element))
  overload: MLEM.Ui.Elements.Element.AndChildren*
  nameWithType.vb: Element.AndChildren(Action(Of Element))
  fullName.vb: MLEM.Ui.Elements.Element.AndChildren(System.Action(Of MLEM.Ui.Elements.Element))
  name.vb: AndChildren(Action(Of Element))
- uid: MLEM.Ui.Elements.Element.ReorderChildren(System.Comparison{MLEM.Ui.Elements.Element})
  commentId: M:MLEM.Ui.Elements.Element.ReorderChildren(System.Comparison{MLEM.Ui.Elements.Element})
  id: ReorderChildren(System.Comparison{MLEM.Ui.Elements.Element})
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ReorderChildren(Comparison<Element>)
  nameWithType: Element.ReorderChildren(Comparison<Element>)
  fullName: MLEM.Ui.Elements.Element.ReorderChildren(System.Comparison<MLEM.Ui.Elements.Element>)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ReorderChildren
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1181
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Sorts this element's <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref> using the given comparison.
  example: []
  syntax:
    content: public void ReorderChildren(Comparison<Element> comparison)
    parameters:
    - id: comparison
      type: System.Comparison{MLEM.Ui.Elements.Element}
      description: The comparison to sort by
    content.vb: Public Sub ReorderChildren(comparison As Comparison(Of Element))
  overload: MLEM.Ui.Elements.Element.ReorderChildren*
  nameWithType.vb: Element.ReorderChildren(Comparison(Of Element))
  fullName.vb: MLEM.Ui.Elements.Element.ReorderChildren(System.Comparison(Of MLEM.Ui.Elements.Element))
  name.vb: ReorderChildren(Comparison(Of Element))
- uid: MLEM.Ui.Elements.Element.ReverseChildren(System.Int32,System.Nullable{System.Int32})
  commentId: M:MLEM.Ui.Elements.Element.ReverseChildren(System.Int32,System.Nullable{System.Int32})
  id: ReverseChildren(System.Int32,System.Nullable{System.Int32})
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ReverseChildren(int, int?)
  nameWithType: Element.ReverseChildren(int, int?)
  fullName: MLEM.Ui.Elements.Element.ReverseChildren(int, int?)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ReverseChildren
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1190
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Reverses this element's <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref> list in the given range.
  example: []
  syntax:
    content: public void ReverseChildren(int index = 0, int? count = null)
    parameters:
    - id: index
      type: System.Int32
      description: The index to start reversing at
    - id: count
      type: System.Nullable{System.Int32}
      description: The amount of elements to reverse
    content.vb: Public Sub ReverseChildren(index As Integer = 0, count As Integer? = Nothing)
  overload: MLEM.Ui.Elements.Element.ReverseChildren*
  nameWithType.vb: Element.ReverseChildren(Integer, Integer?)
  fullName.vb: MLEM.Ui.Elements.Element.ReverseChildren(Integer, Integer?)
  name.vb: ReverseChildren(Integer, Integer?)
- uid: MLEM.Ui.Elements.Element.ScaleTransform(System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2})
  commentId: M:MLEM.Ui.Elements.Element.ScaleTransform(System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2})
  id: ScaleTransform(System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2})
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: ScaleTransform(float, Vector2?)
  nameWithType: Element.ScaleTransform(float, Vector2?)
  fullName: MLEM.Ui.Elements.Element.ScaleTransform(float, Microsoft.Xna.Framework.Vector2?)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ScaleTransform
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1199
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Scales this element's <xref href="MLEM.Ui.Elements.Element.Transform" data-throw-if-not-resolved="false"></xref> matrix based on the given scale and origin.
  example: []
  syntax:
    content: public void ScaleTransform(float scale, Vector2? origin = null)
    parameters:
    - id: scale
      type: System.Single
      description: The scale to use
    - id: origin
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The origin to use for scaling, or null to use this element's center point
    content.vb: Public Sub ScaleTransform(scale As Single, origin As Vector2? = Nothing)
  overload: MLEM.Ui.Elements.Element.ScaleTransform*
  nameWithType.vb: Element.ScaleTransform(Single, Vector2?)
  fullName.vb: MLEM.Ui.Elements.Element.ScaleTransform(Single, Microsoft.Xna.Framework.Vector2?)
  name.vb: ScaleTransform(Single, Vector2?)
- uid: MLEM.Ui.Elements.Element.InitStyle(MLEM.Ui.Style.UiStyle)
  commentId: M:MLEM.Ui.Elements.Element.InitStyle(MLEM.Ui.Style.UiStyle)
  id: InitStyle(MLEM.Ui.Style.UiStyle)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: InitStyle(UiStyle)
  nameWithType: Element.InitStyle(UiStyle)
  fullName: MLEM.Ui.Elements.Element.InitStyle(MLEM.Ui.Style.UiStyle)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: InitStyle
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1207
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Initializes this element's <xref href="MLEM.Ui.Style.StyleProp%601" data-throw-if-not-resolved="false"></xref> instances using the ui system's <xref href="MLEM.Ui.Style.UiStyle" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected virtual void InitStyle(UiStyle style)
    parameters:
    - id: style
      type: MLEM.Ui.Style.UiStyle
      description: The new style
    content.vb: Protected Overridable Sub InitStyle(style As UiStyle)
  overload: MLEM.Ui.Elements.Element.InitStyle*
- uid: MLEM.Ui.Elements.Element.OnChildAreaDirty(MLEM.Ui.Elements.Element,System.Boolean)
  commentId: M:MLEM.Ui.Elements.Element.OnChildAreaDirty(MLEM.Ui.Elements.Element,System.Boolean)
  id: OnChildAreaDirty(MLEM.Ui.Elements.Element,System.Boolean)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: OnChildAreaDirty(Element, bool)
  nameWithType: Element.OnChildAreaDirty(Element, bool)
  fullName: MLEM.Ui.Elements.Element.OnChildAreaDirty(MLEM.Ui.Elements.Element, bool)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnChildAreaDirty
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1224
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    A method that gets called by this element's <xref href="MLEM.Ui.Elements.Element.Children" data-throw-if-not-resolved="false"></xref> or any of its grandchildren when their <xref href="MLEM.Ui.Elements.Element.SetAreaDirty" data-throw-if-not-resolved="false"></xref> methods get called.

    Note that the element's area might already be dirty, which will not stop this method from being called.
  example: []
  syntax:
    content: protected virtual void OnChildAreaDirty(Element child, bool grandchild)
    parameters:
    - id: child
      type: MLEM.Ui.Elements.Element
      description: The child whose area is being set dirty.
    - id: grandchild
      type: System.Boolean
      description: Whether the <code class="paramref">child</code> is a grandchild of this element, rather than a direct child.
    content.vb: Protected Overridable Sub OnChildAreaDirty(child As Element, grandchild As Boolean)
  overload: MLEM.Ui.Elements.Element.OnChildAreaDirty*
  nameWithType.vb: Element.OnChildAreaDirty(Element, Boolean)
  fullName.vb: MLEM.Ui.Elements.Element.OnChildAreaDirty(MLEM.Ui.Elements.Element, Boolean)
  name.vb: OnChildAreaDirty(Element, Boolean)
- uid: MLEM.Ui.Elements.Element.TransformInverse(Microsoft.Xna.Framework.Vector2)
  commentId: M:MLEM.Ui.Elements.Element.TransformInverse(Microsoft.Xna.Framework.Vector2)
  id: TransformInverse(Microsoft.Xna.Framework.Vector2)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: TransformInverse(Vector2)
  nameWithType: Element.TransformInverse(Vector2)
  fullName: MLEM.Ui.Elements.Element.TransformInverse(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TransformInverse
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1237
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: Transforms the given <code class="paramref">position</code> by the inverse of this element's <xref href="MLEM.Ui.Elements.Element.Transform" data-throw-if-not-resolved="false"></xref> matrix.
  example: []
  syntax:
    content: protected Vector2 TransformInverse(Vector2 position)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: The position to transform
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The transformed position
    content.vb: Protected Function TransformInverse(position As Vector2) As Vector2
  overload: MLEM.Ui.Elements.Element.TransformInverse*
- uid: MLEM.Ui.Elements.Element.TransformInverseAll(Microsoft.Xna.Framework.Vector2)
  commentId: M:MLEM.Ui.Elements.Element.TransformInverseAll(Microsoft.Xna.Framework.Vector2)
  id: TransformInverseAll(Microsoft.Xna.Framework.Vector2)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: TransformInverseAll(Vector2)
  nameWithType: Element.TransformInverseAll(Vector2)
  fullName: MLEM.Ui.Elements.Element.TransformInverseAll(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TransformInverseAll
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1247
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Transforms the given <code class="paramref">position</code> by this element's <xref href="MLEM.Ui.Elements.Element.Root" data-throw-if-not-resolved="false"></xref>'s <xref href="MLEM.Ui.RootElement.InvTransform" data-throw-if-not-resolved="false"></xref>, the inverses of all of the <xref href="MLEM.Ui.Elements.Element.Transform" data-throw-if-not-resolved="false"></xref> matrices of this element's parent tree (<xref href="MLEM.Ui.Elements.Element.GetParentTree" data-throw-if-not-resolved="false"></xref>), and the inverse of this element's <xref href="MLEM.Ui.Elements.Element.Transform" data-throw-if-not-resolved="false"></xref> matrix.

    Note that, when using <xref href="MLEM.Ui.UiControls.GetElementUnderPos(Microsoft.Xna.Framework.Vector2)" data-throw-if-not-resolved="false"></xref>, this operation is done recursively, which is more efficient.
  example: []
  syntax:
    content: protected Vector2 TransformInverseAll(Vector2 position)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: The position to transform
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The transformed position
    content.vb: Protected Function TransformInverseAll(position As Vector2) As Vector2
  overload: MLEM.Ui.Elements.Element.TransformInverseAll*
- uid: MLEM.Ui.Elements.Element.AddedToUi(MLEM.Ui.UiSystem,MLEM.Ui.RootElement)
  commentId: M:MLEM.Ui.Elements.Element.AddedToUi(MLEM.Ui.UiSystem,MLEM.Ui.RootElement)
  id: AddedToUi(MLEM.Ui.UiSystem,MLEM.Ui.RootElement)
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: AddedToUi(UiSystem, RootElement)
  nameWithType: Element.AddedToUi(UiSystem, RootElement)
  fullName: MLEM.Ui.Elements.Element.AddedToUi(MLEM.Ui.UiSystem, MLEM.Ui.RootElement)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: AddedToUi
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1260
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Called when this element is added to a <xref href="MLEM.Ui.UiSystem" data-throw-if-not-resolved="false"></xref> and, optionally, a given <xref href="MLEM.Ui.RootElement" data-throw-if-not-resolved="false"></xref>.

    This method is called in <xref href="MLEM.Ui.Elements.Element.AddChild%60%601(%60%600%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Ui.UiSystem.Add(System.String%2cMLEM.Ui.Elements.Element)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected virtual void AddedToUi(UiSystem system, RootElement root)
    parameters:
    - id: system
      type: MLEM.Ui.UiSystem
      description: The ui system to add to.
    - id: root
      type: MLEM.Ui.RootElement
      description: The root element to add to.
    content.vb: Protected Overridable Sub AddedToUi(system As UiSystem, root As RootElement)
  overload: MLEM.Ui.Elements.Element.AddedToUi*
- uid: MLEM.Ui.Elements.Element.RemovedFromUi
  commentId: M:MLEM.Ui.Elements.Element.RemovedFromUi
  id: RemovedFromUi
  parent: MLEM.Ui.Elements.Element
  langs:
  - csharp
  - vb
  name: RemovedFromUi()
  nameWithType: Element.RemovedFromUi()
  fullName: MLEM.Ui.Elements.Element.RemovedFromUi()
  type: Method
  source:
    remote:
      path: MLEM.Ui/Elements/Element.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: RemovedFromUi
    path: ../MLEM.Ui/Elements/Element.cs
    startLine: 1271
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Elements
  summary: >-
    Called when this element is removed from a <xref href="MLEM.Ui.UiSystem" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Ui.RootElement" data-throw-if-not-resolved="false"></xref>.

    This method is called in <xref href="MLEM.Ui.Elements.Element.RemoveChild(MLEM.Ui.Elements.Element)" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Ui.UiSystem.Remove(System.String)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected virtual void RemovedFromUi()
    content.vb: Protected Overridable Sub RemovedFromUi()
  overload: MLEM.Ui.Elements.Element.RemovedFromUi*
references:
- uid: MLEM.Ui.UiSystem
  commentId: T:MLEM.Ui.UiSystem
  parent: MLEM.Ui
  href: MLEM.Ui.UiSystem.html
  name: UiSystem
  nameWithType: UiSystem
  fullName: MLEM.Ui.UiSystem
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  href: MLEM.html
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Ui
    name: Ui
    href: MLEM.Ui.html
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    href: MLEM.Ui.Elements.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Ui
    name: Ui
    href: MLEM.Ui.html
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    href: MLEM.Ui.Elements.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MLEM.Misc.GenericDataHolder
  commentId: T:MLEM.Misc.GenericDataHolder
  parent: MLEM.Misc
  href: MLEM.Misc.GenericDataHolder.html
  name: GenericDataHolder
  nameWithType: GenericDataHolder
  fullName: MLEM.Misc.GenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  href: MLEM.Misc.IGenericDataHolder.html
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Misc.GenericDataHolder
  definition: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
  href: MLEM.Misc.GenericDataHolder.html#MLEM_Misc_GenericDataHolder_SetData__1_System_String___0_
  name: SetData<T>(string, T)
  nameWithType: GenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Misc.GenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: GenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Misc.GenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    href: MLEM.Misc.GenericDataHolder.html#MLEM_Misc_GenericDataHolder_SetData__1_System_String___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    href: MLEM.Misc.GenericDataHolder.html#MLEM_Misc_GenericDataHolder_SetData__1_System_String___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  href: MLEM.Misc.GenericDataHolder.html#MLEM_Misc_GenericDataHolder_GetData__1_System_String_
  name: GetData<T>(string)
  nameWithType: GenericDataHolder.GetData<T>(string)
  fullName: MLEM.Misc.GenericDataHolder.GetData<T>(string)
  nameWithType.vb: GenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Misc.GenericDataHolder.GetData(Of T)(String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData
    href: MLEM.Misc.GenericDataHolder.html#MLEM_Misc_GenericDataHolder_GetData__1_System_String_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData
    href: MLEM.Misc.GenericDataHolder.html#MLEM_Misc_GenericDataHolder_GetData__1_System_String_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Misc.GenericDataHolder.GetDataKeys
  commentId: M:MLEM.Misc.GenericDataHolder.GetDataKeys
  parent: MLEM.Misc.GenericDataHolder
  href: MLEM.Misc.GenericDataHolder.html#MLEM_Misc_GenericDataHolder_GetDataKeys
  name: GetDataKeys()
  nameWithType: GenericDataHolder.GetDataKeys()
  fullName: MLEM.Misc.GenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    href: MLEM.Misc.GenericDataHolder.html#MLEM_Misc_GenericDataHolder_GetDataKeys
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    href: MLEM.Misc.GenericDataHolder.html#MLEM_Misc_GenericDataHolder_GetDataKeys
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: MLEM.Ui.Elements.Element.MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Paragraph.TextCallback)
  commentId: M:MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,MLEM.Ui.Elements.Paragraph.TextCallback)
  parent: MLEM.Ui.Elements.ElementExtensions
  definition: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,MLEM.Ui.Elements.Paragraph.TextCallback)
  href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_MLEM_Ui_Elements_Paragraph_TextCallback_
  name: AddTooltip(Element, TextCallback)
  nameWithType: ElementExtensions.AddTooltip(Element, Paragraph.TextCallback)
  fullName: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element, MLEM.Ui.Elements.Paragraph.TextCallback)
  spec.csharp:
  - uid: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,MLEM.Ui.Elements.Paragraph.TextCallback)
    name: AddTooltip
    href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_MLEM_Ui_Elements_Paragraph_TextCallback_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Paragraph.TextCallback
    name: TextCallback
    href: MLEM.Ui.Elements.Paragraph.TextCallback.html
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,MLEM.Ui.Elements.Paragraph.TextCallback)
    name: AddTooltip
    href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_MLEM_Ui_Elements_Paragraph_TextCallback_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Paragraph.TextCallback
    name: TextCallback
    href: MLEM.Ui.Elements.Paragraph.TextCallback.html
  - name: )
- uid: MLEM.Ui.Elements.Element.MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Tooltip)
  commentId: M:MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,MLEM.Ui.Elements.Tooltip)
  parent: MLEM.Ui.Elements.ElementExtensions
  definition: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,MLEM.Ui.Elements.Tooltip)
  href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_MLEM_Ui_Elements_Tooltip_
  name: AddTooltip(Element, Tooltip)
  nameWithType: ElementExtensions.AddTooltip(Element, Tooltip)
  fullName: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element, MLEM.Ui.Elements.Tooltip)
  spec.csharp:
  - uid: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,MLEM.Ui.Elements.Tooltip)
    name: AddTooltip
    href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_MLEM_Ui_Elements_Tooltip_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    href: MLEM.Ui.Elements.Tooltip.html
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,MLEM.Ui.Elements.Tooltip)
    name: AddTooltip
    href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_MLEM_Ui_Elements_Tooltip_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    href: MLEM.Ui.Elements.Tooltip.html
  - name: )
- uid: MLEM.Ui.Elements.Element.MLEM.Ui.Elements.ElementExtensions.AddTooltip(System.String)
  commentId: M:MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,System.String)
  parent: MLEM.Ui.Elements.ElementExtensions
  definition: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,System.String)
  href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_System_String_
  name: AddTooltip(Element, string)
  nameWithType: ElementExtensions.AddTooltip(Element, string)
  fullName: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element, string)
  nameWithType.vb: ElementExtensions.AddTooltip(Element, String)
  fullName.vb: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element, String)
  name.vb: AddTooltip(Element, String)
  spec.csharp:
  - uid: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,System.String)
    name: AddTooltip
    href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_System_String_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,System.String)
    name: AddTooltip
    href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_System_String_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Ui
  commentId: N:MLEM.Ui
  href: MLEM.html
  name: MLEM.Ui
  nameWithType: MLEM.Ui
  fullName: MLEM.Ui
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Ui
    name: Ui
    href: MLEM.Ui.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Ui
    name: Ui
    href: MLEM.Ui.html
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  href: MLEM.html
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Misc
    name: Misc
    href: MLEM.Misc.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Misc
    name: Misc
    href: MLEM.Misc.html
- uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  href: MLEM.Misc.GenericDataHolder.html#MLEM_Misc_GenericDataHolder_SetData__1_System_String___0_
  name: SetData<T>(string, T)
  nameWithType: GenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Misc.GenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: GenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Misc.GenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    href: MLEM.Misc.GenericDataHolder.html#MLEM_Misc_GenericDataHolder_SetData__1_System_String___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    href: MLEM.Misc.GenericDataHolder.html#MLEM_Misc_GenericDataHolder_SetData__1_System_String___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,MLEM.Ui.Elements.Paragraph.TextCallback)
  commentId: M:MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,MLEM.Ui.Elements.Paragraph.TextCallback)
  href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_MLEM_Ui_Elements_Paragraph_TextCallback_
  name: AddTooltip(Element, TextCallback)
  nameWithType: ElementExtensions.AddTooltip(Element, Paragraph.TextCallback)
  fullName: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element, MLEM.Ui.Elements.Paragraph.TextCallback)
  spec.csharp:
  - uid: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,MLEM.Ui.Elements.Paragraph.TextCallback)
    name: AddTooltip
    href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_MLEM_Ui_Elements_Paragraph_TextCallback_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Paragraph.TextCallback
    name: TextCallback
    href: MLEM.Ui.Elements.Paragraph.TextCallback.html
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,MLEM.Ui.Elements.Paragraph.TextCallback)
    name: AddTooltip
    href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_MLEM_Ui_Elements_Paragraph_TextCallback_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Paragraph.TextCallback
    name: TextCallback
    href: MLEM.Ui.Elements.Paragraph.TextCallback.html
  - name: )
- uid: MLEM.Ui.Elements.ElementExtensions
  commentId: T:MLEM.Ui.Elements.ElementExtensions
  parent: MLEM.Ui.Elements
  href: MLEM.Ui.Elements.ElementExtensions.html
  name: ElementExtensions
  nameWithType: ElementExtensions
  fullName: MLEM.Ui.Elements.ElementExtensions
- uid: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,MLEM.Ui.Elements.Tooltip)
  commentId: M:MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,MLEM.Ui.Elements.Tooltip)
  href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_MLEM_Ui_Elements_Tooltip_
  name: AddTooltip(Element, Tooltip)
  nameWithType: ElementExtensions.AddTooltip(Element, Tooltip)
  fullName: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element, MLEM.Ui.Elements.Tooltip)
  spec.csharp:
  - uid: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,MLEM.Ui.Elements.Tooltip)
    name: AddTooltip
    href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_MLEM_Ui_Elements_Tooltip_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    href: MLEM.Ui.Elements.Tooltip.html
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,MLEM.Ui.Elements.Tooltip)
    name: AddTooltip
    href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_MLEM_Ui_Elements_Tooltip_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    href: MLEM.Ui.Elements.Tooltip.html
  - name: )
- uid: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,System.String)
  commentId: M:MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,System.String)
  isExternal: true
  href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_System_String_
  name: AddTooltip(Element, string)
  nameWithType: ElementExtensions.AddTooltip(Element, string)
  fullName: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element, string)
  nameWithType.vb: ElementExtensions.AddTooltip(Element, String)
  fullName.vb: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element, String)
  name.vb: AddTooltip(Element, String)
  spec.csharp:
  - uid: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,System.String)
    name: AddTooltip
    href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_System_String_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.ElementExtensions.AddTooltip(MLEM.Ui.Elements.Element,System.String)
    name: AddTooltip
    href: MLEM.Ui.Elements.ElementExtensions.html#MLEM_Ui_Elements_ElementExtensions_AddTooltip_MLEM_Ui_Elements_Element_System_String_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Ui.Elements.Element.Size
  commentId: P:MLEM.Ui.Elements.Element.Size
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Size
  name: Size
  nameWithType: Element.Size
  fullName: MLEM.Ui.Elements.Element.Size
- uid: MLEM.Ui.Elements.Element.Area
  commentId: P:MLEM.Ui.Elements.Element.Area
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Area
  name: Area
  nameWithType: Element.Area
  fullName: MLEM.Ui.Elements.Element.Area
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: MLEM.Ui.Elements.Element
  commentId: T:MLEM.Ui.Elements.Element
  parent: MLEM.Ui.Elements
  href: MLEM.Ui.Elements.Element.html
  name: Element
  nameWithType: Element
  fullName: MLEM.Ui.Elements.Element
- uid: MLEM.Ui.Elements.Element.System*
  commentId: Overload:MLEM.Ui.Elements.Element.System
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_System
  name: System
  nameWithType: Element.System
  fullName: MLEM.Ui.Elements.Element.System
- uid: MLEM.Ui.Elements.Element.System
  commentId: P:MLEM.Ui.Elements.Element.System
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_System
  name: System
  nameWithType: Element.System
  fullName: MLEM.Ui.Elements.Element.System
- uid: MLEM.Ui.UiControls
  commentId: T:MLEM.Ui.UiControls
  parent: MLEM.Ui
  href: MLEM.Ui.UiControls.html
  name: UiControls
  nameWithType: UiControls
  fullName: MLEM.Ui.UiControls
- uid: MLEM.Ui.RootElement
  commentId: T:MLEM.Ui.RootElement
  parent: MLEM.Ui
  href: MLEM.Ui.RootElement.html
  name: RootElement
  nameWithType: RootElement
  fullName: MLEM.Ui.RootElement
- uid: MLEM.Ui.Elements.Element.Parent*
  commentId: Overload:MLEM.Ui.Elements.Element.Parent
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Parent
  name: Parent
  nameWithType: Element.Parent
  fullName: MLEM.Ui.Elements.Element.Parent
- uid: MLEM.Ui.Elements.Element.Parent
  commentId: P:MLEM.Ui.Elements.Element.Parent
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Parent
  name: Parent
  nameWithType: Element.Parent
  fullName: MLEM.Ui.Elements.Element.Parent
- uid: MLEM.Ui.RootElement.Element
  commentId: F:MLEM.Ui.RootElement.Element
  href: MLEM.Ui.RootElement.html#MLEM_Ui_RootElement_Element
  name: Element
  nameWithType: RootElement.Element
  fullName: MLEM.Ui.RootElement.Element
- uid: MLEM.Ui.Elements.Element.Root*
  commentId: Overload:MLEM.Ui.Elements.Element.Root
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Root
  name: Root
  nameWithType: Element.Root
  fullName: MLEM.Ui.Elements.Element.Root
- uid: MLEM.Ui.Elements.Element.Scale*
  commentId: Overload:MLEM.Ui.Elements.Element.Scale
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Scale
  name: Scale
  nameWithType: Element.Scale
  fullName: MLEM.Ui.Elements.Element.Scale
- uid: MLEM.Ui.Elements.Element.Anchor
  commentId: P:MLEM.Ui.Elements.Element.Anchor
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Anchor
  name: Anchor
  nameWithType: Element.Anchor
  fullName: MLEM.Ui.Elements.Element.Anchor
- uid: MLEM.Ui.Elements.Element.Anchor*
  commentId: Overload:MLEM.Ui.Elements.Element.Anchor
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Anchor
  name: Anchor
  nameWithType: Element.Anchor
  fullName: MLEM.Ui.Elements.Element.Anchor
- uid: MLEM.Ui.Anchor
  commentId: T:MLEM.Ui.Anchor
  parent: MLEM.Ui
  href: MLEM.Ui.Anchor.html
  name: Anchor
  nameWithType: Anchor
  fullName: MLEM.Ui.Anchor
- uid: MLEM.Ui.Elements.Element.AutoSizeAddedAbsolute
  commentId: P:MLEM.Ui.Elements.Element.AutoSizeAddedAbsolute
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_AutoSizeAddedAbsolute
  name: AutoSizeAddedAbsolute
  nameWithType: Element.AutoSizeAddedAbsolute
  fullName: MLEM.Ui.Elements.Element.AutoSizeAddedAbsolute
- uid: MLEM.Ui.Elements.Element.Scale
  commentId: P:MLEM.Ui.Elements.Element.Scale
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Scale
  name: Scale
  nameWithType: Element.Scale
  fullName: MLEM.Ui.Elements.Element.Scale
- uid: MLEM.Ui.Elements.Element.Size*
  commentId: Overload:MLEM.Ui.Elements.Element.Size
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Size
  name: Size
  nameWithType: Element.Size
  fullName: MLEM.Ui.Elements.Element.Size
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: MLEM.Ui.Elements.Element.ScaledSize*
  commentId: Overload:MLEM.Ui.Elements.Element.ScaledSize
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ScaledSize
  name: ScaledSize
  nameWithType: Element.ScaledSize
  fullName: MLEM.Ui.Elements.Element.ScaledSize
- uid: MLEM.Ui.Elements.Element.AutoSizeAddedAbsolute*
  commentId: Overload:MLEM.Ui.Elements.Element.AutoSizeAddedAbsolute
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_AutoSizeAddedAbsolute
  name: AutoSizeAddedAbsolute
  nameWithType: Element.AutoSizeAddedAbsolute
  fullName: MLEM.Ui.Elements.Element.AutoSizeAddedAbsolute
- uid: MLEM.Ui.Elements.Element.ScaledAutoSizeAddedAbsolute*
  commentId: Overload:MLEM.Ui.Elements.Element.ScaledAutoSizeAddedAbsolute
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ScaledAutoSizeAddedAbsolute
  name: ScaledAutoSizeAddedAbsolute
  nameWithType: Element.ScaledAutoSizeAddedAbsolute
  fullName: MLEM.Ui.Elements.Element.ScaledAutoSizeAddedAbsolute
- uid: MLEM.Ui.Elements.Element.PositionOffset*
  commentId: Overload:MLEM.Ui.Elements.Element.PositionOffset
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_PositionOffset
  name: PositionOffset
  nameWithType: Element.PositionOffset
  fullName: MLEM.Ui.Elements.Element.PositionOffset
- uid: MLEM.Ui.Elements.Element.PositionOffset
  commentId: P:MLEM.Ui.Elements.Element.PositionOffset
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_PositionOffset
  name: PositionOffset
  nameWithType: Element.PositionOffset
  fullName: MLEM.Ui.Elements.Element.PositionOffset
- uid: MLEM.Ui.Elements.Element.ScaledOffset*
  commentId: Overload:MLEM.Ui.Elements.Element.ScaledOffset
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ScaledOffset
  name: ScaledOffset
  nameWithType: Element.ScaledOffset
  fullName: MLEM.Ui.Elements.Element.ScaledOffset
- uid: MLEM.Ui.Elements.Element.Padding
  commentId: F:MLEM.Ui.Elements.Element.Padding
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Padding
  name: Padding
  nameWithType: Element.Padding
  fullName: MLEM.Ui.Elements.Element.Padding
- uid: MLEM.Ui.Elements.Element.ScaledPadding*
  commentId: Overload:MLEM.Ui.Elements.Element.ScaledPadding
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ScaledPadding
  name: ScaledPadding
  nameWithType: Element.ScaledPadding
  fullName: MLEM.Ui.Elements.Element.ScaledPadding
- uid: MLEM.Maths.Padding
  commentId: T:MLEM.Maths.Padding
  parent: MLEM.Maths
  href: MLEM.Maths.Padding.html
  name: Padding
  nameWithType: Padding
  fullName: MLEM.Maths.Padding
- uid: MLEM.Maths
  commentId: N:MLEM.Maths
  href: MLEM.html
  name: MLEM.Maths
  nameWithType: MLEM.Maths
  fullName: MLEM.Maths
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Maths
    name: Maths
    href: MLEM.Maths.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Maths
    name: Maths
    href: MLEM.Maths.html
- uid: MLEM.Ui.Elements.Element.ChildPadding
  commentId: P:MLEM.Ui.Elements.Element.ChildPadding
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ChildPadding
  name: ChildPadding
  nameWithType: Element.ChildPadding
  fullName: MLEM.Ui.Elements.Element.ChildPadding
- uid: MLEM.Ui.Elements.Element.ScaledChildPadding*
  commentId: Overload:MLEM.Ui.Elements.Element.ScaledChildPadding
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ScaledChildPadding
  name: ScaledChildPadding
  nameWithType: Element.ScaledChildPadding
  fullName: MLEM.Ui.Elements.Element.ScaledChildPadding
- uid: MLEM.Ui.Elements.Element.ScaledChildPadding
  commentId: P:MLEM.Ui.Elements.Element.ScaledChildPadding
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ScaledChildPadding
  name: ScaledChildPadding
  nameWithType: Element.ScaledChildPadding
  fullName: MLEM.Ui.Elements.Element.ScaledChildPadding
- uid: MLEM.Ui.Elements.Element.ChildPaddedArea*
  commentId: Overload:MLEM.Ui.Elements.Element.ChildPaddedArea
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ChildPaddedArea
  name: ChildPaddedArea
  nameWithType: Element.ChildPaddedArea
  fullName: MLEM.Ui.Elements.Element.ChildPaddedArea
- uid: MLEM.Maths.RectangleF
  commentId: T:MLEM.Maths.RectangleF
  parent: MLEM.Maths
  href: MLEM.Maths.RectangleF.html
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Maths.RectangleF
- uid: MLEM.Ui.Elements.Element.ScrollOffset
  commentId: F:MLEM.Ui.Elements.Element.ScrollOffset
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ScrollOffset
  name: ScrollOffset
  nameWithType: Element.ScrollOffset
  fullName: MLEM.Ui.Elements.Element.ScrollOffset
- uid: MLEM.Ui.Elements.Element.UnscrolledArea*
  commentId: Overload:MLEM.Ui.Elements.Element.UnscrolledArea
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_UnscrolledArea
  name: UnscrolledArea
  nameWithType: Element.UnscrolledArea
  fullName: MLEM.Ui.Elements.Element.UnscrolledArea
- uid: MLEM.Ui.Elements.Element.UnscrolledArea
  commentId: P:MLEM.Ui.Elements.Element.UnscrolledArea
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_UnscrolledArea
  name: UnscrolledArea
  nameWithType: Element.UnscrolledArea
  fullName: MLEM.Ui.Elements.Element.UnscrolledArea
- uid: MLEM.Ui.Elements.Element.ScaledScrollOffset
  commentId: P:MLEM.Ui.Elements.Element.ScaledScrollOffset
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ScaledScrollOffset
  name: ScaledScrollOffset
  nameWithType: Element.ScaledScrollOffset
  fullName: MLEM.Ui.Elements.Element.ScaledScrollOffset
- uid: MLEM.Ui.Elements.Element.Area*
  commentId: Overload:MLEM.Ui.Elements.Element.Area
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Area
  name: Area
  nameWithType: Element.Area
  fullName: MLEM.Ui.Elements.Element.Area
- uid: MLEM.Ui.Elements.Element.ScaledPadding
  commentId: P:MLEM.Ui.Elements.Element.ScaledPadding
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ScaledPadding
  name: ScaledPadding
  nameWithType: Element.ScaledPadding
  fullName: MLEM.Ui.Elements.Element.ScaledPadding
- uid: MLEM.Ui.Elements.Element.DisplayArea*
  commentId: Overload:MLEM.Ui.Elements.Element.DisplayArea
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_DisplayArea
  name: DisplayArea
  nameWithType: Element.DisplayArea
  fullName: MLEM.Ui.Elements.Element.DisplayArea
- uid: MLEM.Ui.Elements.Panel
  commentId: T:MLEM.Ui.Elements.Panel
  parent: MLEM.Ui.Elements
  href: MLEM.Ui.Elements.Panel.html
  name: Panel
  nameWithType: Panel
  fullName: MLEM.Ui.Elements.Panel
- uid: MLEM.Ui.Elements.Element.ScaledScrollOffset*
  commentId: Overload:MLEM.Ui.Elements.Element.ScaledScrollOffset
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ScaledScrollOffset
  name: ScaledScrollOffset
  nameWithType: Element.ScaledScrollOffset
  fullName: MLEM.Ui.Elements.Element.ScaledScrollOffset
- uid: MLEM.Ui.Elements.Element.IsHidden*
  commentId: Overload:MLEM.Ui.Elements.Element.IsHidden
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_IsHidden
  name: IsHidden
  nameWithType: Element.IsHidden
  fullName: MLEM.Ui.Elements.Element.IsHidden
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: MLEM.Ui.Elements.Element.Priority*
  commentId: Overload:MLEM.Ui.Elements.Element.Priority
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Priority
  name: Priority
  nameWithType: Element.Priority
  fullName: MLEM.Ui.Elements.Element.Priority
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: MLEM.Ui.Elements.Element.ScaleTransform(System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2})
  commentId: M:MLEM.Ui.Elements.Element.ScaleTransform(System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2})
  parent: MLEM.Ui.Elements.Element
  isExternal: true
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ScaleTransform_System_Single_System_Nullable_Microsoft_Xna_Framework_Vector2__
  name: ScaleTransform(float, Vector2?)
  nameWithType: Element.ScaleTransform(float, Vector2?)
  fullName: MLEM.Ui.Elements.Element.ScaleTransform(float, Microsoft.Xna.Framework.Vector2?)
  nameWithType.vb: Element.ScaleTransform(Single, Vector2?)
  fullName.vb: MLEM.Ui.Elements.Element.ScaleTransform(Single, Microsoft.Xna.Framework.Vector2?)
  name.vb: ScaleTransform(Single, Vector2?)
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element.ScaleTransform(System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2})
    name: ScaleTransform
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ScaleTransform_System_Single_System_Nullable_Microsoft_Xna_Framework_Vector2__
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.Element.ScaleTransform(System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2})
    name: ScaleTransform
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ScaleTransform_System_Single_System_Nullable_Microsoft_Xna_Framework_Vector2__
  - name: (
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: )
- uid: Microsoft.Xna.Framework.Matrix
  commentId: T:Microsoft.Xna.Framework.Matrix
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Matrix
  nameWithType: Matrix
  fullName: Microsoft.Xna.Framework.Matrix
- uid: MLEM.Ui.Elements.Element.OnSelected
  commentId: F:MLEM.Ui.Elements.Element.OnSelected
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_OnSelected
  name: OnSelected
  nameWithType: Element.OnSelected
  fullName: MLEM.Ui.Elements.Element.OnSelected
- uid: MLEM.Ui.Elements.Element.CanBeSelected*
  commentId: Overload:MLEM.Ui.Elements.Element.CanBeSelected
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_CanBeSelected
  name: CanBeSelected
  nameWithType: Element.CanBeSelected
  fullName: MLEM.Ui.Elements.Element.CanBeSelected
- uid: MLEM.Ui.Elements.Element.CanBeMoused*
  commentId: Overload:MLEM.Ui.Elements.Element.CanBeMoused
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_CanBeMoused
  name: CanBeMoused
  nameWithType: Element.CanBeMoused
  fullName: MLEM.Ui.Elements.Element.CanBeMoused
- uid: MLEM.Ui.Elements.Element.OnPressed
  commentId: F:MLEM.Ui.Elements.Element.OnPressed
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_OnPressed
  name: OnPressed
  nameWithType: Element.OnPressed
  fullName: MLEM.Ui.Elements.Element.OnPressed
- uid: MLEM.Ui.Elements.Element.OnSecondaryPressed
  commentId: F:MLEM.Ui.Elements.Element.OnSecondaryPressed
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_OnSecondaryPressed
  name: OnSecondaryPressed
  nameWithType: Element.OnSecondaryPressed
  fullName: MLEM.Ui.Elements.Element.OnSecondaryPressed
- uid: MLEM.Ui.Elements.Element.CanBePressed*
  commentId: Overload:MLEM.Ui.Elements.Element.CanBePressed
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_CanBePressed
  name: CanBePressed
  nameWithType: Element.CanBePressed
  fullName: MLEM.Ui.Elements.Element.CanBePressed
- uid: MLEM.Ui.Elements.Element.CanAutoAnchorsAttach*
  commentId: Overload:MLEM.Ui.Elements.Element.CanAutoAnchorsAttach
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_CanAutoAnchorsAttach
  name: CanAutoAnchorsAttach
  nameWithType: Element.CanAutoAnchorsAttach
  fullName: MLEM.Ui.Elements.Element.CanAutoAnchorsAttach
- uid: MLEM.Ui.Elements.Element.Children
  commentId: F:MLEM.Ui.Elements.Element.Children
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Children
  name: Children
  nameWithType: Element.Children
  fullName: MLEM.Ui.Elements.Element.Children
- uid: MLEM.Ui.Elements.Element.TreatSizeAsMinimum
  commentId: P:MLEM.Ui.Elements.Element.TreatSizeAsMinimum
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_TreatSizeAsMinimum
  name: TreatSizeAsMinimum
  nameWithType: Element.TreatSizeAsMinimum
  fullName: MLEM.Ui.Elements.Element.TreatSizeAsMinimum
- uid: MLEM.Ui.Elements.Element.TreatSizeAsMaximum
  commentId: P:MLEM.Ui.Elements.Element.TreatSizeAsMaximum
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_TreatSizeAsMaximum
  name: TreatSizeAsMaximum
  nameWithType: Element.TreatSizeAsMaximum
  fullName: MLEM.Ui.Elements.Element.TreatSizeAsMaximum
- uid: MLEM.Ui.Elements.Element.SetWidthBasedOnChildren*
  commentId: Overload:MLEM.Ui.Elements.Element.SetWidthBasedOnChildren
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_SetWidthBasedOnChildren
  name: SetWidthBasedOnChildren
  nameWithType: Element.SetWidthBasedOnChildren
  fullName: MLEM.Ui.Elements.Element.SetWidthBasedOnChildren
- uid: MLEM.Ui.Elements.Element.SetHeightBasedOnChildren*
  commentId: Overload:MLEM.Ui.Elements.Element.SetHeightBasedOnChildren
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_SetHeightBasedOnChildren
  name: SetHeightBasedOnChildren
  nameWithType: Element.SetHeightBasedOnChildren
  fullName: MLEM.Ui.Elements.Element.SetHeightBasedOnChildren
- uid: MLEM.Ui.Elements.Element.SetWidthBasedOnChildren
  commentId: P:MLEM.Ui.Elements.Element.SetWidthBasedOnChildren
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_SetWidthBasedOnChildren
  name: SetWidthBasedOnChildren
  nameWithType: Element.SetWidthBasedOnChildren
  fullName: MLEM.Ui.Elements.Element.SetWidthBasedOnChildren
- uid: MLEM.Ui.Elements.Element.SetHeightBasedOnChildren
  commentId: P:MLEM.Ui.Elements.Element.SetHeightBasedOnChildren
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_SetHeightBasedOnChildren
  name: SetHeightBasedOnChildren
  nameWithType: Element.SetHeightBasedOnChildren
  fullName: MLEM.Ui.Elements.Element.SetHeightBasedOnChildren
- uid: MLEM.Ui.Elements.Element.TreatSizeAsMinimum*
  commentId: Overload:MLEM.Ui.Elements.Element.TreatSizeAsMinimum
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_TreatSizeAsMinimum
  name: TreatSizeAsMinimum
  nameWithType: Element.TreatSizeAsMinimum
  fullName: MLEM.Ui.Elements.Element.TreatSizeAsMinimum
- uid: MLEM.Ui.Elements.Element.TreatSizeAsMaximum*
  commentId: Overload:MLEM.Ui.Elements.Element.TreatSizeAsMaximum
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_TreatSizeAsMaximum
  name: TreatSizeAsMaximum
  nameWithType: Element.TreatSizeAsMaximum
  fullName: MLEM.Ui.Elements.Element.TreatSizeAsMaximum
- uid: MLEM.Ui.Elements.Element.PreventParentSpill*
  commentId: Overload:MLEM.Ui.Elements.Element.PreventParentSpill
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_PreventParentSpill
  name: PreventParentSpill
  nameWithType: Element.PreventParentSpill
  fullName: MLEM.Ui.Elements.Element.PreventParentSpill
- uid: MLEM.Ui.Elements.Element.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,MLEM.Graphics.SpriteBatchContext)
  commentId: M:MLEM.Ui.Elements.Element.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,MLEM.Graphics.SpriteBatchContext)
  parent: MLEM.Ui.Elements.Element
  isExternal: true
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Draw_Microsoft_Xna_Framework_GameTime_Microsoft_Xna_Framework_Graphics_SpriteBatch_System_Single_MLEM_Graphics_SpriteBatchContext_
  name: Draw(GameTime, SpriteBatch, float, SpriteBatchContext)
  nameWithType: Element.Draw(GameTime, SpriteBatch, float, SpriteBatchContext)
  fullName: MLEM.Ui.Elements.Element.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, float, MLEM.Graphics.SpriteBatchContext)
  nameWithType.vb: Element.Draw(GameTime, SpriteBatch, Single, SpriteBatchContext)
  fullName.vb: MLEM.Ui.Elements.Element.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Single, MLEM.Graphics.SpriteBatchContext)
  name.vb: Draw(GameTime, SpriteBatch, Single, SpriteBatchContext)
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,MLEM.Graphics.SpriteBatchContext)
    name: Draw
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Draw_Microsoft_Xna_Framework_GameTime_Microsoft_Xna_Framework_Graphics_SpriteBatch_System_Single_MLEM_Graphics_SpriteBatchContext_
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: MLEM.Graphics.SpriteBatchContext
    name: SpriteBatchContext
    href: MLEM.Graphics.SpriteBatchContext.html
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.Element.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,MLEM.Graphics.SpriteBatchContext)
    name: Draw
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Draw_Microsoft_Xna_Framework_GameTime_Microsoft_Xna_Framework_Graphics_SpriteBatch_System_Single_MLEM_Graphics_SpriteBatchContext_
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: MLEM.Graphics.SpriteBatchContext
    name: SpriteBatchContext
    href: MLEM.Graphics.SpriteBatchContext.html
  - name: )
- uid: MLEM.Ui.Elements.Element.DrawAlpha*
  commentId: Overload:MLEM.Ui.Elements.Element.DrawAlpha
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_DrawAlpha
  name: DrawAlpha
  nameWithType: Element.DrawAlpha
  fullName: MLEM.Ui.Elements.Element.DrawAlpha
- uid: MLEM.Ui.Elements.Element.IsMouseOver*
  commentId: Overload:MLEM.Ui.Elements.Element.IsMouseOver
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_IsMouseOver
  name: IsMouseOver
  nameWithType: Element.IsMouseOver
  fullName: MLEM.Ui.Elements.Element.IsMouseOver
- uid: MLEM.Ui.Elements.Element.Root
  commentId: P:MLEM.Ui.Elements.Element.Root
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Root
  name: Root
  nameWithType: Element.Root
  fullName: MLEM.Ui.Elements.Element.Root
- uid: MLEM.Ui.RootElement.SelectedElement
  commentId: P:MLEM.Ui.RootElement.SelectedElement
  href: MLEM.Ui.RootElement.html#MLEM_Ui_RootElement_SelectedElement
  name: SelectedElement
  nameWithType: RootElement.SelectedElement
  fullName: MLEM.Ui.RootElement.SelectedElement
- uid: MLEM.Ui.Elements.Element.IsSelectedActive
  commentId: P:MLEM.Ui.Elements.Element.IsSelectedActive
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_IsSelectedActive
  name: IsSelectedActive
  nameWithType: Element.IsSelectedActive
  fullName: MLEM.Ui.Elements.Element.IsSelectedActive
- uid: MLEM.Ui.UiControls.ActiveRoot
  commentId: P:MLEM.Ui.UiControls.ActiveRoot
  href: MLEM.Ui.UiControls.html#MLEM_Ui_UiControls_ActiveRoot
  name: ActiveRoot
  nameWithType: UiControls.ActiveRoot
  fullName: MLEM.Ui.UiControls.ActiveRoot
- uid: MLEM.Ui.Elements.Element.IsSelected*
  commentId: Overload:MLEM.Ui.Elements.Element.IsSelected
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_IsSelected
  name: IsSelected
  nameWithType: Element.IsSelected
  fullName: MLEM.Ui.Elements.Element.IsSelected
- uid: MLEM.Ui.Elements.Element.Controls
  commentId: F:MLEM.Ui.Elements.Element.Controls
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Controls
  name: Controls
  nameWithType: Element.Controls
  fullName: MLEM.Ui.Elements.Element.Controls
- uid: MLEM.Ui.UiControls.SelectedElement
  commentId: P:MLEM.Ui.UiControls.SelectedElement
  href: MLEM.Ui.UiControls.html#MLEM_Ui_UiControls_SelectedElement
  name: SelectedElement
  nameWithType: UiControls.SelectedElement
  fullName: MLEM.Ui.UiControls.SelectedElement
- uid: MLEM.Ui.Elements.Element.IsSelected
  commentId: P:MLEM.Ui.Elements.Element.IsSelected
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_IsSelected
  name: IsSelected
  nameWithType: Element.IsSelected
  fullName: MLEM.Ui.Elements.Element.IsSelected
- uid: MLEM.Ui.Elements.Element.IsSelectedActive*
  commentId: Overload:MLEM.Ui.Elements.Element.IsSelectedActive
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_IsSelectedActive
  name: IsSelectedActive
  nameWithType: Element.IsSelectedActive
  fullName: MLEM.Ui.Elements.Element.IsSelectedActive
- uid: MLEM.Ui.Elements.Element.SetAreaDirty
  commentId: M:MLEM.Ui.Elements.Element.SetAreaDirty
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_SetAreaDirty
  name: SetAreaDirty()
  nameWithType: Element.SetAreaDirty()
  fullName: MLEM.Ui.Elements.Element.SetAreaDirty()
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element.SetAreaDirty
    name: SetAreaDirty
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_SetAreaDirty
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.Element.SetAreaDirty
    name: SetAreaDirty
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_SetAreaDirty
  - name: (
  - name: )
- uid: MLEM.Ui.Elements.Element.UpdateAreaIfDirty
  commentId: M:MLEM.Ui.Elements.Element.UpdateAreaIfDirty
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_UpdateAreaIfDirty
  name: UpdateAreaIfDirty()
  nameWithType: Element.UpdateAreaIfDirty()
  fullName: MLEM.Ui.Elements.Element.UpdateAreaIfDirty()
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element.UpdateAreaIfDirty
    name: UpdateAreaIfDirty
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_UpdateAreaIfDirty
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.Element.UpdateAreaIfDirty
    name: UpdateAreaIfDirty
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_UpdateAreaIfDirty
  - name: (
  - name: )
- uid: MLEM.Ui.Elements.Element.ForceUpdateArea
  commentId: M:MLEM.Ui.Elements.Element.ForceUpdateArea
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ForceUpdateArea
  name: ForceUpdateArea()
  nameWithType: Element.ForceUpdateArea()
  fullName: MLEM.Ui.Elements.Element.ForceUpdateArea()
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element.ForceUpdateArea
    name: ForceUpdateArea
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ForceUpdateArea
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.Element.ForceUpdateArea
    name: ForceUpdateArea
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ForceUpdateArea
  - name: (
  - name: )
- uid: MLEM.Ui.Elements.Element.AreaDirty*
  commentId: Overload:MLEM.Ui.Elements.Element.AreaDirty
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_AreaDirty
  name: AreaDirty
  nameWithType: Element.AreaDirty
  fullName: MLEM.Ui.Elements.Element.AreaDirty
- uid: MLEM.Ui.Elements.Element.AutoNavGroup*
  commentId: Overload:MLEM.Ui.Elements.Element.AutoNavGroup
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_AutoNavGroup
  name: AutoNavGroup
  nameWithType: Element.AutoNavGroup
  fullName: MLEM.Ui.Elements.Element.AutoNavGroup
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: MLEM.Ui.Style.UiStyle
  commentId: T:MLEM.Ui.Style.UiStyle
  parent: MLEM.Ui.Style
  href: MLEM.Ui.Style.UiStyle.html
  name: UiStyle
  nameWithType: UiStyle
  fullName: MLEM.Ui.Style.UiStyle
- uid: MLEM.Ui.Elements.Element.InitStyle(MLEM.Ui.Style.UiStyle)
  commentId: M:MLEM.Ui.Elements.Element.InitStyle(MLEM.Ui.Style.UiStyle)
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_InitStyle_MLEM_Ui_Style_UiStyle_
  name: InitStyle(UiStyle)
  nameWithType: Element.InitStyle(UiStyle)
  fullName: MLEM.Ui.Elements.Element.InitStyle(MLEM.Ui.Style.UiStyle)
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element.InitStyle(MLEM.Ui.Style.UiStyle)
    name: InitStyle
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_InitStyle_MLEM_Ui_Style_UiStyle_
  - name: (
  - uid: MLEM.Ui.Style.UiStyle
    name: UiStyle
    href: MLEM.Ui.Style.UiStyle.html
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.Element.InitStyle(MLEM.Ui.Style.UiStyle)
    name: InitStyle
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_InitStyle_MLEM_Ui_Style_UiStyle_
  - name: (
  - uid: MLEM.Ui.Style.UiStyle
    name: UiStyle
    href: MLEM.Ui.Style.UiStyle.html
  - name: )
- uid: MLEM.Ui.Elements.Element.Style*
  commentId: Overload:MLEM.Ui.Elements.Element.Style
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Style
  name: Style
  nameWithType: Element.Style
  fullName: MLEM.Ui.Elements.Element.Style
- uid: MLEM.Ui.Style.StyleProp{MLEM.Ui.Style.UiStyle}
  commentId: T:MLEM.Ui.Style.StyleProp{MLEM.Ui.Style.UiStyle}
  parent: MLEM.Ui.Style
  definition: MLEM.Ui.Style.StyleProp`1
  href: MLEM.Ui.Style.StyleProp-1.html
  name: StyleProp<UiStyle>
  nameWithType: StyleProp<UiStyle>
  fullName: MLEM.Ui.Style.StyleProp<MLEM.Ui.Style.UiStyle>
  nameWithType.vb: StyleProp(Of UiStyle)
  fullName.vb: MLEM.Ui.Style.StyleProp(Of MLEM.Ui.Style.UiStyle)
  name.vb: StyleProp(Of UiStyle)
  spec.csharp:
  - uid: MLEM.Ui.Style.StyleProp`1
    name: StyleProp
    href: MLEM.Ui.Style.StyleProp-1.html
  - name: <
  - uid: MLEM.Ui.Style.UiStyle
    name: UiStyle
    href: MLEM.Ui.Style.UiStyle.html
  - name: '>'
  spec.vb:
  - uid: MLEM.Ui.Style.StyleProp`1
    name: StyleProp
    href: MLEM.Ui.Style.StyleProp-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Style.UiStyle
    name: UiStyle
    href: MLEM.Ui.Style.UiStyle.html
  - name: )
- uid: MLEM.Ui.Style
  commentId: N:MLEM.Ui.Style
  href: MLEM.html
  name: MLEM.Ui.Style
  nameWithType: MLEM.Ui.Style
  fullName: MLEM.Ui.Style
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Ui
    name: Ui
    href: MLEM.Ui.html
  - name: .
  - uid: MLEM.Ui.Style
    name: Style
    href: MLEM.Ui.Style.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Ui
    name: Ui
    href: MLEM.Ui.html
  - name: .
  - uid: MLEM.Ui.Style
    name: Style
    href: MLEM.Ui.Style.html
- uid: MLEM.Ui.Style.StyleProp`1
  commentId: T:MLEM.Ui.Style.StyleProp`1
  parent: MLEM.Ui.Style
  href: MLEM.Ui.Style.StyleProp-1.html
  name: StyleProp<T>
  nameWithType: StyleProp<T>
  fullName: MLEM.Ui.Style.StyleProp<T>
  nameWithType.vb: StyleProp(Of T)
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T)
  name.vb: StyleProp(Of T)
  spec.csharp:
  - uid: MLEM.Ui.Style.StyleProp`1
    name: StyleProp
    href: MLEM.Ui.Style.StyleProp-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: MLEM.Ui.Style.StyleProp`1
    name: StyleProp
    href: MLEM.Ui.Style.StyleProp-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Ui.Style.StyleProp{MLEM.Textures.NinePatch}
  commentId: T:MLEM.Ui.Style.StyleProp{MLEM.Textures.NinePatch}
  parent: MLEM.Ui.Style
  definition: MLEM.Ui.Style.StyleProp`1
  href: MLEM.Ui.Style.StyleProp-1.html
  name: StyleProp<NinePatch>
  nameWithType: StyleProp<NinePatch>
  fullName: MLEM.Ui.Style.StyleProp<MLEM.Textures.NinePatch>
  nameWithType.vb: StyleProp(Of NinePatch)
  fullName.vb: MLEM.Ui.Style.StyleProp(Of MLEM.Textures.NinePatch)
  name.vb: StyleProp(Of NinePatch)
  spec.csharp:
  - uid: MLEM.Ui.Style.StyleProp`1
    name: StyleProp
    href: MLEM.Ui.Style.StyleProp-1.html
  - name: <
  - uid: MLEM.Textures.NinePatch
    name: NinePatch
    href: MLEM.Textures.NinePatch.html
  - name: '>'
  spec.vb:
  - uid: MLEM.Ui.Style.StyleProp`1
    name: StyleProp
    href: MLEM.Ui.Style.StyleProp-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Textures.NinePatch
    name: NinePatch
    href: MLEM.Textures.NinePatch.html
  - name: )
- uid: MLEM.Ui.Style.StyleProp{MLEM.Sound.SoundEffectInfo}
  commentId: T:MLEM.Ui.Style.StyleProp{MLEM.Sound.SoundEffectInfo}
  parent: MLEM.Ui.Style
  definition: MLEM.Ui.Style.StyleProp`1
  href: MLEM.Ui.Style.StyleProp-1.html
  name: StyleProp<SoundEffectInfo>
  nameWithType: StyleProp<SoundEffectInfo>
  fullName: MLEM.Ui.Style.StyleProp<MLEM.Sound.SoundEffectInfo>
  nameWithType.vb: StyleProp(Of SoundEffectInfo)
  fullName.vb: MLEM.Ui.Style.StyleProp(Of MLEM.Sound.SoundEffectInfo)
  name.vb: StyleProp(Of SoundEffectInfo)
  spec.csharp:
  - uid: MLEM.Ui.Style.StyleProp`1
    name: StyleProp
    href: MLEM.Ui.Style.StyleProp-1.html
  - name: <
  - uid: MLEM.Sound.SoundEffectInfo
    name: SoundEffectInfo
    href: MLEM.Sound.SoundEffectInfo.html
  - name: '>'
  spec.vb:
  - uid: MLEM.Ui.Style.StyleProp`1
    name: StyleProp
    href: MLEM.Ui.Style.StyleProp-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Sound.SoundEffectInfo
    name: SoundEffectInfo
    href: MLEM.Sound.SoundEffectInfo.html
  - name: )
- uid: MLEM.Ui.Elements.Element.DisplayArea
  commentId: P:MLEM.Ui.Elements.Element.DisplayArea
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_DisplayArea
  name: DisplayArea
  nameWithType: Element.DisplayArea
  fullName: MLEM.Ui.Elements.Element.DisplayArea
- uid: MLEM.Ui.Style.StyleProp{MLEM.Maths.Padding}
  commentId: T:MLEM.Ui.Style.StyleProp{MLEM.Maths.Padding}
  parent: MLEM.Ui.Style
  definition: MLEM.Ui.Style.StyleProp`1
  href: MLEM.Ui.Style.StyleProp-1.html
  name: StyleProp<Padding>
  nameWithType: StyleProp<Padding>
  fullName: MLEM.Ui.Style.StyleProp<MLEM.Maths.Padding>
  nameWithType.vb: StyleProp(Of Padding)
  fullName.vb: MLEM.Ui.Style.StyleProp(Of MLEM.Maths.Padding)
  name.vb: StyleProp(Of Padding)
  spec.csharp:
  - uid: MLEM.Ui.Style.StyleProp`1
    name: StyleProp
    href: MLEM.Ui.Style.StyleProp-1.html
  - name: <
  - uid: MLEM.Maths.Padding
    name: Padding
    href: MLEM.Maths.Padding.html
  - name: '>'
  spec.vb:
  - uid: MLEM.Ui.Style.StyleProp`1
    name: StyleProp
    href: MLEM.Ui.Style.StyleProp-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Maths.Padding
    name: Padding
    href: MLEM.Maths.Padding.html
  - name: )
- uid: MLEM.Ui.Elements.Element.ChildPadding*
  commentId: Overload:MLEM.Ui.Elements.Element.ChildPadding
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ChildPadding
  name: ChildPadding
  nameWithType: Element.ChildPadding
  fullName: MLEM.Ui.Elements.Element.ChildPadding
- uid: MLEM.Ui.UiAnimation
  commentId: T:MLEM.Ui.UiAnimation
  parent: MLEM.Ui
  href: MLEM.Ui.UiAnimation.html
  name: UiAnimation
  nameWithType: UiAnimation
  fullName: MLEM.Ui.UiAnimation
- uid: MLEM.Ui.Elements.Element.OnMouseEnter
  commentId: F:MLEM.Ui.Elements.Element.OnMouseEnter
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_OnMouseEnter
  name: OnMouseEnter
  nameWithType: Element.OnMouseEnter
  fullName: MLEM.Ui.Elements.Element.OnMouseEnter
- uid: MLEM.Ui.Style.StyleProp{MLEM.Ui.UiAnimation}
  commentId: T:MLEM.Ui.Style.StyleProp{MLEM.Ui.UiAnimation}
  parent: MLEM.Ui.Style
  definition: MLEM.Ui.Style.StyleProp`1
  href: MLEM.Ui.Style.StyleProp-1.html
  name: StyleProp<UiAnimation>
  nameWithType: StyleProp<UiAnimation>
  fullName: MLEM.Ui.Style.StyleProp<MLEM.Ui.UiAnimation>
  nameWithType.vb: StyleProp(Of UiAnimation)
  fullName.vb: MLEM.Ui.Style.StyleProp(Of MLEM.Ui.UiAnimation)
  name.vb: StyleProp(Of UiAnimation)
  spec.csharp:
  - uid: MLEM.Ui.Style.StyleProp`1
    name: StyleProp
    href: MLEM.Ui.Style.StyleProp-1.html
  - name: <
  - uid: MLEM.Ui.UiAnimation
    name: UiAnimation
    href: MLEM.Ui.UiAnimation.html
  - name: '>'
  spec.vb:
  - uid: MLEM.Ui.Style.StyleProp`1
    name: StyleProp
    href: MLEM.Ui.Style.StyleProp-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.UiAnimation
    name: UiAnimation
    href: MLEM.Ui.UiAnimation.html
  - name: )
- uid: MLEM.Ui.Elements.Element.OnMouseExit
  commentId: F:MLEM.Ui.Elements.Element.OnMouseExit
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_OnMouseExit
  name: OnMouseExit
  nameWithType: Element.OnMouseExit
  fullName: MLEM.Ui.Elements.Element.OnMouseExit
- uid: MLEM.Ui.Elements.Element.DrawCallback
  commentId: T:MLEM.Ui.Elements.Element.DrawCallback
  parent: MLEM.Ui.Elements
  href: MLEM.Ui.Elements.Element.html
  name: Element.DrawCallback
  nameWithType: Element.DrawCallback
  fullName: MLEM.Ui.Elements.Element.DrawCallback
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: .
  - uid: MLEM.Ui.Elements.Element.DrawCallback
    name: DrawCallback
    href: MLEM.Ui.Elements.Element.DrawCallback.html
  spec.vb:
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: .
  - uid: MLEM.Ui.Elements.Element.DrawCallback
    name: DrawCallback
    href: MLEM.Ui.Elements.Element.DrawCallback.html
- uid: MLEM.Ui.Elements.Element.TimeCallback
  commentId: T:MLEM.Ui.Elements.Element.TimeCallback
  parent: MLEM.Ui.Elements
  href: MLEM.Ui.Elements.Element.html
  name: Element.TimeCallback
  nameWithType: Element.TimeCallback
  fullName: MLEM.Ui.Elements.Element.TimeCallback
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: .
  - uid: MLEM.Ui.Elements.Element.TimeCallback
    name: TimeCallback
    href: MLEM.Ui.Elements.Element.TimeCallback.html
  spec.vb:
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: .
  - uid: MLEM.Ui.Elements.Element.TimeCallback
    name: TimeCallback
    href: MLEM.Ui.Elements.Element.TimeCallback.html
- uid: MLEM.Ui.Elements.Element.GenericCallback
  commentId: T:MLEM.Ui.Elements.Element.GenericCallback
  parent: MLEM.Ui.Elements
  href: MLEM.Ui.Elements.Element.html
  name: Element.GenericCallback
  nameWithType: Element.GenericCallback
  fullName: MLEM.Ui.Elements.Element.GenericCallback
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: .
  - uid: MLEM.Ui.Elements.Element.GenericCallback
    name: GenericCallback
    href: MLEM.Ui.Elements.Element.GenericCallback.html
  spec.vb:
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: .
  - uid: MLEM.Ui.Elements.Element.GenericCallback
    name: GenericCallback
    href: MLEM.Ui.Elements.Element.GenericCallback.html
- uid: MLEM.Misc.MlemPlatform.EnsureExists
  commentId: M:MLEM.Misc.MlemPlatform.EnsureExists
  parent: MLEM.Misc.MlemPlatform
  href: MLEM.Misc.MlemPlatform.html#MLEM_Misc_MlemPlatform_EnsureExists
  name: EnsureExists()
  nameWithType: MlemPlatform.EnsureExists()
  fullName: MLEM.Misc.MlemPlatform.EnsureExists()
  spec.csharp:
  - uid: MLEM.Misc.MlemPlatform.EnsureExists
    name: EnsureExists
    href: MLEM.Misc.MlemPlatform.html#MLEM_Misc_MlemPlatform_EnsureExists
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Misc.MlemPlatform.EnsureExists
    name: EnsureExists
    href: MLEM.Misc.MlemPlatform.html#MLEM_Misc_MlemPlatform_EnsureExists
  - name: (
  - name: )
- uid: MLEM.Misc.MlemPlatform
  commentId: T:MLEM.Misc.MlemPlatform
  parent: MLEM.Misc
  href: MLEM.Misc.MlemPlatform.html
  name: MlemPlatform
  nameWithType: MlemPlatform
  fullName: MLEM.Misc.MlemPlatform
- uid: MLEM.Ui.Elements.Element.TextInputCallback
  commentId: T:MLEM.Ui.Elements.Element.TextInputCallback
  parent: MLEM.Ui.Elements
  href: MLEM.Ui.Elements.Element.html
  name: Element.TextInputCallback
  nameWithType: Element.TextInputCallback
  fullName: MLEM.Ui.Elements.Element.TextInputCallback
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: .
  - uid: MLEM.Ui.Elements.Element.TextInputCallback
    name: TextInputCallback
    href: MLEM.Ui.Elements.Element.TextInputCallback.html
  spec.vb:
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: .
  - uid: MLEM.Ui.Elements.Element.TextInputCallback
    name: TextInputCallback
    href: MLEM.Ui.Elements.Element.TextInputCallback.html
- uid: MLEM.Ui.Elements.Element.Style
  commentId: P:MLEM.Ui.Elements.Element.Style
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Style
  name: Style
  nameWithType: Element.Style
  fullName: MLEM.Ui.Elements.Element.Style
- uid: MLEM.Ui.Elements.Element.OtherElementCallback
  commentId: T:MLEM.Ui.Elements.Element.OtherElementCallback
  parent: MLEM.Ui.Elements
  href: MLEM.Ui.Elements.Element.html
  name: Element.OtherElementCallback
  nameWithType: Element.OtherElementCallback
  fullName: MLEM.Ui.Elements.Element.OtherElementCallback
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: .
  - uid: MLEM.Ui.Elements.Element.OtherElementCallback
    name: OtherElementCallback
    href: MLEM.Ui.Elements.Element.OtherElementCallback.html
  spec.vb:
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: .
  - uid: MLEM.Ui.Elements.Element.OtherElementCallback
    name: OtherElementCallback
    href: MLEM.Ui.Elements.Element.OtherElementCallback.html
- uid: MLEM.Ui.Elements.Element.TabNextElementCallback
  commentId: T:MLEM.Ui.Elements.Element.TabNextElementCallback
  parent: MLEM.Ui.Elements
  href: MLEM.Ui.Elements.Element.html
  name: Element.TabNextElementCallback
  nameWithType: Element.TabNextElementCallback
  fullName: MLEM.Ui.Elements.Element.TabNextElementCallback
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: .
  - uid: MLEM.Ui.Elements.Element.TabNextElementCallback
    name: TabNextElementCallback
    href: MLEM.Ui.Elements.Element.TabNextElementCallback.html
  spec.vb:
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: .
  - uid: MLEM.Ui.Elements.Element.TabNextElementCallback
    name: TabNextElementCallback
    href: MLEM.Ui.Elements.Element.TabNextElementCallback.html
- uid: MLEM.Ui.Elements.Element.GamepadNextElementCallback
  commentId: T:MLEM.Ui.Elements.Element.GamepadNextElementCallback
  parent: MLEM.Ui.Elements
  href: MLEM.Ui.Elements.Element.html
  name: Element.GamepadNextElementCallback
  nameWithType: Element.GamepadNextElementCallback
  fullName: MLEM.Ui.Elements.Element.GamepadNextElementCallback
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: .
  - uid: MLEM.Ui.Elements.Element.GamepadNextElementCallback
    name: GamepadNextElementCallback
    href: MLEM.Ui.Elements.Element.GamepadNextElementCallback.html
  spec.vb:
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: .
  - uid: MLEM.Ui.Elements.Element.GamepadNextElementCallback
    name: GamepadNextElementCallback
    href: MLEM.Ui.Elements.Element.GamepadNextElementCallback.html
- uid: MLEM.Ui.Elements.Element.AddChild``1(``0,System.Int32)
  commentId: M:MLEM.Ui.Elements.Element.AddChild``1(``0,System.Int32)
  isExternal: true
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_AddChild__1___0_System_Int32_
  name: AddChild<T>(T, int)
  nameWithType: Element.AddChild<T>(T, int)
  fullName: MLEM.Ui.Elements.Element.AddChild<T>(T, int)
  nameWithType.vb: Element.AddChild(Of T)(T, Integer)
  fullName.vb: MLEM.Ui.Elements.Element.AddChild(Of T)(T, Integer)
  name.vb: AddChild(Of T)(T, Integer)
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element.AddChild``1(``0,System.Int32)
    name: AddChild
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_AddChild__1___0_System_Int32_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.Element.AddChild``1(``0,System.Int32)
    name: AddChild
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_AddChild__1___0_System_Int32_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Ui.RootElement.OnElementAdded
  commentId: E:MLEM.Ui.RootElement.OnElementAdded
  href: MLEM.Ui.RootElement.html#MLEM_Ui_RootElement_OnElementAdded
  name: OnElementAdded
  nameWithType: RootElement.OnElementAdded
  fullName: MLEM.Ui.RootElement.OnElementAdded
- uid: MLEM.Ui.Elements.Element.RemoveChild(MLEM.Ui.Elements.Element)
  commentId: M:MLEM.Ui.Elements.Element.RemoveChild(MLEM.Ui.Elements.Element)
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_RemoveChild_MLEM_Ui_Elements_Element_
  name: RemoveChild(Element)
  nameWithType: Element.RemoveChild(Element)
  fullName: MLEM.Ui.Elements.Element.RemoveChild(MLEM.Ui.Elements.Element)
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element.RemoveChild(MLEM.Ui.Elements.Element)
    name: RemoveChild
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_RemoveChild_MLEM_Ui_Elements_Element_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.Element.RemoveChild(MLEM.Ui.Elements.Element)
    name: RemoveChild
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_RemoveChild_MLEM_Ui_Elements_Element_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: )
- uid: MLEM.Ui.RootElement.OnElementRemoved
  commentId: E:MLEM.Ui.RootElement.OnElementRemoved
  href: MLEM.Ui.RootElement.html#MLEM_Ui_RootElement_OnElementRemoved
  name: OnElementRemoved
  nameWithType: RootElement.OnElementRemoved
  fullName: MLEM.Ui.RootElement.OnElementRemoved
- uid: System.Collections.Generic.IList{MLEM.Ui.Elements.Element}
  commentId: T:System.Collections.Generic.IList{MLEM.Ui.Elements.Element}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<Element>
  nameWithType: IList<Element>
  fullName: System.Collections.Generic.IList<MLEM.Ui.Elements.Element>
  nameWithType.vb: IList(Of Element)
  fullName.vb: System.Collections.Generic.IList(Of MLEM.Ui.Elements.Element)
  name.vb: IList(Of Element)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: MLEM.Ui.Elements.Element.PlayAnimation(MLEM.Ui.UiAnimation)
  commentId: M:MLEM.Ui.Elements.Element.PlayAnimation(MLEM.Ui.UiAnimation)
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_PlayAnimation_MLEM_Ui_UiAnimation_
  name: PlayAnimation(UiAnimation)
  nameWithType: Element.PlayAnimation(UiAnimation)
  fullName: MLEM.Ui.Elements.Element.PlayAnimation(MLEM.Ui.UiAnimation)
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element.PlayAnimation(MLEM.Ui.UiAnimation)
    name: PlayAnimation
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_PlayAnimation_MLEM_Ui_UiAnimation_
  - name: (
  - uid: MLEM.Ui.UiAnimation
    name: UiAnimation
    href: MLEM.Ui.UiAnimation.html
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.Element.PlayAnimation(MLEM.Ui.UiAnimation)
    name: PlayAnimation
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_PlayAnimation_MLEM_Ui_UiAnimation_
  - name: (
  - uid: MLEM.Ui.UiAnimation
    name: UiAnimation
    href: MLEM.Ui.UiAnimation.html
  - name: )
- uid: MLEM.Ui.Elements.Element.StopAnimation(MLEM.Ui.UiAnimation)
  commentId: M:MLEM.Ui.Elements.Element.StopAnimation(MLEM.Ui.UiAnimation)
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_StopAnimation_MLEM_Ui_UiAnimation_
  name: StopAnimation(UiAnimation)
  nameWithType: Element.StopAnimation(UiAnimation)
  fullName: MLEM.Ui.Elements.Element.StopAnimation(MLEM.Ui.UiAnimation)
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element.StopAnimation(MLEM.Ui.UiAnimation)
    name: StopAnimation
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_StopAnimation_MLEM_Ui_UiAnimation_
  - name: (
  - uid: MLEM.Ui.UiAnimation
    name: UiAnimation
    href: MLEM.Ui.UiAnimation.html
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.Element.StopAnimation(MLEM.Ui.UiAnimation)
    name: StopAnimation
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_StopAnimation_MLEM_Ui_UiAnimation_
  - name: (
  - uid: MLEM.Ui.UiAnimation
    name: UiAnimation
    href: MLEM.Ui.UiAnimation.html
  - name: )
- uid: System.Collections.Generic.List{MLEM.Ui.UiAnimation}
  commentId: T:System.Collections.Generic.List{MLEM.Ui.UiAnimation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<UiAnimation>
  nameWithType: List<UiAnimation>
  fullName: System.Collections.Generic.List<MLEM.Ui.UiAnimation>
  nameWithType.vb: List(Of UiAnimation)
  fullName.vb: System.Collections.Generic.List(Of MLEM.Ui.UiAnimation)
  name.vb: List(Of UiAnimation)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: MLEM.Ui.UiAnimation
    name: UiAnimation
    href: MLEM.Ui.UiAnimation.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.UiAnimation
    name: UiAnimation
    href: MLEM.Ui.UiAnimation.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Ui.Elements.Element.Priority
  commentId: P:MLEM.Ui.Elements.Element.Priority
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Priority
  name: Priority
  nameWithType: Element.Priority
  fullName: MLEM.Ui.Elements.Element.Priority
- uid: MLEM.Ui.Elements.Element.SortedChildren*
  commentId: Overload:MLEM.Ui.Elements.Element.SortedChildren
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_SortedChildren
  name: SortedChildren
  nameWithType: Element.SortedChildren
  fullName: MLEM.Ui.Elements.Element.SortedChildren
- uid: MLEM.Ui.Elements.Element.Input*
  commentId: Overload:MLEM.Ui.Elements.Element.Input
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Input
  name: Input
  nameWithType: Element.Input
  fullName: MLEM.Ui.Elements.Element.Input
- uid: MLEM.Input.InputHandler
  commentId: T:MLEM.Input.InputHandler
  parent: MLEM.Input
  href: MLEM.Input.InputHandler.html
  name: InputHandler
  nameWithType: InputHandler
  fullName: MLEM.Input.InputHandler
- uid: MLEM.Input
  commentId: N:MLEM.Input
  href: MLEM.html
  name: MLEM.Input
  nameWithType: MLEM.Input
  fullName: MLEM.Input
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Input
    name: Input
    href: MLEM.Input.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Input
    name: Input
    href: MLEM.Input.html
- uid: MLEM.Ui.Elements.Element.ChildPaddedArea
  commentId: P:MLEM.Ui.Elements.Element.ChildPaddedArea
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ChildPaddedArea
  name: ChildPaddedArea
  nameWithType: Element.ChildPaddedArea
  fullName: MLEM.Ui.Elements.Element.ChildPaddedArea
- uid: MLEM.Ui.UiSystem.Viewport
  commentId: P:MLEM.Ui.UiSystem.Viewport
  href: MLEM.Ui.UiSystem.html#MLEM_Ui_UiSystem_Viewport
  name: Viewport
  nameWithType: UiSystem.Viewport
  fullName: MLEM.Ui.UiSystem.Viewport
- uid: MLEM.Ui.Elements.Element.CalcActualSize(MLEM.Maths.RectangleF)
  commentId: M:MLEM.Ui.Elements.Element.CalcActualSize(MLEM.Maths.RectangleF)
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_CalcActualSize_MLEM_Maths_RectangleF_
  name: CalcActualSize(RectangleF)
  nameWithType: Element.CalcActualSize(RectangleF)
  fullName: MLEM.Ui.Elements.Element.CalcActualSize(MLEM.Maths.RectangleF)
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element.CalcActualSize(MLEM.Maths.RectangleF)
    name: CalcActualSize
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_CalcActualSize_MLEM_Maths_RectangleF_
  - name: (
  - uid: MLEM.Maths.RectangleF
    name: RectangleF
    href: MLEM.Maths.RectangleF.html
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.Element.CalcActualSize(MLEM.Maths.RectangleF)
    name: CalcActualSize
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_CalcActualSize_MLEM_Maths_RectangleF_
  - name: (
  - uid: MLEM.Maths.RectangleF
    name: RectangleF
    href: MLEM.Maths.RectangleF.html
  - name: )
- uid: MLEM.Ui.Elements.Element.ParentArea*
  commentId: Overload:MLEM.Ui.Elements.Element.ParentArea
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ParentArea
  name: ParentArea
  nameWithType: Element.ParentArea
  fullName: MLEM.Ui.Elements.Element.ParentArea
- uid: MLEM.Ui.Elements.Element.#ctor*
  commentId: Overload:MLEM.Ui.Elements.Element.#ctor
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element__ctor_MLEM_Ui_Anchor_Microsoft_Xna_Framework_Vector2_
  name: Element
  nameWithType: Element.Element
  fullName: MLEM.Ui.Elements.Element.Element
  nameWithType.vb: Element.New
  fullName.vb: MLEM.Ui.Elements.Element.New
  name.vb: New
- uid: MLEM.Ui.Elements.Element.AddChild*
  commentId: Overload:MLEM.Ui.Elements.Element.AddChild
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_AddChild__1___0_System_Int32_
  name: AddChild
  nameWithType: Element.AddChild
  fullName: MLEM.Ui.Elements.Element.AddChild
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: MLEM.Ui.Elements.Element.RemoveChild*
  commentId: Overload:MLEM.Ui.Elements.Element.RemoveChild
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_RemoveChild_MLEM_Ui_Elements_Element_
  name: RemoveChild
  nameWithType: Element.RemoveChild
  fullName: MLEM.Ui.Elements.Element.RemoveChild
- uid: MLEM.Ui.Elements.Element.RemoveChildren*
  commentId: Overload:MLEM.Ui.Elements.Element.RemoveChildren
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_RemoveChildren_System_Func_MLEM_Ui_Elements_Element_System_Boolean__
  name: RemoveChildren
  nameWithType: Element.RemoveChildren
  fullName: MLEM.Ui.Elements.Element.RemoveChildren
- uid: System.Func{MLEM.Ui.Elements.Element,System.Boolean}
  commentId: T:System.Func{MLEM.Ui.Elements.Element,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Element, bool>
  nameWithType: Func<Element, bool>
  fullName: System.Func<MLEM.Ui.Elements.Element, bool>
  nameWithType.vb: Func(Of Element, Boolean)
  fullName.vb: System.Func(Of MLEM.Ui.Elements.Element, Boolean)
  name.vb: Func(Of Element, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: MLEM.Ui.Elements.Element.SortedChildren
  commentId: P:MLEM.Ui.Elements.Element.SortedChildren
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_SortedChildren
  name: SortedChildren
  nameWithType: Element.SortedChildren
  fullName: MLEM.Ui.Elements.Element.SortedChildren
- uid: MLEM.Ui.Elements.Element.SetSortedChildrenDirty*
  commentId: Overload:MLEM.Ui.Elements.Element.SetSortedChildrenDirty
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_SetSortedChildrenDirty
  name: SetSortedChildrenDirty
  nameWithType: Element.SetSortedChildrenDirty
  fullName: MLEM.Ui.Elements.Element.SetSortedChildrenDirty
- uid: MLEM.Ui.Elements.Element.SetSortedChildrenDirty
  commentId: M:MLEM.Ui.Elements.Element.SetSortedChildrenDirty
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_SetSortedChildrenDirty
  name: SetSortedChildrenDirty()
  nameWithType: Element.SetSortedChildrenDirty()
  fullName: MLEM.Ui.Elements.Element.SetSortedChildrenDirty()
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element.SetSortedChildrenDirty
    name: SetSortedChildrenDirty
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_SetSortedChildrenDirty
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.Element.SetSortedChildrenDirty
    name: SetSortedChildrenDirty
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_SetSortedChildrenDirty
  - name: (
  - name: )
- uid: MLEM.Ui.Elements.Element.UpdateSortedChildrenIfDirty*
  commentId: Overload:MLEM.Ui.Elements.Element.UpdateSortedChildrenIfDirty
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_UpdateSortedChildrenIfDirty
  name: UpdateSortedChildrenIfDirty
  nameWithType: Element.UpdateSortedChildrenIfDirty
  fullName: MLEM.Ui.Elements.Element.UpdateSortedChildrenIfDirty
- uid: MLEM.Ui.Elements.Element.ForceUpdateSortedChildren*
  commentId: Overload:MLEM.Ui.Elements.Element.ForceUpdateSortedChildren
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ForceUpdateSortedChildren
  name: ForceUpdateSortedChildren
  nameWithType: Element.ForceUpdateSortedChildren
  fullName: MLEM.Ui.Elements.Element.ForceUpdateSortedChildren
- uid: MLEM.Ui.Elements.Element.SetAreaDirty*
  commentId: Overload:MLEM.Ui.Elements.Element.SetAreaDirty
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_SetAreaDirty
  name: SetAreaDirty
  nameWithType: Element.SetAreaDirty
  fullName: MLEM.Ui.Elements.Element.SetAreaDirty
- uid: MLEM.Ui.Elements.Element.AreaDirty
  commentId: P:MLEM.Ui.Elements.Element.AreaDirty
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_AreaDirty
  name: AreaDirty
  nameWithType: Element.AreaDirty
  fullName: MLEM.Ui.Elements.Element.AreaDirty
- uid: MLEM.Ui.Elements.Element.UpdateAreaIfDirty*
  commentId: Overload:MLEM.Ui.Elements.Element.UpdateAreaIfDirty
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_UpdateAreaIfDirty
  name: UpdateAreaIfDirty
  nameWithType: Element.UpdateAreaIfDirty
  fullName: MLEM.Ui.Elements.Element.UpdateAreaIfDirty
- uid: MLEM.Ui.Elements.Element.IsHidden
  commentId: P:MLEM.Ui.Elements.Element.IsHidden
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_IsHidden
  name: IsHidden
  nameWithType: Element.IsHidden
  fullName: MLEM.Ui.Elements.Element.IsHidden
- uid: MLEM.Ui.Elements.Element.ForceUpdateArea*
  commentId: Overload:MLEM.Ui.Elements.Element.ForceUpdateArea
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ForceUpdateArea
  name: ForceUpdateArea
  nameWithType: Element.ForceUpdateArea
  fullName: MLEM.Ui.Elements.Element.ForceUpdateArea
- uid: MLEM.Ui.UiSystem.OnElementAreaUpdated
  commentId: E:MLEM.Ui.UiSystem.OnElementAreaUpdated
  href: MLEM.Ui.UiSystem.html#MLEM_Ui_UiSystem_OnElementAreaUpdated
  name: OnElementAreaUpdated
  nameWithType: UiSystem.OnElementAreaUpdated
  fullName: MLEM.Ui.UiSystem.OnElementAreaUpdated
- uid: MLEM.Ui.Elements.Element.SetAreaAndUpdateChildren*
  commentId: Overload:MLEM.Ui.Elements.Element.SetAreaAndUpdateChildren
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_SetAreaAndUpdateChildren_MLEM_Maths_RectangleF_
  name: SetAreaAndUpdateChildren
  nameWithType: Element.SetAreaAndUpdateChildren
  fullName: MLEM.Ui.Elements.Element.SetAreaAndUpdateChildren
- uid: MLEM.Ui.Elements.Element.CalcActualSize*
  commentId: Overload:MLEM.Ui.Elements.Element.CalcActualSize
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_CalcActualSize_MLEM_Maths_RectangleF_
  name: CalcActualSize
  nameWithType: Element.CalcActualSize
  fullName: MLEM.Ui.Elements.Element.CalcActualSize
- uid: MLEM.Ui.Elements.Element.GetAreaForAutoAnchors*
  commentId: Overload:MLEM.Ui.Elements.Element.GetAreaForAutoAnchors
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetAreaForAutoAnchors
  name: GetAreaForAutoAnchors
  nameWithType: Element.GetAreaForAutoAnchors
  fullName: MLEM.Ui.Elements.Element.GetAreaForAutoAnchors
- uid: MLEM.Ui.Elements.Element.GetTotalCoveredArea(System.Boolean)
  commentId: M:MLEM.Ui.Elements.Element.GetTotalCoveredArea(System.Boolean)
  parent: MLEM.Ui.Elements.Element
  isExternal: true
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetTotalCoveredArea_System_Boolean_
  name: GetTotalCoveredArea(bool)
  nameWithType: Element.GetTotalCoveredArea(bool)
  fullName: MLEM.Ui.Elements.Element.GetTotalCoveredArea(bool)
  nameWithType.vb: Element.GetTotalCoveredArea(Boolean)
  fullName.vb: MLEM.Ui.Elements.Element.GetTotalCoveredArea(Boolean)
  name.vb: GetTotalCoveredArea(Boolean)
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element.GetTotalCoveredArea(System.Boolean)
    name: GetTotalCoveredArea
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetTotalCoveredArea_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.Element.GetTotalCoveredArea(System.Boolean)
    name: GetTotalCoveredArea
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetTotalCoveredArea_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: MLEM.Ui.Elements.Element.GetLowestChild*
  commentId: Overload:MLEM.Ui.Elements.Element.GetLowestChild
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetLowestChild_System_Func_MLEM_Ui_Elements_Element_System_Boolean__System_Boolean_
  name: GetLowestChild
  nameWithType: Element.GetLowestChild
  fullName: MLEM.Ui.Elements.Element.GetLowestChild
- uid: MLEM.Ui.Elements.Element.GetRightmostChild*
  commentId: Overload:MLEM.Ui.Elements.Element.GetRightmostChild
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetRightmostChild_System_Func_MLEM_Ui_Elements_Element_System_Boolean__System_Boolean_
  name: GetRightmostChild
  nameWithType: Element.GetRightmostChild
  fullName: MLEM.Ui.Elements.Element.GetRightmostChild
- uid: MLEM.Ui.Elements.Element.GetLowestOlderSibling*
  commentId: Overload:MLEM.Ui.Elements.Element.GetLowestOlderSibling
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetLowestOlderSibling_System_Func_MLEM_Ui_Elements_Element_System_Boolean__System_Boolean_
  name: GetLowestOlderSibling
  nameWithType: Element.GetLowestOlderSibling
  fullName: MLEM.Ui.Elements.Element.GetLowestOlderSibling
- uid: MLEM.Ui.Elements.Element.GetOlderSibling*
  commentId: Overload:MLEM.Ui.Elements.Element.GetOlderSibling
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetOlderSibling_System_Func_MLEM_Ui_Elements_Element_System_Boolean__
  name: GetOlderSibling
  nameWithType: Element.GetOlderSibling
  fullName: MLEM.Ui.Elements.Element.GetOlderSibling
- uid: MLEM.Ui.Elements.Element.GetSiblings*
  commentId: Overload:MLEM.Ui.Elements.Element.GetSiblings
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetSiblings_System_Func_MLEM_Ui_Elements_Element_System_Boolean__
  name: GetSiblings
  nameWithType: Element.GetSiblings
  fullName: MLEM.Ui.Elements.Element.GetSiblings
- uid: System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}
  commentId: T:System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Element>
  nameWithType: IEnumerable<Element>
  fullName: System.Collections.Generic.IEnumerable<MLEM.Ui.Elements.Element>
  nameWithType.vb: IEnumerable(Of Element)
  fullName.vb: System.Collections.Generic.IEnumerable(Of MLEM.Ui.Elements.Element)
  name.vb: IEnumerable(Of Element)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Ui.Elements.Element.GetChildren*
  commentId: Overload:MLEM.Ui.Elements.Element.GetChildren
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetChildren__1_System_Func___0_System_Boolean__System_Boolean_System_Boolean_
  name: GetChildren
  nameWithType: Element.GetChildren
  fullName: MLEM.Ui.Elements.Element.GetChildren
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, bool>
  nameWithType: Func<T, bool>
  fullName: System.Func<T, bool>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Ui.Elements.Element.GetParentTree*
  commentId: Overload:MLEM.Ui.Elements.Element.GetParentTree
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetParentTree
  name: GetParentTree
  nameWithType: Element.GetParentTree
  fullName: MLEM.Ui.Elements.Element.GetParentTree
- uid: MLEM.Ui.Elements.Element.GetTotalCoveredArea*
  commentId: Overload:MLEM.Ui.Elements.Element.GetTotalCoveredArea
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetTotalCoveredArea_System_Boolean_
  name: GetTotalCoveredArea
  nameWithType: Element.GetTotalCoveredArea
  fullName: MLEM.Ui.Elements.Element.GetTotalCoveredArea
- uid: MLEM.Ui.Elements.Element.GetRelevantChildren*
  commentId: Overload:MLEM.Ui.Elements.Element.GetRelevantChildren
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetRelevantChildren
  name: GetRelevantChildren
  nameWithType: Element.GetRelevantChildren
  fullName: MLEM.Ui.Elements.Element.GetRelevantChildren
- uid: MLEM.Ui.Elements.Element.Update*
  commentId: Overload:MLEM.Ui.Elements.Element.Update
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Update_Microsoft_Xna_Framework_GameTime_
  name: Update
  nameWithType: Element.Update
  fullName: MLEM.Ui.Elements.Element.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: MLEM.Ui.Elements.Element.Transform
  commentId: F:MLEM.Ui.Elements.Element.Transform
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Transform
  name: Transform
  nameWithType: Element.Transform
  fullName: MLEM.Ui.Elements.Element.Transform
- uid: MLEM.Ui.Elements.Element.DrawTransformed*
  commentId: Overload:MLEM.Ui.Elements.Element.DrawTransformed
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_DrawTransformed_Microsoft_Xna_Framework_GameTime_Microsoft_Xna_Framework_Graphics_SpriteBatch_System_Single_MLEM_Graphics_SpriteBatchContext_
  name: DrawTransformed
  nameWithType: Element.DrawTransformed
  fullName: MLEM.Ui.Elements.Element.DrawTransformed
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: MLEM.Graphics.SpriteBatchContext
  commentId: T:MLEM.Graphics.SpriteBatchContext
  parent: MLEM.Graphics
  href: MLEM.Graphics.SpriteBatchContext.html
  name: SpriteBatchContext
  nameWithType: SpriteBatchContext
  fullName: MLEM.Graphics.SpriteBatchContext
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
- uid: MLEM.Graphics
  commentId: N:MLEM.Graphics
  href: MLEM.html
  name: MLEM.Graphics
  nameWithType: MLEM.Graphics
  fullName: MLEM.Graphics
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Graphics
    name: Graphics
    href: MLEM.Graphics.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Graphics
    name: Graphics
    href: MLEM.Graphics.html
- uid: MLEM.Ui.Elements.Element.Draw*
  commentId: Overload:MLEM.Ui.Elements.Element.Draw
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Draw_Microsoft_Xna_Framework_GameTime_Microsoft_Xna_Framework_Graphics_SpriteBatch_System_Single_MLEM_Graphics_SpriteBatchContext_
  name: Draw
  nameWithType: Element.Draw
  fullName: MLEM.Ui.Elements.Element.Draw
- uid: MLEM.Ui.Elements.Element.GetRelevantChildren
  commentId: M:MLEM.Ui.Elements.Element.GetRelevantChildren
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetRelevantChildren
  name: GetRelevantChildren()
  nameWithType: Element.GetRelevantChildren()
  fullName: MLEM.Ui.Elements.Element.GetRelevantChildren()
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element.GetRelevantChildren
    name: GetRelevantChildren
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetRelevantChildren
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.Element.GetRelevantChildren
    name: GetRelevantChildren
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetRelevantChildren
  - name: (
  - name: )
- uid: MLEM.Ui.Elements.Element.GetElementUnderPos*
  commentId: Overload:MLEM.Ui.Elements.Element.GetElementUnderPos
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetElementUnderPos_Microsoft_Xna_Framework_Vector2_
  name: GetElementUnderPos
  nameWithType: Element.GetElementUnderPos
  fullName: MLEM.Ui.Elements.Element.GetElementUnderPos
- uid: MLEM.Ui.Elements.Element.PlayingAnimations
  commentId: F:MLEM.Ui.Elements.Element.PlayingAnimations
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_PlayingAnimations
  name: PlayingAnimations
  nameWithType: Element.PlayingAnimations
  fullName: MLEM.Ui.Elements.Element.PlayingAnimations
- uid: MLEM.Ui.Elements.Element.Update(Microsoft.Xna.Framework.GameTime)
  commentId: M:MLEM.Ui.Elements.Element.Update(Microsoft.Xna.Framework.GameTime)
  parent: MLEM.Ui.Elements.Element
  isExternal: true
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Update_Microsoft_Xna_Framework_GameTime_
  name: Update(GameTime)
  nameWithType: Element.Update(GameTime)
  fullName: MLEM.Ui.Elements.Element.Update(Microsoft.Xna.Framework.GameTime)
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element.Update(Microsoft.Xna.Framework.GameTime)
    name: Update
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Update_Microsoft_Xna_Framework_GameTime_
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.Element.Update(Microsoft.Xna.Framework.GameTime)
    name: Update
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_Update_Microsoft_Xna_Framework_GameTime_
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: )
- uid: MLEM.Ui.Elements.Element.PlayAnimation*
  commentId: Overload:MLEM.Ui.Elements.Element.PlayAnimation
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_PlayAnimation_MLEM_Ui_UiAnimation_
  name: PlayAnimation
  nameWithType: Element.PlayAnimation
  fullName: MLEM.Ui.Elements.Element.PlayAnimation
- uid: MLEM.Ui.UiAnimation.OnFinished(MLEM.Ui.Elements.Element)
  commentId: M:MLEM.Ui.UiAnimation.OnFinished(MLEM.Ui.Elements.Element)
  href: MLEM.Ui.UiAnimation.html#MLEM_Ui_UiAnimation_OnFinished_MLEM_Ui_Elements_Element_
  name: OnFinished(Element)
  nameWithType: UiAnimation.OnFinished(Element)
  fullName: MLEM.Ui.UiAnimation.OnFinished(MLEM.Ui.Elements.Element)
  spec.csharp:
  - uid: MLEM.Ui.UiAnimation.OnFinished(MLEM.Ui.Elements.Element)
    name: OnFinished
    href: MLEM.Ui.UiAnimation.html#MLEM_Ui_UiAnimation_OnFinished_MLEM_Ui_Elements_Element_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: )
  spec.vb:
  - uid: MLEM.Ui.UiAnimation.OnFinished(MLEM.Ui.Elements.Element)
    name: OnFinished
    href: MLEM.Ui.UiAnimation.html#MLEM_Ui_UiAnimation_OnFinished_MLEM_Ui_Elements_Element_
  - name: (
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: )
- uid: MLEM.Ui.Elements.Element.StopAnimation*
  commentId: Overload:MLEM.Ui.Elements.Element.StopAnimation
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_StopAnimation_MLEM_Ui_UiAnimation_
  name: StopAnimation
  nameWithType: Element.StopAnimation
  fullName: MLEM.Ui.Elements.Element.StopAnimation
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: MLEM.Ui.Elements.Element.ToString*
  commentId: Overload:MLEM.Ui.Elements.Element.ToString
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ToString
  name: ToString
  nameWithType: Element.ToString
  fullName: MLEM.Ui.Elements.Element.ToString
- uid: MLEM.Ui.Elements.Element.AndChildren*
  commentId: Overload:MLEM.Ui.Elements.Element.AndChildren
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_AndChildren_System_Action_MLEM_Ui_Elements_Element__
  name: AndChildren
  nameWithType: Element.AndChildren
  fullName: MLEM.Ui.Elements.Element.AndChildren
- uid: System.Action{MLEM.Ui.Elements.Element}
  commentId: T:System.Action{MLEM.Ui.Elements.Element}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<Element>
  nameWithType: Action<Element>
  fullName: System.Action<MLEM.Ui.Elements.Element>
  nameWithType.vb: Action(Of Element)
  fullName.vb: System.Action(Of MLEM.Ui.Elements.Element)
  name.vb: Action(Of Element)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Ui.Elements.Element.ReorderChildren*
  commentId: Overload:MLEM.Ui.Elements.Element.ReorderChildren
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ReorderChildren_System_Comparison_MLEM_Ui_Elements_Element__
  name: ReorderChildren
  nameWithType: Element.ReorderChildren
  fullName: MLEM.Ui.Elements.Element.ReorderChildren
- uid: System.Comparison{MLEM.Ui.Elements.Element}
  commentId: T:System.Comparison{MLEM.Ui.Elements.Element}
  parent: System
  definition: System.Comparison`1
  href: https://learn.microsoft.com/dotnet/api/system.comparison-1
  name: Comparison<Element>
  nameWithType: Comparison<Element>
  fullName: System.Comparison<MLEM.Ui.Elements.Element>
  nameWithType.vb: Comparison(Of Element)
  fullName.vb: System.Comparison(Of MLEM.Ui.Elements.Element)
  name.vb: Comparison(Of Element)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.comparison-1
  - name: <
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.comparison-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: )
- uid: System.Comparison`1
  commentId: T:System.Comparison`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.comparison-1
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
  nameWithType.vb: Comparison(Of T)
  fullName.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.comparison-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.comparison-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Ui.Elements.Element.ReverseChildren*
  commentId: Overload:MLEM.Ui.Elements.Element.ReverseChildren
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ReverseChildren_System_Int32_System_Nullable_System_Int32__
  name: ReverseChildren
  nameWithType: Element.ReverseChildren
  fullName: MLEM.Ui.Elements.Element.ReverseChildren
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Ui.Elements.Element.ScaleTransform*
  commentId: Overload:MLEM.Ui.Elements.Element.ScaleTransform
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_ScaleTransform_System_Single_System_Nullable_Microsoft_Xna_Framework_Vector2__
  name: ScaleTransform
  nameWithType: Element.ScaleTransform
  fullName: MLEM.Ui.Elements.Element.ScaleTransform
- uid: System.Nullable{Microsoft.Xna.Framework.Vector2}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Vector2}
  parent: System
  definition: System.Nullable`1
  name: Vector2?
  nameWithType: Vector2?
  fullName: Microsoft.Xna.Framework.Vector2?
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
- uid: MLEM.Ui.Elements.Element.InitStyle*
  commentId: Overload:MLEM.Ui.Elements.Element.InitStyle
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_InitStyle_MLEM_Ui_Style_UiStyle_
  name: InitStyle
  nameWithType: Element.InitStyle
  fullName: MLEM.Ui.Elements.Element.InitStyle
- uid: MLEM.Ui.Elements.Element.OnChildAreaDirty*
  commentId: Overload:MLEM.Ui.Elements.Element.OnChildAreaDirty
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_OnChildAreaDirty_MLEM_Ui_Elements_Element_System_Boolean_
  name: OnChildAreaDirty
  nameWithType: Element.OnChildAreaDirty
  fullName: MLEM.Ui.Elements.Element.OnChildAreaDirty
- uid: MLEM.Ui.Elements.Element.TransformInverse*
  commentId: Overload:MLEM.Ui.Elements.Element.TransformInverse
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_TransformInverse_Microsoft_Xna_Framework_Vector2_
  name: TransformInverse
  nameWithType: Element.TransformInverse
  fullName: MLEM.Ui.Elements.Element.TransformInverse
- uid: MLEM.Ui.RootElement.InvTransform
  commentId: P:MLEM.Ui.RootElement.InvTransform
  href: MLEM.Ui.RootElement.html#MLEM_Ui_RootElement_InvTransform
  name: InvTransform
  nameWithType: RootElement.InvTransform
  fullName: MLEM.Ui.RootElement.InvTransform
- uid: MLEM.Ui.Elements.Element.GetParentTree
  commentId: M:MLEM.Ui.Elements.Element.GetParentTree
  parent: MLEM.Ui.Elements.Element
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetParentTree
  name: GetParentTree()
  nameWithType: Element.GetParentTree()
  fullName: MLEM.Ui.Elements.Element.GetParentTree()
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element.GetParentTree
    name: GetParentTree
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetParentTree
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Ui.Elements.Element.GetParentTree
    name: GetParentTree
    href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_GetParentTree
  - name: (
  - name: )
- uid: MLEM.Ui.UiControls.GetElementUnderPos(Microsoft.Xna.Framework.Vector2)
  commentId: M:MLEM.Ui.UiControls.GetElementUnderPos(Microsoft.Xna.Framework.Vector2)
  isExternal: true
  href: MLEM.Ui.UiControls.html#MLEM_Ui_UiControls_GetElementUnderPos_Microsoft_Xna_Framework_Vector2_
  name: GetElementUnderPos(Vector2)
  nameWithType: UiControls.GetElementUnderPos(Vector2)
  fullName: MLEM.Ui.UiControls.GetElementUnderPos(Microsoft.Xna.Framework.Vector2)
  spec.csharp:
  - uid: MLEM.Ui.UiControls.GetElementUnderPos(Microsoft.Xna.Framework.Vector2)
    name: GetElementUnderPos
    href: MLEM.Ui.UiControls.html#MLEM_Ui_UiControls_GetElementUnderPos_Microsoft_Xna_Framework_Vector2_
  - name: (
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: )
  spec.vb:
  - uid: MLEM.Ui.UiControls.GetElementUnderPos(Microsoft.Xna.Framework.Vector2)
    name: GetElementUnderPos
    href: MLEM.Ui.UiControls.html#MLEM_Ui_UiControls_GetElementUnderPos_Microsoft_Xna_Framework_Vector2_
  - name: (
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: MLEM.Ui.Elements.Element.TransformInverseAll*
  commentId: Overload:MLEM.Ui.Elements.Element.TransformInverseAll
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_TransformInverseAll_Microsoft_Xna_Framework_Vector2_
  name: TransformInverseAll
  nameWithType: Element.TransformInverseAll
  fullName: MLEM.Ui.Elements.Element.TransformInverseAll
- uid: MLEM.Ui.UiSystem.Add(System.String,MLEM.Ui.Elements.Element)
  commentId: M:MLEM.Ui.UiSystem.Add(System.String,MLEM.Ui.Elements.Element)
  isExternal: true
  href: MLEM.Ui.UiSystem.html#MLEM_Ui_UiSystem_Add_System_String_MLEM_Ui_Elements_Element_
  name: Add(string, Element)
  nameWithType: UiSystem.Add(string, Element)
  fullName: MLEM.Ui.UiSystem.Add(string, MLEM.Ui.Elements.Element)
  nameWithType.vb: UiSystem.Add(String, Element)
  fullName.vb: MLEM.Ui.UiSystem.Add(String, MLEM.Ui.Elements.Element)
  name.vb: Add(String, Element)
  spec.csharp:
  - uid: MLEM.Ui.UiSystem.Add(System.String,MLEM.Ui.Elements.Element)
    name: Add
    href: MLEM.Ui.UiSystem.html#MLEM_Ui_UiSystem_Add_System_String_MLEM_Ui_Elements_Element_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: )
  spec.vb:
  - uid: MLEM.Ui.UiSystem.Add(System.String,MLEM.Ui.Elements.Element)
    name: Add
    href: MLEM.Ui.UiSystem.html#MLEM_Ui_UiSystem_Add_System_String_MLEM_Ui_Elements_Element_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Element
    name: Element
    href: MLEM.Ui.Elements.Element.html
  - name: )
- uid: MLEM.Ui.Elements.Element.AddedToUi*
  commentId: Overload:MLEM.Ui.Elements.Element.AddedToUi
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_AddedToUi_MLEM_Ui_UiSystem_MLEM_Ui_RootElement_
  name: AddedToUi
  nameWithType: Element.AddedToUi
  fullName: MLEM.Ui.Elements.Element.AddedToUi
- uid: MLEM.Ui.UiSystem.Remove(System.String)
  commentId: M:MLEM.Ui.UiSystem.Remove(System.String)
  isExternal: true
  href: MLEM.Ui.UiSystem.html#MLEM_Ui_UiSystem_Remove_System_String_
  name: Remove(string)
  nameWithType: UiSystem.Remove(string)
  fullName: MLEM.Ui.UiSystem.Remove(string)
  nameWithType.vb: UiSystem.Remove(String)
  fullName.vb: MLEM.Ui.UiSystem.Remove(String)
  name.vb: Remove(String)
  spec.csharp:
  - uid: MLEM.Ui.UiSystem.Remove(System.String)
    name: Remove
    href: MLEM.Ui.UiSystem.html#MLEM_Ui_UiSystem_Remove_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Ui.UiSystem.Remove(System.String)
    name: Remove
    href: MLEM.Ui.UiSystem.html#MLEM_Ui_UiSystem_Remove_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Ui.Elements.Element.RemovedFromUi*
  commentId: Overload:MLEM.Ui.Elements.Element.RemovedFromUi
  href: MLEM.Ui.Elements.Element.html#MLEM_Ui_Elements_Element_RemovedFromUi
  name: RemovedFromUi
  nameWithType: Element.RemovedFromUi
  fullName: MLEM.Ui.Elements.Element.RemovedFromUi
