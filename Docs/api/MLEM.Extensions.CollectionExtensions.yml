### YamlMime:ManagedReference
items:
- uid: MLEM.Extensions.CollectionExtensions
  commentId: T:MLEM.Extensions.CollectionExtensions
  id: CollectionExtensions
  parent: MLEM.Extensions
  children:
  - MLEM.Extensions.CollectionExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  - MLEM.Extensions.CollectionExtensions.Combinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  - MLEM.Extensions.CollectionExtensions.IndexCombinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  - MLEM.Extensions.CollectionExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  langs:
  - csharp
  - vb
  name: CollectionExtensions
  nameWithType: CollectionExtensions
  fullName: MLEM.Extensions.CollectionExtensions
  type: Class
  source:
    remote:
      path: MLEM/Extensions/CollectionExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CollectionExtensions
    path: ../MLEM/Extensions/CollectionExtensions.cs
    startLine: 7
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: A set of extensions for dealing with collections of various kinds
  example: []
  syntax:
    content: public static class CollectionExtensions
    content.vb: Public Module CollectionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: MLEM.Extensions.CollectionExtensions.Combinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  commentId: M:MLEM.Extensions.CollectionExtensions.Combinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  id: Combinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  isExtensionMethod: true
  parent: MLEM.Extensions.CollectionExtensions
  langs:
  - csharp
  - vb
  name: Combinations<T>(IEnumerable<IEnumerable<T>>)
  nameWithType: CollectionExtensions.Combinations<T>(IEnumerable<IEnumerable<T>>)
  fullName: MLEM.Extensions.CollectionExtensions.Combinations<T>(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/CollectionExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Combinations
    path: ../MLEM/Extensions/CollectionExtensions.cs
    startLine: 24
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: >-
    This method returns a set of possible combinations of n items from n different sets, where the order of the items in each combination is based on the order of the input sets.

    For a version of this method that returns indices rather than entries, see <xref href="MLEM.Extensions.CollectionExtensions.IndexCombinations%60%601(System.Collections.Generic.IEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)" data-throw-if-not-resolved="false"></xref>.

    <example>

    Given the input set <code>{{1, 2, 3}, {A, B}, {+, -}}</code>, the returned set would contain the following sets:

    <pre><code class="lang-csharp">{1, A, +}, {1, A, -}, {1, B, +}, {1, B, -},

    {2, A, +}, {2, A, -}, {2, B, +}, {2, B, -},

    {3, A, +}, {3, A, -}, {3, B, +}, {3, B, -}</code></pre>

    </example>
  example: []
  syntax:
    content: public static IEnumerable<IEnumerable<T>> Combinations<T>(this IEnumerable<IEnumerable<T>> things)
    parameters:
    - id: things
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
      description: The different sets to be combined
    typeParameters:
    - id: T
      description: The type of the items in the sets
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
      description: All combinations of set items as described
    content.vb: Public Shared Function Combinations(Of T)(things As IEnumerable(Of IEnumerable(Of T))) As IEnumerable(Of IEnumerable(Of T))
  overload: MLEM.Extensions.CollectionExtensions.Combinations*
  nameWithType.vb: CollectionExtensions.Combinations(Of T)(IEnumerable(Of IEnumerable(Of T)))
  fullName.vb: MLEM.Extensions.CollectionExtensions.Combinations(Of T)(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: Combinations(Of T)(IEnumerable(Of IEnumerable(Of T)))
- uid: MLEM.Extensions.CollectionExtensions.IndexCombinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  commentId: M:MLEM.Extensions.CollectionExtensions.IndexCombinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  id: IndexCombinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  isExtensionMethod: true
  parent: MLEM.Extensions.CollectionExtensions
  langs:
  - csharp
  - vb
  name: IndexCombinations<T>(IEnumerable<IEnumerable<T>>)
  nameWithType: CollectionExtensions.IndexCombinations<T>(IEnumerable<IEnumerable<T>>)
  fullName: MLEM.Extensions.CollectionExtensions.IndexCombinations<T>(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/CollectionExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IndexCombinations
    path: ../MLEM/Extensions/CollectionExtensions.cs
    startLine: 46
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: >-
    This method returns a set of possible combinations of n indices of items from n different sets, where the order of the items' indices in each combination is based on the order of the input sets.

    For a version of this method that returns entries rather than indices, see <xref href="MLEM.Extensions.CollectionExtensions.Combinations%60%601(System.Collections.Generic.IEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)" data-throw-if-not-resolved="false"></xref>.

    <example>

    Given the input set <code>{{1, 2, 3}, {A, B}, {+, -}}</code>, the returned set would contain the following sets:

    <pre><code class="lang-csharp">{0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 1, 1},

    {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1},

    {2, 0, 0}, {2, 0, 1}, {2, 1, 0}, {2, 1, 1}</code></pre>

    </example>
  example: []
  syntax:
    content: public static IEnumerable<IEnumerable<int>> IndexCombinations<T>(this IEnumerable<IEnumerable<T>> things)
    parameters:
    - id: things
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
      description: The different sets to be combined
    typeParameters:
    - id: T
      description: The type of the items in the sets
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Int32}}
      description: All combinations of set items as described
    content.vb: Public Shared Function IndexCombinations(Of T)(things As IEnumerable(Of IEnumerable(Of T))) As IEnumerable(Of IEnumerable(Of Integer))
  overload: MLEM.Extensions.CollectionExtensions.IndexCombinations*
  nameWithType.vb: CollectionExtensions.IndexCombinations(Of T)(IEnumerable(Of IEnumerable(Of T)))
  fullName.vb: MLEM.Extensions.CollectionExtensions.IndexCombinations(Of T)(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: IndexCombinations(Of T)(IEnumerable(Of IEnumerable(Of T)))
- uid: MLEM.Extensions.CollectionExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:MLEM.Extensions.CollectionExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: MLEM.Extensions.CollectionExtensions
  langs:
  - csharp
  - vb
  name: Append<T>(IEnumerable<T>, T)
  nameWithType: CollectionExtensions.Append<T>(IEnumerable<T>, T)
  fullName: MLEM.Extensions.CollectionExtensions.Append<T>(System.Collections.Generic.IEnumerable<T>, T)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/CollectionExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Append
    path: ../MLEM/Extensions/CollectionExtensions.cs
    startLine: 59
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Appends a value to the end of the sequence.
  example: []
  syntax:
    content: public static IEnumerable<T> Append<T>(this IEnumerable<T> source, T element)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A sequence of values.
    - id: element
      type: '{T}'
      description: The value to append to <code class="paramref">source</code>.
    typeParameters:
    - id: T
      description: The type of the elements of <code class="paramref">source</code>.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A new sequence that ends with <code class="paramref">element</code>.
    content.vb: Public Shared Function Append(Of T)(source As IEnumerable(Of T), element As T) As IEnumerable(Of T)
  overload: MLEM.Extensions.CollectionExtensions.Append*
  nameWithType.vb: CollectionExtensions.Append(Of T)(IEnumerable(Of T), T)
  fullName.vb: MLEM.Extensions.CollectionExtensions.Append(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: Append(Of T)(IEnumerable(Of T), T)
- uid: MLEM.Extensions.CollectionExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:MLEM.Extensions.CollectionExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: MLEM.Extensions.CollectionExtensions
  langs:
  - csharp
  - vb
  name: Prepend<T>(IEnumerable<T>, T)
  nameWithType: CollectionExtensions.Prepend<T>(IEnumerable<T>, T)
  fullName: MLEM.Extensions.CollectionExtensions.Prepend<T>(System.Collections.Generic.IEnumerable<T>, T)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/CollectionExtensions.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Prepend
    path: ../MLEM/Extensions/CollectionExtensions.cs
    startLine: 70
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: Prepends a value to the beginning of the sequence.
  example: []
  syntax:
    content: public static IEnumerable<T> Prepend<T>(this IEnumerable<T> source, T element)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A sequence of values.
    - id: element
      type: '{T}'
      description: The value to prepend to <code class="paramref">source</code>.
    typeParameters:
    - id: T
      description: The type of the elements of <code class="paramref">source</code>.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A new sequence that begins with <code class="paramref">element</code>.
    content.vb: Public Shared Function Prepend(Of T)(source As IEnumerable(Of T), element As T) As IEnumerable(Of T)
  overload: MLEM.Extensions.CollectionExtensions.Prepend*
  nameWithType.vb: CollectionExtensions.Prepend(Of T)(IEnumerable(Of T), T)
  fullName.vb: MLEM.Extensions.CollectionExtensions.Prepend(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: Prepend(Of T)(IEnumerable(Of T), T)
references:
- uid: MLEM.Extensions
  commentId: N:MLEM.Extensions
  href: MLEM.html
  name: MLEM.Extensions
  nameWithType: MLEM.Extensions
  fullName: MLEM.Extensions
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Extensions
    name: Extensions
    href: MLEM.Extensions.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Extensions
    name: Extensions
    href: MLEM.Extensions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Extensions.CollectionExtensions.IndexCombinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  commentId: M:MLEM.Extensions.CollectionExtensions.IndexCombinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  href: MLEM.Extensions.CollectionExtensions.html#MLEM_Extensions_CollectionExtensions_IndexCombinations__1_System_Collections_Generic_IEnumerable_System_Collections_Generic_IEnumerable___0___
  name: IndexCombinations<T>(IEnumerable<IEnumerable<T>>)
  nameWithType: CollectionExtensions.IndexCombinations<T>(IEnumerable<IEnumerable<T>>)
  fullName: MLEM.Extensions.CollectionExtensions.IndexCombinations<T>(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>)
  nameWithType.vb: CollectionExtensions.IndexCombinations(Of T)(IEnumerable(Of IEnumerable(Of T)))
  fullName.vb: MLEM.Extensions.CollectionExtensions.IndexCombinations(Of T)(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: IndexCombinations(Of T)(IEnumerable(Of IEnumerable(Of T)))
  spec.csharp:
  - uid: MLEM.Extensions.CollectionExtensions.IndexCombinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
    name: IndexCombinations
    href: MLEM.Extensions.CollectionExtensions.html#MLEM_Extensions_CollectionExtensions_IndexCombinations__1_System_Collections_Generic_IEnumerable_System_Collections_Generic_IEnumerable___0___
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: MLEM.Extensions.CollectionExtensions.IndexCombinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
    name: IndexCombinations
    href: MLEM.Extensions.CollectionExtensions.html#MLEM_Extensions_CollectionExtensions_IndexCombinations__1_System_Collections_Generic_IEnumerable_System_Collections_Generic_IEnumerable___0___
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
  - name: )
- uid: MLEM.Extensions.CollectionExtensions.Combinations*
  commentId: Overload:MLEM.Extensions.CollectionExtensions.Combinations
  href: MLEM.Extensions.CollectionExtensions.html#MLEM_Extensions_CollectionExtensions_Combinations__1_System_Collections_Generic_IEnumerable_System_Collections_Generic_IEnumerable___0___
  name: Combinations
  nameWithType: CollectionExtensions.Combinations
  fullName: MLEM.Extensions.CollectionExtensions.Combinations
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IEnumerable<T>>
  nameWithType: IEnumerable<IEnumerable<T>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: IEnumerable(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: MLEM.Extensions.CollectionExtensions.Combinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  commentId: M:MLEM.Extensions.CollectionExtensions.Combinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  href: MLEM.Extensions.CollectionExtensions.html#MLEM_Extensions_CollectionExtensions_Combinations__1_System_Collections_Generic_IEnumerable_System_Collections_Generic_IEnumerable___0___
  name: Combinations<T>(IEnumerable<IEnumerable<T>>)
  nameWithType: CollectionExtensions.Combinations<T>(IEnumerable<IEnumerable<T>>)
  fullName: MLEM.Extensions.CollectionExtensions.Combinations<T>(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>)
  nameWithType.vb: CollectionExtensions.Combinations(Of T)(IEnumerable(Of IEnumerable(Of T)))
  fullName.vb: MLEM.Extensions.CollectionExtensions.Combinations(Of T)(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: Combinations(Of T)(IEnumerable(Of IEnumerable(Of T)))
  spec.csharp:
  - uid: MLEM.Extensions.CollectionExtensions.Combinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
    name: Combinations
    href: MLEM.Extensions.CollectionExtensions.html#MLEM_Extensions_CollectionExtensions_Combinations__1_System_Collections_Generic_IEnumerable_System_Collections_Generic_IEnumerable___0___
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: MLEM.Extensions.CollectionExtensions.Combinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
    name: Combinations
    href: MLEM.Extensions.CollectionExtensions.html#MLEM_Extensions_CollectionExtensions_Combinations__1_System_Collections_Generic_IEnumerable_System_Collections_Generic_IEnumerable___0___
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
  - name: )
- uid: MLEM.Extensions.CollectionExtensions.IndexCombinations*
  commentId: Overload:MLEM.Extensions.CollectionExtensions.IndexCombinations
  href: MLEM.Extensions.CollectionExtensions.html#MLEM_Extensions_CollectionExtensions_IndexCombinations__1_System_Collections_Generic_IEnumerable_System_Collections_Generic_IEnumerable___0___
  name: IndexCombinations
  nameWithType: CollectionExtensions.IndexCombinations
  fullName: MLEM.Extensions.CollectionExtensions.IndexCombinations
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Int32}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Int32}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IEnumerable<int>>
  nameWithType: IEnumerable<IEnumerable<int>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<int>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of Integer))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of Integer))
  name.vb: IEnumerable(Of IEnumerable(Of Integer))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: )
- uid: MLEM.Extensions.CollectionExtensions.Append*
  commentId: Overload:MLEM.Extensions.CollectionExtensions.Append
  href: MLEM.Extensions.CollectionExtensions.html#MLEM_Extensions_CollectionExtensions_Append__1_System_Collections_Generic_IEnumerable___0____0_
  name: Append
  nameWithType: CollectionExtensions.Append
  fullName: MLEM.Extensions.CollectionExtensions.Append
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: MLEM.Extensions.CollectionExtensions.Prepend*
  commentId: Overload:MLEM.Extensions.CollectionExtensions.Prepend
  href: MLEM.Extensions.CollectionExtensions.html#MLEM_Extensions_CollectionExtensions_Prepend__1_System_Collections_Generic_IEnumerable___0____0_
  name: Prepend
  nameWithType: CollectionExtensions.Prepend
  fullName: MLEM.Extensions.CollectionExtensions.Prepend
