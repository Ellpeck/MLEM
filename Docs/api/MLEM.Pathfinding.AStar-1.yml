### YamlMime:ManagedReference
items:
- uid: MLEM.Pathfinding.AStar`1
  commentId: T:MLEM.Pathfinding.AStar`1
  id: AStar`1
  parent: MLEM.Pathfinding
  children:
  - MLEM.Pathfinding.AStar`1.#ctor(MLEM.Pathfinding.AStar{`0}.GetCost,System.Single,System.Int32,MLEM.Pathfinding.AStar{`0}.CollectAdditionalNeighbors)
  - MLEM.Pathfinding.AStar`1.CollectNeighbors(`0,System.Collections.Generic.ISet{`0})
  - MLEM.Pathfinding.AStar`1.DefaultAdditionalNeighbors
  - MLEM.Pathfinding.AStar`1.DefaultCost
  - MLEM.Pathfinding.AStar`1.DefaultCostFunction
  - MLEM.Pathfinding.AStar`1.DefaultMaxTries
  - MLEM.Pathfinding.AStar`1.FindPath(`0,`0,MLEM.Pathfinding.AStar{`0}.GetCost,System.Nullable{System.Single},System.Nullable{System.Int32},MLEM.Pathfinding.AStar{`0}.CollectAdditionalNeighbors)
  - MLEM.Pathfinding.AStar`1.GetHeuristicDistance(`0,`0)
  - MLEM.Pathfinding.AStar`1.LastTimeNeeded
  - MLEM.Pathfinding.AStar`1.LastTriesNeeded
  - MLEM.Pathfinding.AStar`1.TryFindPath(`0,System.Collections.Generic.ICollection{`0},System.Collections.Generic.Stack{`0}@,System.Single@,MLEM.Pathfinding.AStar{`0}.GetCost,System.Nullable{System.Single},System.Nullable{System.Int32},MLEM.Pathfinding.AStar{`0}.CollectAdditionalNeighbors)
  langs:
  - csharp
  - vb
  name: AStar<T>
  nameWithType: AStar<T>
  fullName: MLEM.Pathfinding.AStar<T>
  type: Class
  source:
    remote:
      path: MLEM/Pathfinding/AStar.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: AStar
    path: ../MLEM/Pathfinding/AStar.cs
    startLine: 10
  assemblies:
  - MLEM
  namespace: MLEM.Pathfinding
  summary: >-
    This is an abstract implementation of the A* path finding algorithm.

    This implementation is used by <xref href="MLEM.Pathfinding.AStar2" data-throw-if-not-resolved="false"></xref>, a 2-dimensional A* path finding algorithm, and <xref href="MLEM.Pathfinding.AStar3" data-throw-if-not-resolved="false"></xref>, a 3-dimensional A* path finding algorithm.
  example: []
  syntax:
    content: public abstract class AStar<T>
    typeParameters:
    - id: T
      description: The type of points used for this path
    content.vb: Public MustInherit Class AStar(Of T)
  inheritance:
  - System.Object
  derivedClasses:
  - MLEM.Pathfinding.AStar2
  - MLEM.Pathfinding.AStar3
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: AStar(Of T)
  fullName.vb: MLEM.Pathfinding.AStar(Of T)
  name.vb: AStar(Of T)
- uid: MLEM.Pathfinding.AStar`1.DefaultCostFunction
  commentId: F:MLEM.Pathfinding.AStar`1.DefaultCostFunction
  id: DefaultCostFunction
  parent: MLEM.Pathfinding.AStar`1
  langs:
  - csharp
  - vb
  name: DefaultCostFunction
  nameWithType: AStar<T>.DefaultCostFunction
  fullName: MLEM.Pathfinding.AStar<T>.DefaultCostFunction
  type: Field
  source:
    remote:
      path: MLEM/Pathfinding/AStar.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: DefaultCostFunction
    path: ../MLEM/Pathfinding/AStar.cs
    startLine: 15
  assemblies:
  - MLEM
  namespace: MLEM.Pathfinding
  summary: The default cost function that determines the cost for each path finding position.
  example: []
  syntax:
    content: public AStar<T>.GetCost DefaultCostFunction
    return:
      type: MLEM.Pathfinding.AStar`1.GetCost
    content.vb: Public DefaultCostFunction As AStar(Of T).GetCost
  nameWithType.vb: AStar(Of T).DefaultCostFunction
  fullName.vb: MLEM.Pathfinding.AStar(Of T).DefaultCostFunction
- uid: MLEM.Pathfinding.AStar`1.DefaultCost
  commentId: F:MLEM.Pathfinding.AStar`1.DefaultCost
  id: DefaultCost
  parent: MLEM.Pathfinding.AStar`1
  langs:
  - csharp
  - vb
  name: DefaultCost
  nameWithType: AStar<T>.DefaultCost
  fullName: MLEM.Pathfinding.AStar<T>.DefaultCost
  type: Field
  source:
    remote:
      path: MLEM/Pathfinding/AStar.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: DefaultCost
    path: ../MLEM/Pathfinding/AStar.cs
    startLine: 19
  assemblies:
  - MLEM
  namespace: MLEM.Pathfinding
  summary: The default cost for a path point.
  example: []
  syntax:
    content: public float DefaultCost
    return:
      type: System.Single
    content.vb: Public DefaultCost As Single
  nameWithType.vb: AStar(Of T).DefaultCost
  fullName.vb: MLEM.Pathfinding.AStar(Of T).DefaultCost
- uid: MLEM.Pathfinding.AStar`1.DefaultMaxTries
  commentId: F:MLEM.Pathfinding.AStar`1.DefaultMaxTries
  id: DefaultMaxTries
  parent: MLEM.Pathfinding.AStar`1
  langs:
  - csharp
  - vb
  name: DefaultMaxTries
  nameWithType: AStar<T>.DefaultMaxTries
  fullName: MLEM.Pathfinding.AStar<T>.DefaultMaxTries
  type: Field
  source:
    remote:
      path: MLEM/Pathfinding/AStar.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: DefaultMaxTries
    path: ../MLEM/Pathfinding/AStar.cs
    startLine: 23
  assemblies:
  - MLEM
  namespace: MLEM.Pathfinding
  summary: The default amount of maximum tries that will be used before path finding is aborted.
  example: []
  syntax:
    content: public int DefaultMaxTries
    return:
      type: System.Int32
    content.vb: Public DefaultMaxTries As Integer
  nameWithType.vb: AStar(Of T).DefaultMaxTries
  fullName.vb: MLEM.Pathfinding.AStar(Of T).DefaultMaxTries
- uid: MLEM.Pathfinding.AStar`1.DefaultAdditionalNeighbors
  commentId: F:MLEM.Pathfinding.AStar`1.DefaultAdditionalNeighbors
  id: DefaultAdditionalNeighbors
  parent: MLEM.Pathfinding.AStar`1
  langs:
  - csharp
  - vb
  name: DefaultAdditionalNeighbors
  nameWithType: AStar<T>.DefaultAdditionalNeighbors
  fullName: MLEM.Pathfinding.AStar<T>.DefaultAdditionalNeighbors
  type: Field
  source:
    remote:
      path: MLEM/Pathfinding/AStar.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: DefaultAdditionalNeighbors
    path: ../MLEM/Pathfinding/AStar.cs
    startLine: 27
  assemblies:
  - MLEM
  namespace: MLEM.Pathfinding
  summary: The default <xref href="MLEM.Pathfinding.AStar%601.CollectAdditionalNeighbors" data-throw-if-not-resolved="false"></xref> function.
  example: []
  syntax:
    content: public AStar<T>.CollectAdditionalNeighbors DefaultAdditionalNeighbors
    return:
      type: MLEM.Pathfinding.AStar`1.CollectAdditionalNeighbors
    content.vb: Public DefaultAdditionalNeighbors As AStar(Of T).CollectAdditionalNeighbors
  nameWithType.vb: AStar(Of T).DefaultAdditionalNeighbors
  fullName.vb: MLEM.Pathfinding.AStar(Of T).DefaultAdditionalNeighbors
- uid: MLEM.Pathfinding.AStar`1.LastTriesNeeded
  commentId: P:MLEM.Pathfinding.AStar`1.LastTriesNeeded
  id: LastTriesNeeded
  parent: MLEM.Pathfinding.AStar`1
  langs:
  - csharp
  - vb
  name: LastTriesNeeded
  nameWithType: AStar<T>.LastTriesNeeded
  fullName: MLEM.Pathfinding.AStar<T>.LastTriesNeeded
  type: Property
  source:
    remote:
      path: MLEM/Pathfinding/AStar.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: LastTriesNeeded
    path: ../MLEM/Pathfinding/AStar.cs
    startLine: 32
  assemblies:
  - MLEM
  namespace: MLEM.Pathfinding
  summary: The amount of tries required for finding the last queried path
  example: []
  syntax:
    content: public int LastTriesNeeded { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property LastTriesNeeded As Integer
  overload: MLEM.Pathfinding.AStar`1.LastTriesNeeded*
  nameWithType.vb: AStar(Of T).LastTriesNeeded
  fullName.vb: MLEM.Pathfinding.AStar(Of T).LastTriesNeeded
- uid: MLEM.Pathfinding.AStar`1.LastTimeNeeded
  commentId: P:MLEM.Pathfinding.AStar`1.LastTimeNeeded
  id: LastTimeNeeded
  parent: MLEM.Pathfinding.AStar`1
  langs:
  - csharp
  - vb
  name: LastTimeNeeded
  nameWithType: AStar<T>.LastTimeNeeded
  fullName: MLEM.Pathfinding.AStar<T>.LastTimeNeeded
  type: Property
  source:
    remote:
      path: MLEM/Pathfinding/AStar.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: LastTimeNeeded
    path: ../MLEM/Pathfinding/AStar.cs
    startLine: 36
  assemblies:
  - MLEM
  namespace: MLEM.Pathfinding
  summary: The amount of time required for finding the last queried path
  example: []
  syntax:
    content: public TimeSpan LastTimeNeeded { get; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Property LastTimeNeeded As TimeSpan
  overload: MLEM.Pathfinding.AStar`1.LastTimeNeeded*
  nameWithType.vb: AStar(Of T).LastTimeNeeded
  fullName.vb: MLEM.Pathfinding.AStar(Of T).LastTimeNeeded
- uid: MLEM.Pathfinding.AStar`1.#ctor(MLEM.Pathfinding.AStar{`0}.GetCost,System.Single,System.Int32,MLEM.Pathfinding.AStar{`0}.CollectAdditionalNeighbors)
  commentId: M:MLEM.Pathfinding.AStar`1.#ctor(MLEM.Pathfinding.AStar{`0}.GetCost,System.Single,System.Int32,MLEM.Pathfinding.AStar{`0}.CollectAdditionalNeighbors)
  id: '#ctor(MLEM.Pathfinding.AStar{`0}.GetCost,System.Single,System.Int32,MLEM.Pathfinding.AStar{`0}.CollectAdditionalNeighbors)'
  parent: MLEM.Pathfinding.AStar`1
  langs:
  - csharp
  - vb
  name: AStar(GetCost, float, int, CollectAdditionalNeighbors)
  nameWithType: AStar<T>.AStar(AStar<T>.GetCost, float, int, AStar<T>.CollectAdditionalNeighbors)
  fullName: MLEM.Pathfinding.AStar<T>.AStar(MLEM.Pathfinding.AStar<T>.GetCost, float, int, MLEM.Pathfinding.AStar<T>.CollectAdditionalNeighbors)
  type: Constructor
  source:
    remote:
      path: MLEM/Pathfinding/AStar.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM/Pathfinding/AStar.cs
    startLine: 45
  assemblies:
  - MLEM
  namespace: MLEM.Pathfinding
  summary: Creates a new A* pathfinder with the supplied default settings.
  example: []
  syntax:
    content: protected AStar(AStar<T>.GetCost defaultCostFunction, float defaultCost, int defaultMaxTries, AStar<T>.CollectAdditionalNeighbors defaultAdditionalNeighbors)
    parameters:
    - id: defaultCostFunction
      type: MLEM.Pathfinding.AStar`1.GetCost
      description: The default function for cost determination of a path point
    - id: defaultCost
      type: System.Single
      description: The default cost for a path point
    - id: defaultMaxTries
      type: System.Int32
      description: The default amount of tries before path finding is aborted
    - id: defaultAdditionalNeighbors
      type: MLEM.Pathfinding.AStar`1.CollectAdditionalNeighbors
      description: The default <xref href="MLEM.Pathfinding.AStar%601.CollectAdditionalNeighbors" data-throw-if-not-resolved="false"></xref> function.
    content.vb: Protected Sub New(defaultCostFunction As AStar(Of T).GetCost, defaultCost As Single, defaultMaxTries As Integer, defaultAdditionalNeighbors As AStar(Of T).CollectAdditionalNeighbors)
  overload: MLEM.Pathfinding.AStar`1.#ctor*
  nameWithType.vb: AStar(Of T).New(AStar(Of T).GetCost, Single, Integer, AStar(Of T).CollectAdditionalNeighbors)
  fullName.vb: MLEM.Pathfinding.AStar(Of T).New(MLEM.Pathfinding.AStar(Of T).GetCost, Single, Integer, MLEM.Pathfinding.AStar(Of T).CollectAdditionalNeighbors)
  name.vb: New(GetCost, Single, Integer, CollectAdditionalNeighbors)
- uid: MLEM.Pathfinding.AStar`1.FindPath(`0,`0,MLEM.Pathfinding.AStar{`0}.GetCost,System.Nullable{System.Single},System.Nullable{System.Int32},MLEM.Pathfinding.AStar{`0}.CollectAdditionalNeighbors)
  commentId: M:MLEM.Pathfinding.AStar`1.FindPath(`0,`0,MLEM.Pathfinding.AStar{`0}.GetCost,System.Nullable{System.Single},System.Nullable{System.Int32},MLEM.Pathfinding.AStar{`0}.CollectAdditionalNeighbors)
  id: FindPath(`0,`0,MLEM.Pathfinding.AStar{`0}.GetCost,System.Nullable{System.Single},System.Nullable{System.Int32},MLEM.Pathfinding.AStar{`0}.CollectAdditionalNeighbors)
  parent: MLEM.Pathfinding.AStar`1
  langs:
  - csharp
  - vb
  name: FindPath(T, T, GetCost, float?, int?, CollectAdditionalNeighbors)
  nameWithType: AStar<T>.FindPath(T, T, AStar<T>.GetCost, float?, int?, AStar<T>.CollectAdditionalNeighbors)
  fullName: MLEM.Pathfinding.AStar<T>.FindPath(T, T, MLEM.Pathfinding.AStar<T>.GetCost, float?, int?, MLEM.Pathfinding.AStar<T>.CollectAdditionalNeighbors)
  type: Method
  source:
    remote:
      path: MLEM/Pathfinding/AStar.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: FindPath
    path: ../MLEM/Pathfinding/AStar.cs
    startLine: 62
  assemblies:
  - MLEM
  namespace: MLEM.Pathfinding
  summary: Finds a path between two points using this pathfinder's default settings or, alternatively, the supplied override settings.
  example: []
  syntax:
    content: public Stack<T> FindPath(T start, T goal, AStar<T>.GetCost costFunction = null, float? defaultCost = null, int? maxTries = null, AStar<T>.CollectAdditionalNeighbors additionalNeighbors = null)
    parameters:
    - id: start
      type: '{T}'
      description: The point to start path finding at
    - id: goal
      type: '{T}'
      description: The point to find a path to
    - id: costFunction
      type: MLEM.Pathfinding.AStar`1.GetCost
      description: The function that determines the cost for each path point
    - id: defaultCost
      type: System.Nullable{System.Single}
      description: The default cost for each path point
    - id: maxTries
      type: System.Nullable{System.Int32}
      description: The maximum amount of tries before path finding is aborted
    - id: additionalNeighbors
      type: MLEM.Pathfinding.AStar`1.CollectAdditionalNeighbors
      description: A function that determines a set of additional neighbors to be considered for a given point.
    return:
      type: System.Collections.Generic.Stack{{T}}
      description: A stack of path points, where the top item is the first point to go to, or null if no path was found.
    content.vb: Public Function FindPath(start As T, goal As T, costFunction As AStar(Of T).GetCost = Nothing, defaultCost As Single? = Nothing, maxTries As Integer? = Nothing, additionalNeighbors As AStar(Of T).CollectAdditionalNeighbors = Nothing) As Stack(Of T)
  overload: MLEM.Pathfinding.AStar`1.FindPath*
  nameWithType.vb: AStar(Of T).FindPath(T, T, AStar(Of T).GetCost, Single?, Integer?, AStar(Of T).CollectAdditionalNeighbors)
  fullName.vb: MLEM.Pathfinding.AStar(Of T).FindPath(T, T, MLEM.Pathfinding.AStar(Of T).GetCost, Single?, Integer?, MLEM.Pathfinding.AStar(Of T).CollectAdditionalNeighbors)
  name.vb: FindPath(T, T, GetCost, Single?, Integer?, CollectAdditionalNeighbors)
- uid: MLEM.Pathfinding.AStar`1.TryFindPath(`0,System.Collections.Generic.ICollection{`0},System.Collections.Generic.Stack{`0}@,System.Single@,MLEM.Pathfinding.AStar{`0}.GetCost,System.Nullable{System.Single},System.Nullable{System.Int32},MLEM.Pathfinding.AStar{`0}.CollectAdditionalNeighbors)
  commentId: M:MLEM.Pathfinding.AStar`1.TryFindPath(`0,System.Collections.Generic.ICollection{`0},System.Collections.Generic.Stack{`0}@,System.Single@,MLEM.Pathfinding.AStar{`0}.GetCost,System.Nullable{System.Single},System.Nullable{System.Int32},MLEM.Pathfinding.AStar{`0}.CollectAdditionalNeighbors)
  id: TryFindPath(`0,System.Collections.Generic.ICollection{`0},System.Collections.Generic.Stack{`0}@,System.Single@,MLEM.Pathfinding.AStar{`0}.GetCost,System.Nullable{System.Single},System.Nullable{System.Int32},MLEM.Pathfinding.AStar{`0}.CollectAdditionalNeighbors)
  parent: MLEM.Pathfinding.AStar`1
  langs:
  - csharp
  - vb
  name: TryFindPath(T, ICollection<T>, out Stack<T>, out float, GetCost, float?, int?, CollectAdditionalNeighbors)
  nameWithType: AStar<T>.TryFindPath(T, ICollection<T>, out Stack<T>, out float, AStar<T>.GetCost, float?, int?, AStar<T>.CollectAdditionalNeighbors)
  fullName: MLEM.Pathfinding.AStar<T>.TryFindPath(T, System.Collections.Generic.ICollection<T>, out System.Collections.Generic.Stack<T>, out float, MLEM.Pathfinding.AStar<T>.GetCost, float?, int?, MLEM.Pathfinding.AStar<T>.CollectAdditionalNeighbors)
  type: Method
  source:
    remote:
      path: MLEM/Pathfinding/AStar.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TryFindPath
    path: ../MLEM/Pathfinding/AStar.cs
    startLine: 79
  assemblies:
  - MLEM
  namespace: MLEM.Pathfinding
  summary: Tries to find a path between two points using this pathfinder's default settings or, alternatively, the supplied override settings.
  example: []
  syntax:
    content: public bool TryFindPath(T start, ICollection<T> goals, out Stack<T> path, out float totalCost, AStar<T>.GetCost costFunction = null, float? defaultCost = null, int? maxTries = null, AStar<T>.CollectAdditionalNeighbors additionalNeighbors = null)
    parameters:
    - id: start
      type: '{T}'
      description: The point to start path finding at
    - id: goals
      type: System.Collections.Generic.ICollection{{T}}
      description: The points to find a path to, one of which will be chosen as the closest or best destination
    - id: path
      type: System.Collections.Generic.Stack{{T}}
      description: The path that was found, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if no path was found.
    - id: totalCost
      type: System.Single
      description: The total cost that was calculated for the path, or <xref href="System.Single.PositiveInfinity" data-throw-if-not-resolved="false"></xref> if no path was found.
    - id: costFunction
      type: MLEM.Pathfinding.AStar`1.GetCost
      description: The function that determines the cost for each path point
    - id: defaultCost
      type: System.Nullable{System.Single}
      description: The default cost for each path point
    - id: maxTries
      type: System.Nullable{System.Int32}
      description: The maximum amount of tries before path finding is aborted
    - id: additionalNeighbors
      type: MLEM.Pathfinding.AStar`1.CollectAdditionalNeighbors
      description: A function that determines a set of additional neighbors to be considered for a given point.
    return:
      type: System.Boolean
      description: Whether a path was found.
    content.vb: Public Function TryFindPath(start As T, goals As ICollection(Of T), path As Stack(Of T), totalCost As Single, costFunction As AStar(Of T).GetCost = Nothing, defaultCost As Single? = Nothing, maxTries As Integer? = Nothing, additionalNeighbors As AStar(Of T).CollectAdditionalNeighbors = Nothing) As Boolean
  overload: MLEM.Pathfinding.AStar`1.TryFindPath*
  nameWithType.vb: AStar(Of T).TryFindPath(T, ICollection(Of T), Stack(Of T), Single, AStar(Of T).GetCost, Single?, Integer?, AStar(Of T).CollectAdditionalNeighbors)
  fullName.vb: MLEM.Pathfinding.AStar(Of T).TryFindPath(T, System.Collections.Generic.ICollection(Of T), System.Collections.Generic.Stack(Of T), Single, MLEM.Pathfinding.AStar(Of T).GetCost, Single?, Integer?, MLEM.Pathfinding.AStar(Of T).CollectAdditionalNeighbors)
  name.vb: TryFindPath(T, ICollection(Of T), Stack(Of T), Single, GetCost, Single?, Integer?, CollectAdditionalNeighbors)
- uid: MLEM.Pathfinding.AStar`1.GetHeuristicDistance(`0,`0)
  commentId: M:MLEM.Pathfinding.AStar`1.GetHeuristicDistance(`0,`0)
  id: GetHeuristicDistance(`0,`0)
  parent: MLEM.Pathfinding.AStar`1
  langs:
  - csharp
  - vb
  name: GetHeuristicDistance(T, T)
  nameWithType: AStar<T>.GetHeuristicDistance(T, T)
  fullName: MLEM.Pathfinding.AStar<T>.GetHeuristicDistance(T, T)
  type: Method
  source:
    remote:
      path: MLEM/Pathfinding/AStar.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetHeuristicDistance
    path: ../MLEM/Pathfinding/AStar.cs
    startLine: 153
  assemblies:
  - MLEM
  namespace: MLEM.Pathfinding
  summary: >-
    This method should implement a heuristic that determines the total distance between the given <code class="paramref">start</code> position and the given second position <code class="paramref">position</code>.

    Note that this is multiplied with the <xref href="MLEM.Pathfinding.AStar%601.DefaultCost" data-throw-if-not-resolved="false"></xref> automatically, so no costs need to be considered in this method's return value.
  example: []
  syntax:
    content: protected abstract float GetHeuristicDistance(T start, T position)
    parameters:
    - id: start
      type: '{T}'
      description: The start position.
    - id: position
      type: '{T}'
      description: The position to get the distance to.
    return:
      type: System.Single
      description: The total distance between the two positions.
    content.vb: Protected MustOverride Function GetHeuristicDistance(start As T, position As T) As Single
  overload: MLEM.Pathfinding.AStar`1.GetHeuristicDistance*
  nameWithType.vb: AStar(Of T).GetHeuristicDistance(T, T)
  fullName.vb: MLEM.Pathfinding.AStar(Of T).GetHeuristicDistance(T, T)
- uid: MLEM.Pathfinding.AStar`1.CollectNeighbors(`0,System.Collections.Generic.ISet{`0})
  commentId: M:MLEM.Pathfinding.AStar`1.CollectNeighbors(`0,System.Collections.Generic.ISet{`0})
  id: CollectNeighbors(`0,System.Collections.Generic.ISet{`0})
  parent: MLEM.Pathfinding.AStar`1
  langs:
  - csharp
  - vb
  name: CollectNeighbors(T, ISet<T>)
  nameWithType: AStar<T>.CollectNeighbors(T, ISet<T>)
  fullName: MLEM.Pathfinding.AStar<T>.CollectNeighbors(T, System.Collections.Generic.ISet<T>)
  type: Method
  source:
    remote:
      path: MLEM/Pathfinding/AStar.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CollectNeighbors
    path: ../MLEM/Pathfinding/AStar.cs
    startLine: 160
  assemblies:
  - MLEM
  namespace: MLEM.Pathfinding
  summary: This method should populate a set of positions that are considered <code class="paramref">neighbors</code> to the given <code class="paramref">position</code>. For example, this method might return directly adjacent positions, diagonal positions, or faraway positions that can be teleported to.
  example: []
  syntax:
    content: protected abstract void CollectNeighbors(T position, ISet<T> neighbors)
    parameters:
    - id: position
      type: '{T}'
      description: The position whose neighbors to return.
    - id: neighbors
      type: System.Collections.Generic.ISet{{T}}
      description: The set to populate with neighbors.
    content.vb: Protected MustOverride Sub CollectNeighbors(position As T, neighbors As ISet(Of T))
  overload: MLEM.Pathfinding.AStar`1.CollectNeighbors*
  nameWithType.vb: AStar(Of T).CollectNeighbors(T, ISet(Of T))
  fullName.vb: MLEM.Pathfinding.AStar(Of T).CollectNeighbors(T, System.Collections.Generic.ISet(Of T))
  name.vb: CollectNeighbors(T, ISet(Of T))
references:
- uid: MLEM.Pathfinding.AStar2
  commentId: T:MLEM.Pathfinding.AStar2
  href: MLEM.Pathfinding.AStar2.html
  name: AStar2
  nameWithType: AStar2
  fullName: MLEM.Pathfinding.AStar2
- uid: MLEM.Pathfinding.AStar3
  commentId: T:MLEM.Pathfinding.AStar3
  href: MLEM.Pathfinding.AStar3.html
  name: AStar3
  nameWithType: AStar3
  fullName: MLEM.Pathfinding.AStar3
- uid: MLEM.Pathfinding
  commentId: N:MLEM.Pathfinding
  href: MLEM.html
  name: MLEM.Pathfinding
  nameWithType: MLEM.Pathfinding
  fullName: MLEM.Pathfinding
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Pathfinding
    name: Pathfinding
    href: MLEM.Pathfinding.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Pathfinding
    name: Pathfinding
    href: MLEM.Pathfinding.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Pathfinding.AStar`1.GetCost
  commentId: T:MLEM.Pathfinding.AStar`1.GetCost
  parent: MLEM.Pathfinding
  href: MLEM.Pathfinding.AStar-1.html
  name: AStar<T>.GetCost
  nameWithType: AStar<T>.GetCost
  fullName: MLEM.Pathfinding.AStar<T>.GetCost
  nameWithType.vb: AStar(Of T).GetCost
  fullName.vb: MLEM.Pathfinding.AStar(Of T).GetCost
  name.vb: AStar(Of T).GetCost
  spec.csharp:
  - uid: MLEM.Pathfinding.AStar`1
    name: AStar
    href: MLEM.Pathfinding.AStar-1.html
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: MLEM.Pathfinding.AStar`1.GetCost
    name: GetCost
    href: MLEM.Pathfinding.AStar-1.GetCost.html
  spec.vb:
  - uid: MLEM.Pathfinding.AStar`1
    name: AStar
    href: MLEM.Pathfinding.AStar-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: MLEM.Pathfinding.AStar`1.GetCost
    name: GetCost
    href: MLEM.Pathfinding.AStar-1.GetCost.html
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: MLEM.Pathfinding.AStar`1.CollectAdditionalNeighbors
  commentId: T:MLEM.Pathfinding.AStar`1.CollectAdditionalNeighbors
  parent: MLEM.Pathfinding
  href: MLEM.Pathfinding.AStar-1.html
  name: AStar<T>.CollectAdditionalNeighbors
  nameWithType: AStar<T>.CollectAdditionalNeighbors
  fullName: MLEM.Pathfinding.AStar<T>.CollectAdditionalNeighbors
  nameWithType.vb: AStar(Of T).CollectAdditionalNeighbors
  fullName.vb: MLEM.Pathfinding.AStar(Of T).CollectAdditionalNeighbors
  name.vb: AStar(Of T).CollectAdditionalNeighbors
  spec.csharp:
  - uid: MLEM.Pathfinding.AStar`1
    name: AStar
    href: MLEM.Pathfinding.AStar-1.html
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: MLEM.Pathfinding.AStar`1.CollectAdditionalNeighbors
    name: CollectAdditionalNeighbors
    href: MLEM.Pathfinding.AStar-1.CollectAdditionalNeighbors.html
  spec.vb:
  - uid: MLEM.Pathfinding.AStar`1
    name: AStar
    href: MLEM.Pathfinding.AStar-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: MLEM.Pathfinding.AStar`1.CollectAdditionalNeighbors
    name: CollectAdditionalNeighbors
    href: MLEM.Pathfinding.AStar-1.CollectAdditionalNeighbors.html
- uid: MLEM.Pathfinding.AStar`1.LastTriesNeeded*
  commentId: Overload:MLEM.Pathfinding.AStar`1.LastTriesNeeded
  href: MLEM.Pathfinding.AStar-1.html#MLEM_Pathfinding_AStar_1_LastTriesNeeded
  name: LastTriesNeeded
  nameWithType: AStar<T>.LastTriesNeeded
  fullName: MLEM.Pathfinding.AStar<T>.LastTriesNeeded
  nameWithType.vb: AStar(Of T).LastTriesNeeded
  fullName.vb: MLEM.Pathfinding.AStar(Of T).LastTriesNeeded
- uid: MLEM.Pathfinding.AStar`1.LastTimeNeeded*
  commentId: Overload:MLEM.Pathfinding.AStar`1.LastTimeNeeded
  href: MLEM.Pathfinding.AStar-1.html#MLEM_Pathfinding_AStar_1_LastTimeNeeded
  name: LastTimeNeeded
  nameWithType: AStar<T>.LastTimeNeeded
  fullName: MLEM.Pathfinding.AStar<T>.LastTimeNeeded
  nameWithType.vb: AStar(Of T).LastTimeNeeded
  fullName.vb: MLEM.Pathfinding.AStar(Of T).LastTimeNeeded
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: MLEM.Pathfinding.AStar`1.#ctor*
  commentId: Overload:MLEM.Pathfinding.AStar`1.#ctor
  href: MLEM.Pathfinding.AStar-1.html#MLEM_Pathfinding_AStar_1__ctor_MLEM_Pathfinding_AStar__0__GetCost_System_Single_System_Int32_MLEM_Pathfinding_AStar__0__CollectAdditionalNeighbors_
  name: AStar
  nameWithType: AStar<T>.AStar
  fullName: MLEM.Pathfinding.AStar<T>.AStar
  nameWithType.vb: AStar(Of T).New
  fullName.vb: MLEM.Pathfinding.AStar(Of T).New
  name.vb: New
- uid: MLEM.Pathfinding.AStar`1.FindPath*
  commentId: Overload:MLEM.Pathfinding.AStar`1.FindPath
  href: MLEM.Pathfinding.AStar-1.html#MLEM_Pathfinding_AStar_1_FindPath__0__0_MLEM_Pathfinding_AStar__0__GetCost_System_Nullable_System_Single__System_Nullable_System_Int32__MLEM_Pathfinding_AStar__0__CollectAdditionalNeighbors_
  name: FindPath
  nameWithType: AStar<T>.FindPath
  fullName: MLEM.Pathfinding.AStar<T>.FindPath
  nameWithType.vb: AStar(Of T).FindPath
  fullName.vb: MLEM.Pathfinding.AStar(Of T).FindPath
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float?
  nameWithType: float?
  fullName: float?
  nameWithType.vb: Single?
  fullName.vb: Single?
  name.vb: Single?
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
- uid: System.Collections.Generic.Stack{{T}}
  commentId: T:System.Collections.Generic.Stack{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Stack`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  name: Stack<T>
  nameWithType: Stack<T>
  fullName: System.Collections.Generic.Stack<T>
  nameWithType.vb: Stack(Of T)
  fullName.vb: System.Collections.Generic.Stack(Of T)
  name.vb: Stack(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.Stack`1
  commentId: T:System.Collections.Generic.Stack`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  name: Stack<T>
  nameWithType: Stack<T>
  fullName: System.Collections.Generic.Stack<T>
  nameWithType.vb: Stack(Of T)
  fullName.vb: System.Collections.Generic.Stack(Of T)
  name.vb: Stack(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Single.PositiveInfinity
  commentId: F:System.Single.PositiveInfinity
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single.positiveinfinity
  name: PositiveInfinity
  nameWithType: float.PositiveInfinity
  fullName: float.PositiveInfinity
  nameWithType.vb: Single.PositiveInfinity
  fullName.vb: Single.PositiveInfinity
- uid: MLEM.Pathfinding.AStar`1.TryFindPath*
  commentId: Overload:MLEM.Pathfinding.AStar`1.TryFindPath
  href: MLEM.Pathfinding.AStar-1.html#MLEM_Pathfinding_AStar_1_TryFindPath__0_System_Collections_Generic_ICollection__0__System_Collections_Generic_Stack__0___System_Single__MLEM_Pathfinding_AStar__0__GetCost_System_Nullable_System_Single__System_Nullable_System_Int32__MLEM_Pathfinding_AStar__0__CollectAdditionalNeighbors_
  name: TryFindPath
  nameWithType: AStar<T>.TryFindPath
  fullName: MLEM.Pathfinding.AStar<T>.TryFindPath
  nameWithType.vb: AStar(Of T).TryFindPath
  fullName.vb: MLEM.Pathfinding.AStar(Of T).TryFindPath
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Pathfinding.AStar`1.DefaultCost
  commentId: F:MLEM.Pathfinding.AStar`1.DefaultCost
  href: MLEM.Pathfinding.AStar-1.html#MLEM_Pathfinding_AStar_1_DefaultCost
  name: DefaultCost
  nameWithType: AStar<T>.DefaultCost
  fullName: MLEM.Pathfinding.AStar<T>.DefaultCost
  nameWithType.vb: AStar(Of T).DefaultCost
  fullName.vb: MLEM.Pathfinding.AStar(Of T).DefaultCost
- uid: MLEM.Pathfinding.AStar`1.GetHeuristicDistance*
  commentId: Overload:MLEM.Pathfinding.AStar`1.GetHeuristicDistance
  href: MLEM.Pathfinding.AStar-1.html#MLEM_Pathfinding_AStar_1_GetHeuristicDistance__0__0_
  name: GetHeuristicDistance
  nameWithType: AStar<T>.GetHeuristicDistance
  fullName: MLEM.Pathfinding.AStar<T>.GetHeuristicDistance
  nameWithType.vb: AStar(Of T).GetHeuristicDistance
  fullName.vb: MLEM.Pathfinding.AStar(Of T).GetHeuristicDistance
- uid: MLEM.Pathfinding.AStar`1.CollectNeighbors*
  commentId: Overload:MLEM.Pathfinding.AStar`1.CollectNeighbors
  href: MLEM.Pathfinding.AStar-1.html#MLEM_Pathfinding_AStar_1_CollectNeighbors__0_System_Collections_Generic_ISet__0__
  name: CollectNeighbors
  nameWithType: AStar<T>.CollectNeighbors
  fullName: MLEM.Pathfinding.AStar<T>.CollectNeighbors
  nameWithType.vb: AStar(Of T).CollectNeighbors
  fullName.vb: MLEM.Pathfinding.AStar(Of T).CollectNeighbors
- uid: System.Collections.Generic.ISet{{T}}
  commentId: T:System.Collections.Generic.ISet{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iset-1
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iset-1
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
