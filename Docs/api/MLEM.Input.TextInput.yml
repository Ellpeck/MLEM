### YamlMime:ManagedReference
items:
- uid: MLEM.Input.TextInput
  commentId: T:MLEM.Input.TextInput
  id: TextInput
  parent: MLEM.Input
  children:
  - MLEM.Input.TextInput.#ctor(MLEM.Font.GenericFont,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Input.TextInput.Rule,System.Action{System.String},System.Func{System.String})
  - MLEM.Input.TextInput.CaretLine
  - MLEM.Input.TextInput.CaretPos
  - MLEM.Input.TextInput.CaretPosInLine
  - MLEM.Input.TextInput.CopyToClipboardFunction
  - MLEM.Input.TextInput.DefaultRule
  - MLEM.Input.TextInput.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Color)
  - MLEM.Input.TextInput.FileNames
  - MLEM.Input.TextInput.FirstVisibleLine
  - MLEM.Input.TextInput.Font
  - MLEM.Input.TextInput.InputRule
  - MLEM.Input.TextInput.InsertText(System.Object,System.Boolean)
  - MLEM.Input.TextInput.Length
  - MLEM.Input.TextInput.LettersNumbers
  - MLEM.Input.TextInput.Lines
  - MLEM.Input.TextInput.MaskingCharacter
  - MLEM.Input.TextInput.MaxDisplayedLines
  - MLEM.Input.TextInput.MaximumCharacters
  - MLEM.Input.TextInput.MoveCaretToLine(System.Int32)
  - MLEM.Input.TextInput.Multiline
  - MLEM.Input.TextInput.OnTextChange
  - MLEM.Input.TextInput.OnTextInput(Microsoft.Xna.Framework.Input.Keys,System.Char)
  - MLEM.Input.TextInput.OnlyLetters
  - MLEM.Input.TextInput.OnlyNumbers
  - MLEM.Input.TextInput.PasteFromClipboardFunction
  - MLEM.Input.TextInput.PathNames
  - MLEM.Input.TextInput.RemoveText(System.Int32,System.Int32)
  - MLEM.Input.TextInput.SetText(System.Object,System.Boolean)
  - MLEM.Input.TextInput.ShowLine(System.Int32)
  - MLEM.Input.TextInput.Size
  - MLEM.Input.TextInput.Text
  - MLEM.Input.TextInput.TextScale
  - MLEM.Input.TextInput.Update(Microsoft.Xna.Framework.GameTime,MLEM.Input.InputHandler)
  langs:
  - csharp
  - vb
  name: TextInput
  nameWithType: TextInput
  fullName: MLEM.Input.TextInput
  type: Class
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TextInput
    path: ../MLEM/Input/TextInput.cs
    startLine: 19
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    A class that contains all of the necessary tools to create a text input field or box.

    This text input features single- and <xref href="MLEM.Input.TextInput.Multiline" data-throw-if-not-resolved="false"></xref> input, <xref href="MLEM.Input.TextInput.InputRule" data-throw-if-not-resolved="false"></xref> sets, free caret movement, copying and pasting, and more.

    To use this class, <xref href="MLEM.Input.TextInput.OnTextInput(Microsoft.Xna.Framework.Input.Keys%2cSystem.Char)" data-throw-if-not-resolved="false"></xref>, <xref href="MLEM.Input.TextInput.Update(Microsoft.Xna.Framework.GameTime%2cMLEM.Input.InputHandler)" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Input.TextInput.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Single%2cSystem.Single%2cMicrosoft.Xna.Framework.Color)" data-throw-if-not-resolved="false"></xref> have to be called regularly.

    While this class is used by MLEM.Ui's TextField, it is designed to be used for custom or external UI systems.
  example: []
  syntax:
    content: public class TextInput
    content.vb: Public Class TextInput
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: MLEM.Input.TextInput.DefaultRule
  commentId: F:MLEM.Input.TextInput.DefaultRule
  id: DefaultRule
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: DefaultRule
  nameWithType: TextInput.DefaultRule
  fullName: MLEM.Input.TextInput.DefaultRule
  type: Field
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: DefaultRule
    path: ../MLEM/Input/TextInput.cs
    startLine: 24
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: A <xref href="MLEM.Input.TextInput.Rule" data-throw-if-not-resolved="false"></xref> that allows any visible character and spaces
  example: []
  syntax:
    content: public static readonly TextInput.Rule DefaultRule
    return:
      type: MLEM.Input.TextInput.Rule
    content.vb: Public Shared ReadOnly DefaultRule As TextInput.Rule
- uid: MLEM.Input.TextInput.OnlyLetters
  commentId: F:MLEM.Input.TextInput.OnlyLetters
  id: OnlyLetters
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: OnlyLetters
  nameWithType: TextInput.OnlyLetters
  fullName: MLEM.Input.TextInput.OnlyLetters
  type: Field
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnlyLetters
    path: ../MLEM/Input/TextInput.cs
    startLine: 34
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: A <xref href="MLEM.Input.TextInput.Rule" data-throw-if-not-resolved="false"></xref> that only allows letters
  example: []
  syntax:
    content: public static readonly TextInput.Rule OnlyLetters
    return:
      type: MLEM.Input.TextInput.Rule
    content.vb: Public Shared ReadOnly OnlyLetters As TextInput.Rule
- uid: MLEM.Input.TextInput.OnlyNumbers
  commentId: F:MLEM.Input.TextInput.OnlyNumbers
  id: OnlyNumbers
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: OnlyNumbers
  nameWithType: TextInput.OnlyNumbers
  fullName: MLEM.Input.TextInput.OnlyNumbers
  type: Field
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnlyNumbers
    path: ../MLEM/Input/TextInput.cs
    startLine: 44
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: A <xref href="MLEM.Input.TextInput.Rule" data-throw-if-not-resolved="false"></xref> that only allows numerals
  example: []
  syntax:
    content: public static readonly TextInput.Rule OnlyNumbers
    return:
      type: MLEM.Input.TextInput.Rule
    content.vb: Public Shared ReadOnly OnlyNumbers As TextInput.Rule
- uid: MLEM.Input.TextInput.LettersNumbers
  commentId: F:MLEM.Input.TextInput.LettersNumbers
  id: LettersNumbers
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: LettersNumbers
  nameWithType: TextInput.LettersNumbers
  fullName: MLEM.Input.TextInput.LettersNumbers
  type: Field
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: LettersNumbers
    path: ../MLEM/Input/TextInput.cs
    startLine: 54
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: A <xref href="MLEM.Input.TextInput.Rule" data-throw-if-not-resolved="false"></xref> that only allows letters and numerals
  example: []
  syntax:
    content: public static readonly TextInput.Rule LettersNumbers
    return:
      type: MLEM.Input.TextInput.Rule
    content.vb: Public Shared ReadOnly LettersNumbers As TextInput.Rule
- uid: MLEM.Input.TextInput.PathNames
  commentId: F:MLEM.Input.TextInput.PathNames
  id: PathNames
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: PathNames
  nameWithType: TextInput.PathNames
  fullName: MLEM.Input.TextInput.PathNames
  type: Field
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: PathNames
    path: ../MLEM/Input/TextInput.cs
    startLine: 64
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: A <xref href="MLEM.Input.TextInput.Rule" data-throw-if-not-resolved="false"></xref> that only allows characters not contained in <xref href="System.IO.Path.GetInvalidPathChars" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static readonly TextInput.Rule PathNames
    return:
      type: MLEM.Input.TextInput.Rule
    content.vb: Public Shared ReadOnly PathNames As TextInput.Rule
- uid: MLEM.Input.TextInput.FileNames
  commentId: F:MLEM.Input.TextInput.FileNames
  id: FileNames
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: FileNames
  nameWithType: TextInput.FileNames
  fullName: MLEM.Input.TextInput.FileNames
  type: Field
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: FileNames
    path: ../MLEM/Input/TextInput.cs
    startLine: 74
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: A <xref href="MLEM.Input.TextInput.Rule" data-throw-if-not-resolved="false"></xref> that only allows characters not contained in <xref href="System.IO.Path.GetInvalidFileNameChars" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static readonly TextInput.Rule FileNames
    return:
      type: MLEM.Input.TextInput.Rule
    content.vb: Public Shared ReadOnly FileNames As TextInput.Rule
- uid: MLEM.Input.TextInput.Text
  commentId: P:MLEM.Input.TextInput.Text
  id: Text
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: Text
  nameWithType: TextInput.Text
  fullName: MLEM.Input.TextInput.Text
  type: Property
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Text
    path: ../MLEM/Input/TextInput.cs
    startLine: 85
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: This text input's current text
  example: []
  syntax:
    content: public string Text { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Text As String
  overload: MLEM.Input.TextInput.Text*
- uid: MLEM.Input.TextInput.Length
  commentId: P:MLEM.Input.TextInput.Length
  id: Length
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: TextInput.Length
  fullName: MLEM.Input.TextInput.Length
  type: Property
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Length
    path: ../MLEM/Input/TextInput.cs
    startLine: 89
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: The length that this <xref href="MLEM.Input.TextInput" data-throw-if-not-resolved="false"></xref>'s text has.
  example: []
  syntax:
    content: public int Length { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Length As Integer
  overload: MLEM.Input.TextInput.Length*
- uid: MLEM.Input.TextInput.OnTextChange
  commentId: F:MLEM.Input.TextInput.OnTextChange
  id: OnTextChange
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: OnTextChange
  nameWithType: TextInput.OnTextChange
  fullName: MLEM.Input.TextInput.OnTextChange
  type: Field
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnTextChange
    path: ../MLEM/Input/TextInput.cs
    startLine: 93
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: An event that gets called when <xref href="MLEM.Input.TextInput.Text" data-throw-if-not-resolved="false"></xref> changes, either through input, or through a manual change.
  example: []
  syntax:
    content: public TextInput.TextChanged OnTextChange
    return:
      type: MLEM.Input.TextInput.TextChanged
    content.vb: Public OnTextChange As TextInput.TextChanged
- uid: MLEM.Input.TextInput.InputRule
  commentId: F:MLEM.Input.TextInput.InputRule
  id: InputRule
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: InputRule
  nameWithType: TextInput.InputRule
  fullName: MLEM.Input.TextInput.InputRule
  type: Field
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: InputRule
    path: ../MLEM/Input/TextInput.cs
    startLine: 98
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    The rule used for text input.

    Rules allow only certain characters to be allowed inside of a text input.
  example: []
  syntax:
    content: public TextInput.Rule InputRule
    return:
      type: MLEM.Input.TextInput.Rule
    content.vb: Public InputRule As TextInput.Rule
- uid: MLEM.Input.TextInput.CaretPos
  commentId: P:MLEM.Input.TextInput.CaretPos
  id: CaretPos
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: CaretPos
  nameWithType: TextInput.CaretPos
  fullName: MLEM.Input.TextInput.CaretPos
  type: Property
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CaretPos
    path: ../MLEM/Input/TextInput.cs
    startLine: 103
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    The position of the caret within the text.

    This is always between 0 and the <xref href="System.String.Length" data-throw-if-not-resolved="false"></xref> of <xref href="MLEM.Input.TextInput.Text" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public int CaretPos { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property CaretPos As Integer
  overload: MLEM.Input.TextInput.CaretPos*
- uid: MLEM.Input.TextInput.CaretLine
  commentId: P:MLEM.Input.TextInput.CaretLine
  id: CaretLine
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: CaretLine
  nameWithType: TextInput.CaretLine
  fullName: MLEM.Input.TextInput.CaretLine
  type: Property
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CaretLine
    path: ../MLEM/Input/TextInput.cs
    startLine: 119
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    The line of text that the caret is currently on.

    This can only be only non-0 if <xref href="MLEM.Input.TextInput.Multiline" data-throw-if-not-resolved="false"></xref> is true.
  example: []
  syntax:
    content: public int CaretLine { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property CaretLine As Integer
  overload: MLEM.Input.TextInput.CaretLine*
- uid: MLEM.Input.TextInput.CaretPosInLine
  commentId: P:MLEM.Input.TextInput.CaretPosInLine
  id: CaretPosInLine
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: CaretPosInLine
  nameWithType: TextInput.CaretPosInLine
  fullName: MLEM.Input.TextInput.CaretPosInLine
  type: Property
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CaretPosInLine
    path: ../MLEM/Input/TextInput.cs
    startLine: 129
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    The position in the current <xref href="MLEM.Input.TextInput.CaretLine" data-throw-if-not-resolved="false"></xref> that the caret is currently on.

    If <xref href="MLEM.Input.TextInput.Multiline" data-throw-if-not-resolved="false"></xref> is false, this value is always equal to <xref href="MLEM.Input.TextInput.CaretPos" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public int CaretPosInLine { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property CaretPosInLine As Integer
  overload: MLEM.Input.TextInput.CaretPosInLine*
- uid: MLEM.Input.TextInput.MaskingCharacter
  commentId: P:MLEM.Input.TextInput.MaskingCharacter
  id: MaskingCharacter
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: MaskingCharacter
  nameWithType: TextInput.MaskingCharacter
  fullName: MLEM.Input.TextInput.MaskingCharacter
  type: Property
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: MaskingCharacter
    path: ../MLEM/Input/TextInput.cs
    startLine: 140
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    A character that should be displayed instead of this text input's <xref href="MLEM.Input.TextInput.Text" data-throw-if-not-resolved="false"></xref> content.

    The amount of masking characters displayed will be equal to the <xref href="MLEM.Input.TextInput.Text" data-throw-if-not-resolved="false"></xref>'s length.

    This behavior is useful for password inputs or similar.
  example: []
  syntax:
    content: public char? MaskingCharacter { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Char}
    content.vb: Public Property MaskingCharacter As Char?
  overload: MLEM.Input.TextInput.MaskingCharacter*
- uid: MLEM.Input.TextInput.MaximumCharacters
  commentId: F:MLEM.Input.TextInput.MaximumCharacters
  id: MaximumCharacters
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: MaximumCharacters
  nameWithType: TextInput.MaximumCharacters
  fullName: MLEM.Input.TextInput.MaximumCharacters
  type: Field
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: MaximumCharacters
    path: ../MLEM/Input/TextInput.cs
    startLine: 153
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    The maximum amount of characters that can be input into this text input.

    If this is set, the length of <xref href="MLEM.Input.TextInput.Text" data-throw-if-not-resolved="false"></xref> will never exceed this value.
  example: []
  syntax:
    content: public int? MaximumCharacters
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public MaximumCharacters As Integer?
- uid: MLEM.Input.TextInput.Multiline
  commentId: P:MLEM.Input.TextInput.Multiline
  id: Multiline
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: Multiline
  nameWithType: TextInput.Multiline
  fullName: MLEM.Input.TextInput.Multiline
  type: Property
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Multiline
    path: ../MLEM/Input/TextInput.cs
    startLine: 159
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Whether this text input should support multi-line editing.

    If this is true, pressing <xref href="Microsoft.Xna.Framework.Input.Keys.Enter" data-throw-if-not-resolved="false"></xref> will insert a new line into the <xref href="MLEM.Input.TextInput.Text" data-throw-if-not-resolved="false"></xref> if the <xref href="MLEM.Input.TextInput.InputRule" data-throw-if-not-resolved="false"></xref> allows it.

    Additionally, text will be rendered with horizontal soft wraps, and lines that are outside of the text input's bounds will be hidden.
  example: []
  syntax:
    content: public bool Multiline { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Multiline As Boolean
  overload: MLEM.Input.TextInput.Multiline*
- uid: MLEM.Input.TextInput.Font
  commentId: P:MLEM.Input.TextInput.Font
  id: Font
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: Font
  nameWithType: TextInput.Font
  fullName: MLEM.Input.TextInput.Font
  type: Property
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Font
    path: ../MLEM/Input/TextInput.cs
    startLine: 171
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: The font that this text input is currently using.
  example: []
  syntax:
    content: public GenericFont Font { get; set; }
    parameters: []
    return:
      type: MLEM.Font.GenericFont
    content.vb: Public Property Font As GenericFont
  overload: MLEM.Input.TextInput.Font*
- uid: MLEM.Input.TextInput.TextScale
  commentId: P:MLEM.Input.TextInput.TextScale
  id: TextScale
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: TextScale
  nameWithType: TextInput.TextScale
  fullName: MLEM.Input.TextInput.TextScale
  type: Property
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TextScale
    path: ../MLEM/Input/TextInput.cs
    startLine: 184
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    The scale that this text input's text has.

    In <xref href="MLEM.Input.TextInput.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Single%2cSystem.Single%2cMicrosoft.Xna.Framework.Color)" data-throw-if-not-resolved="false"></xref>, this is multiplied with the drawScale parameter.
  example: []
  syntax:
    content: public float TextScale { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property TextScale As Single
  overload: MLEM.Input.TextInput.TextScale*
- uid: MLEM.Input.TextInput.Size
  commentId: P:MLEM.Input.TextInput.Size
  id: Size
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: TextInput.Size
  fullName: MLEM.Input.TextInput.Size
  type: Property
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Size
    path: ../MLEM/Input/TextInput.cs
    startLine: 197
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    The size of this text input, which is the size that this text input's <xref href="MLEM.Input.TextInput.Text" data-throw-if-not-resolved="false"></xref> will be bounded to in <xref href="MLEM.Input.TextInput.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Single%2cSystem.Single%2cMicrosoft.Xna.Framework.Color)" data-throw-if-not-resolved="false"></xref>.

    Note that <xref href="MLEM.Input.TextInput.TextScale" data-throw-if-not-resolved="false"></xref> gets applied to the text for calculations involving this size.
  example: []
  syntax:
    content: public Vector2 Size { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public Property Size As Vector2
  overload: MLEM.Input.TextInput.Size*
- uid: MLEM.Input.TextInput.MaxDisplayedLines
  commentId: P:MLEM.Input.TextInput.MaxDisplayedLines
  id: MaxDisplayedLines
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: MaxDisplayedLines
  nameWithType: TextInput.MaxDisplayedLines
  fullName: MLEM.Input.TextInput.MaxDisplayedLines
  type: Property
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: MaxDisplayedLines
    path: ../MLEM/Input/TextInput.cs
    startLine: 210
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    The maximum amount of lines that can be visible in this text input, based on its <xref href="MLEM.Input.TextInput.Size" data-throw-if-not-resolved="false"></xref>, the used <xref href="MLEM.Input.TextInput.Font" data-throw-if-not-resolved="false"></xref> and its <xref href="MLEM.Input.TextInput.TextScale" data-throw-if-not-resolved="false"></xref>.

    Note that this may return a number higher than 1 even if this is not a <xref href="MLEM.Input.TextInput.Multiline" data-throw-if-not-resolved="false"></xref> text input.
  example: []
  syntax:
    content: public int MaxDisplayedLines { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property MaxDisplayedLines As Integer
  overload: MLEM.Input.TextInput.MaxDisplayedLines*
- uid: MLEM.Input.TextInput.FirstVisibleLine
  commentId: P:MLEM.Input.TextInput.FirstVisibleLine
  id: FirstVisibleLine
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: FirstVisibleLine
  nameWithType: TextInput.FirstVisibleLine
  fullName: MLEM.Input.TextInput.FirstVisibleLine
  type: Property
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: FirstVisibleLine
    path: ../MLEM/Input/TextInput.cs
    startLine: 215
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    The index of the first line that is currently visible.

    This value can be changed using <xref href="MLEM.Input.TextInput.ShowLine(System.Int32)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public int FirstVisibleLine { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property FirstVisibleLine As Integer
  overload: MLEM.Input.TextInput.FirstVisibleLine*
- uid: MLEM.Input.TextInput.Lines
  commentId: P:MLEM.Input.TextInput.Lines
  id: Lines
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: Lines
  nameWithType: TextInput.Lines
  fullName: MLEM.Input.TextInput.Lines
  type: Property
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Lines
    path: ../MLEM/Input/TextInput.cs
    startLine: 220
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    The total amount of lines of text that this text input currently has, including additional lines added by automatic wrapping.

    If this is not a <xref href="MLEM.Input.TextInput.Multiline" data-throw-if-not-resolved="false"></xref> text input, this value is always 1.
  example: []
  syntax:
    content: public int Lines { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Lines As Integer
  overload: MLEM.Input.TextInput.Lines*
- uid: MLEM.Input.TextInput.CopyToClipboardFunction
  commentId: F:MLEM.Input.TextInput.CopyToClipboardFunction
  id: CopyToClipboardFunction
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: CopyToClipboardFunction
  nameWithType: TextInput.CopyToClipboardFunction
  fullName: MLEM.Input.TextInput.CopyToClipboardFunction
  type: Field
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CopyToClipboardFunction
    path: ../MLEM/Input/TextInput.cs
    startLine: 225
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    A function that is invoked when a string of text should be copied to the clipboard.

    MLEM.Ui uses the TextCopy package for this, but other options are available.
  example: []
  syntax:
    content: public Action<string> CopyToClipboardFunction
    return:
      type: System.Action{System.String}
    content.vb: Public CopyToClipboardFunction As Action(Of String)
- uid: MLEM.Input.TextInput.PasteFromClipboardFunction
  commentId: F:MLEM.Input.TextInput.PasteFromClipboardFunction
  id: PasteFromClipboardFunction
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: PasteFromClipboardFunction
  nameWithType: TextInput.PasteFromClipboardFunction
  fullName: MLEM.Input.TextInput.PasteFromClipboardFunction
  type: Field
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: PasteFromClipboardFunction
    path: ../MLEM/Input/TextInput.cs
    startLine: 230
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    A function that is invoked when a string of text should be pasted from the clipboard.

    MLEM.Ui uses the TextCopy package for this, but other options are available.
  example: []
  syntax:
    content: public Func<string> PasteFromClipboardFunction
    return:
      type: System.Func{System.String}
    content.vb: Public PasteFromClipboardFunction As Func(Of String)
- uid: MLEM.Input.TextInput.#ctor(MLEM.Font.GenericFont,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Input.TextInput.Rule,System.Action{System.String},System.Func{System.String})
  commentId: M:MLEM.Input.TextInput.#ctor(MLEM.Font.GenericFont,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Input.TextInput.Rule,System.Action{System.String},System.Func{System.String})
  id: '#ctor(MLEM.Font.GenericFont,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Input.TextInput.Rule,System.Action{System.String},System.Func{System.String})'
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: TextInput(GenericFont, Vector2, float, Rule, Action<string>, Func<string>)
  nameWithType: TextInput.TextInput(GenericFont, Vector2, float, TextInput.Rule, Action<string>, Func<string>)
  fullName: MLEM.Input.TextInput.TextInput(MLEM.Font.GenericFont, Microsoft.Xna.Framework.Vector2, float, MLEM.Input.TextInput.Rule, System.Action<string>, System.Func<string>)
  type: Constructor
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM/Input/TextInput.cs
    startLine: 258
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Creates a new text input with the given settings.
  example: []
  syntax:
    content: public TextInput(GenericFont font, Vector2 size, float textScale, TextInput.Rule inputRule = null, Action<string> copyToClipboardFunction = null, Func<string> pasteFromClipboardFunction = null)
    parameters:
    - id: font
      type: MLEM.Font.GenericFont
      description: The <xref href="MLEM.Input.TextInput.Font" data-throw-if-not-resolved="false"></xref> to use.
    - id: size
      type: Microsoft.Xna.Framework.Vector2
      description: The <xref href="MLEM.Input.TextInput.Size" data-throw-if-not-resolved="false"></xref> to set.
    - id: textScale
      type: System.Single
      description: The <xref href="MLEM.Input.TextInput.TextScale" data-throw-if-not-resolved="false"></xref> to set.
    - id: inputRule
      type: MLEM.Input.TextInput.Rule
      description: The <xref href="MLEM.Input.TextInput.InputRule" data-throw-if-not-resolved="false"></xref> to set.
    - id: copyToClipboardFunction
      type: System.Action{System.String}
      description: The <xref href="MLEM.Input.TextInput.CopyToClipboardFunction" data-throw-if-not-resolved="false"></xref>to set.
    - id: pasteFromClipboardFunction
      type: System.Func{System.String}
      description: The <xref href="MLEM.Input.TextInput.PasteFromClipboardFunction" data-throw-if-not-resolved="false"></xref> to set.
    content.vb: Public Sub New(font As GenericFont, size As Vector2, textScale As Single, inputRule As TextInput.Rule = Nothing, copyToClipboardFunction As Action(Of String) = Nothing, pasteFromClipboardFunction As Func(Of String) = Nothing)
  overload: MLEM.Input.TextInput.#ctor*
  nameWithType.vb: TextInput.New(GenericFont, Vector2, Single, TextInput.Rule, Action(Of String), Func(Of String))
  fullName.vb: MLEM.Input.TextInput.New(MLEM.Font.GenericFont, Microsoft.Xna.Framework.Vector2, Single, MLEM.Input.TextInput.Rule, System.Action(Of String), System.Func(Of String))
  name.vb: New(GenericFont, Vector2, Single, Rule, Action(Of String), Func(Of String))
- uid: MLEM.Input.TextInput.OnTextInput(Microsoft.Xna.Framework.Input.Keys,System.Char)
  commentId: M:MLEM.Input.TextInput.OnTextInput(Microsoft.Xna.Framework.Input.Keys,System.Char)
  id: OnTextInput(Microsoft.Xna.Framework.Input.Keys,System.Char)
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: OnTextInput(Keys, char)
  nameWithType: TextInput.OnTextInput(Keys, char)
  fullName: MLEM.Input.TextInput.OnTextInput(Microsoft.Xna.Framework.Input.Keys, char)
  type: Method
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: OnTextInput
    path: ../MLEM/Input/TextInput.cs
    startLine: 274
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    A method that should be called when the given text should be entered into this text input.

    This method is designed to be used with <xref href="MLEM.Misc.MlemPlatform.AddTextInputListener(Microsoft.Xna.Framework.GameWindow%2cMLEM.Misc.MlemPlatform.TextInputCallback)" data-throw-if-not-resolved="false"></xref> or the TextInput event provided by MonoGame and FNA.
  example: []
  syntax:
    content: public bool OnTextInput(Keys key, char character)
    parameters:
    - id: key
      type: Microsoft.Xna.Framework.Input.Keys
      description: The key that was pressed.
    - id: character
      type: System.Char
      description: The character that the <code class="paramref">key</code> represents.
    return:
      type: System.Boolean
      description: Whether text was successfully input.
    content.vb: Public Function OnTextInput(key As Keys, character As Char) As Boolean
  overload: MLEM.Input.TextInput.OnTextInput*
  nameWithType.vb: TextInput.OnTextInput(Keys, Char)
  fullName.vb: MLEM.Input.TextInput.OnTextInput(Microsoft.Xna.Framework.Input.Keys, Char)
  name.vb: OnTextInput(Keys, Char)
- uid: MLEM.Input.TextInput.Update(Microsoft.Xna.Framework.GameTime,MLEM.Input.InputHandler)
  commentId: M:MLEM.Input.TextInput.Update(Microsoft.Xna.Framework.GameTime,MLEM.Input.InputHandler)
  id: Update(Microsoft.Xna.Framework.GameTime,MLEM.Input.InputHandler)
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: Update(GameTime, InputHandler)
  nameWithType: TextInput.Update(GameTime, InputHandler)
  fullName: MLEM.Input.TextInput.Update(Microsoft.Xna.Framework.GameTime, MLEM.Input.InputHandler)
  type: Method
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Update
    path: ../MLEM/Input/TextInput.cs
    startLine: 301
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Updates this text input, including querying input using the given <xref href="MLEM.Input.InputHandler" data-throw-if-not-resolved="false"></xref> and updating the caret's blink timer.
  example: []
  syntax:
    content: public void Update(GameTime time, InputHandler input)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time.
    - id: input
      type: MLEM.Input.InputHandler
      description: The input handler to use for input querying.
    content.vb: Public Sub Update(time As GameTime, input As InputHandler)
  overload: MLEM.Input.TextInput.Update*
- uid: MLEM.Input.TextInput.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Color)
  commentId: M:MLEM.Input.TextInput.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Color)
  id: Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Color)
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: Draw(SpriteBatch, Vector2, float, float, Color)
  nameWithType: TextInput.Draw(SpriteBatch, Vector2, float, float, Color)
  fullName: MLEM.Input.TextInput.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, float, float, Microsoft.Xna.Framework.Color)
  type: Method
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Draw
    path: ../MLEM/Input/TextInput.cs
    startLine: 353
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Draws this text input's displayed <xref href="MLEM.Input.TextInput.Text" data-throw-if-not-resolved="false"></xref> along with its caret, if <code class="paramref">caretWidth</code> is greater than 0.
  example: []
  syntax:
    content: public void Draw(SpriteBatch batch, Vector2 textPos, float drawScale, float caretWidth, Color textColor)
    parameters:
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to draw with.
    - id: textPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position to draw the text at.
    - id: drawScale
      type: System.Single
      description: The draw scale, which is multiplied with <xref href="MLEM.Input.TextInput.TextScale" data-throw-if-not-resolved="false"></xref> before drawing.
    - id: caretWidth
      type: System.Single
      description: The width that the caret should have, which is multiplied with <code class="paramref">drawScale</code> before drawing.
    - id: textColor
      type: Microsoft.Xna.Framework.Color
      description: The color to draw the text and caret with.
    content.vb: Public Sub Draw(batch As SpriteBatch, textPos As Vector2, drawScale As Single, caretWidth As Single, textColor As Color)
  overload: MLEM.Input.TextInput.Draw*
  nameWithType.vb: TextInput.Draw(SpriteBatch, Vector2, Single, Single, Color)
  fullName.vb: MLEM.Input.TextInput.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, Single, Single, Microsoft.Xna.Framework.Color)
  name.vb: Draw(SpriteBatch, Vector2, Single, Single, Color)
- uid: MLEM.Input.TextInput.SetText(System.Object,System.Boolean)
  commentId: M:MLEM.Input.TextInput.SetText(System.Object,System.Boolean)
  id: SetText(System.Object,System.Boolean)
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: SetText(object, bool)
  nameWithType: TextInput.SetText(object, bool)
  fullName: MLEM.Input.TextInput.SetText(object, bool)
  type: Method
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: SetText
    path: ../MLEM/Input/TextInput.cs
    startLine: 373
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Replaces this text input's text with the given text.

    If the resulting <xref href="MLEM.Input.TextInput.Text" data-throw-if-not-resolved="false"></xref> exceeds <xref href="MLEM.Input.TextInput.MaximumCharacters" data-throw-if-not-resolved="false"></xref>, the end will be cropped to fit.
  example: []
  syntax:
    content: public void SetText(object text, bool removeMismatching = false)
    parameters:
    - id: text
      type: System.Object
      description: The new text
    - id: removeMismatching
      type: System.Boolean
      description: If any characters that don't match the <xref href="MLEM.Input.TextInput.InputRule" data-throw-if-not-resolved="false"></xref> should be left out
    content.vb: Public Sub SetText(text As Object, removeMismatching As Boolean = False)
  overload: MLEM.Input.TextInput.SetText*
  nameWithType.vb: TextInput.SetText(Object, Boolean)
  fullName.vb: MLEM.Input.TextInput.SetText(Object, Boolean)
  name.vb: SetText(Object, Boolean)
- uid: MLEM.Input.TextInput.InsertText(System.Object,System.Boolean)
  commentId: M:MLEM.Input.TextInput.InsertText(System.Object,System.Boolean)
  id: InsertText(System.Object,System.Boolean)
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: InsertText(object, bool)
  nameWithType: TextInput.InsertText(object, bool)
  fullName: MLEM.Input.TextInput.InsertText(object, bool)
  type: Method
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: InsertText
    path: ../MLEM/Input/TextInput.cs
    startLine: 391
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Inserts the given text at the <xref href="MLEM.Input.TextInput.CaretPos" data-throw-if-not-resolved="false"></xref>.

    If the resulting <xref href="MLEM.Input.TextInput.Text" data-throw-if-not-resolved="false"></xref> exceeds <xref href="MLEM.Input.TextInput.MaximumCharacters" data-throw-if-not-resolved="false"></xref>, the end will be cropped to fit.
  example: []
  syntax:
    content: public bool InsertText(object text, bool removeMismatching = false)
    parameters:
    - id: text
      type: System.Object
      description: The text to insert
    - id: removeMismatching
      type: System.Boolean
      description: If any characters that don't match the <xref href="MLEM.Input.TextInput.InputRule" data-throw-if-not-resolved="false"></xref> should be left out
    return:
      type: System.Boolean
    content.vb: Public Function InsertText(text As Object, removeMismatching As Boolean = False) As Boolean
  overload: MLEM.Input.TextInput.InsertText*
  nameWithType.vb: TextInput.InsertText(Object, Boolean)
  fullName.vb: MLEM.Input.TextInput.InsertText(Object, Boolean)
  name.vb: InsertText(Object, Boolean)
- uid: MLEM.Input.TextInput.RemoveText(System.Int32,System.Int32)
  commentId: M:MLEM.Input.TextInput.RemoveText(System.Int32,System.Int32)
  id: RemoveText(System.Int32,System.Int32)
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: RemoveText(int, int)
  nameWithType: TextInput.RemoveText(int, int)
  fullName: MLEM.Input.TextInput.RemoveText(int, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: RemoveText
    path: ../MLEM/Input/TextInput.cs
    startLine: 408
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Removes the given amount of text at the given index
  example: []
  syntax:
    content: public bool RemoveText(int index, int length)
    parameters:
    - id: index
      type: System.Int32
      description: The index
    - id: length
      type: System.Int32
      description: The amount of text to remove
    return:
      type: System.Boolean
    content.vb: Public Function RemoveText(index As Integer, length As Integer) As Boolean
  overload: MLEM.Input.TextInput.RemoveText*
  nameWithType.vb: TextInput.RemoveText(Integer, Integer)
  fullName.vb: MLEM.Input.TextInput.RemoveText(Integer, Integer)
  name.vb: RemoveText(Integer, Integer)
- uid: MLEM.Input.TextInput.MoveCaretToLine(System.Int32)
  commentId: M:MLEM.Input.TextInput.MoveCaretToLine(System.Int32)
  id: MoveCaretToLine(System.Int32)
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: MoveCaretToLine(int)
  nameWithType: TextInput.MoveCaretToLine(int)
  fullName: MLEM.Input.TextInput.MoveCaretToLine(int)
  type: Method
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: MoveCaretToLine
    path: ../MLEM/Input/TextInput.cs
    startLine: 425
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Moves the <xref href="MLEM.Input.TextInput.CaretPos" data-throw-if-not-resolved="false"></xref> to the given line, if it exists.

    Additionally maintains the <xref href="MLEM.Input.TextInput.CaretPosInLine" data-throw-if-not-resolved="false"></xref> roughly based on the visual distance that the caret has from the left border of the current <xref href="MLEM.Input.TextInput.CaretLine" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool MoveCaretToLine(int line)
    parameters:
    - id: line
      type: System.Int32
      description: The line to move the caret to
    return:
      type: System.Boolean
      description: True if the caret was moved, false if it was not (which indicates that the line with the given <code class="paramref">line</code> index does not exist)
    content.vb: Public Function MoveCaretToLine(line As Integer) As Boolean
  overload: MLEM.Input.TextInput.MoveCaretToLine*
  nameWithType.vb: TextInput.MoveCaretToLine(Integer)
  fullName.vb: MLEM.Input.TextInput.MoveCaretToLine(Integer)
  name.vb: MoveCaretToLine(Integer)
- uid: MLEM.Input.TextInput.ShowLine(System.Int32)
  commentId: M:MLEM.Input.TextInput.ShowLine(System.Int32)
  id: ShowLine(System.Int32)
  parent: MLEM.Input.TextInput
  langs:
  - csharp
  - vb
  name: ShowLine(int)
  nameWithType: TextInput.ShowLine(int)
  fullName: MLEM.Input.TextInput.ShowLine(int)
  type: Method
  source:
    remote:
      path: MLEM/Input/TextInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ShowLine
    path: ../MLEM/Input/TextInput.cs
    startLine: 450
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Moves visual focus into such bounds that the given line will be the first visible line of this text input.
  example: []
  syntax:
    content: public bool ShowLine(int line)
    parameters:
    - id: line
      type: System.Int32
      description: The first line that should be visible.
    return:
      type: System.Boolean
      description: Whether the line can be the fist visible line, and wasn't already the first visible line.
    content.vb: Public Function ShowLine(line As Integer) As Boolean
  overload: MLEM.Input.TextInput.ShowLine*
  nameWithType.vb: TextInput.ShowLine(Integer)
  fullName.vb: MLEM.Input.TextInput.ShowLine(Integer)
  name.vb: ShowLine(Integer)
references:
- uid: MLEM.Input.TextInput.Multiline
  commentId: P:MLEM.Input.TextInput.Multiline
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Multiline
  name: Multiline
  nameWithType: TextInput.Multiline
  fullName: MLEM.Input.TextInput.Multiline
- uid: MLEM.Input.TextInput.InputRule
  commentId: F:MLEM.Input.TextInput.InputRule
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_InputRule
  name: InputRule
  nameWithType: TextInput.InputRule
  fullName: MLEM.Input.TextInput.InputRule
- uid: MLEM.Input.TextInput.OnTextInput(Microsoft.Xna.Framework.Input.Keys,System.Char)
  commentId: M:MLEM.Input.TextInput.OnTextInput(Microsoft.Xna.Framework.Input.Keys,System.Char)
  isExternal: true
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_OnTextInput_Microsoft_Xna_Framework_Input_Keys_System_Char_
  name: OnTextInput(Keys, char)
  nameWithType: TextInput.OnTextInput(Keys, char)
  fullName: MLEM.Input.TextInput.OnTextInput(Microsoft.Xna.Framework.Input.Keys, char)
  nameWithType.vb: TextInput.OnTextInput(Keys, Char)
  fullName.vb: MLEM.Input.TextInput.OnTextInput(Microsoft.Xna.Framework.Input.Keys, Char)
  name.vb: OnTextInput(Keys, Char)
  spec.csharp:
  - uid: MLEM.Input.TextInput.OnTextInput(Microsoft.Xna.Framework.Input.Keys,System.Char)
    name: OnTextInput
    href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_OnTextInput_Microsoft_Xna_Framework_Input_Keys_System_Char_
  - name: (
  - uid: Microsoft.Xna.Framework.Input.Keys
    name: Keys
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
  spec.vb:
  - uid: MLEM.Input.TextInput.OnTextInput(Microsoft.Xna.Framework.Input.Keys,System.Char)
    name: OnTextInput
    href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_OnTextInput_Microsoft_Xna_Framework_Input_Keys_System_Char_
  - name: (
  - uid: Microsoft.Xna.Framework.Input.Keys
    name: Keys
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: MLEM.Input.TextInput.Update(Microsoft.Xna.Framework.GameTime,MLEM.Input.InputHandler)
  commentId: M:MLEM.Input.TextInput.Update(Microsoft.Xna.Framework.GameTime,MLEM.Input.InputHandler)
  isExternal: true
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Update_Microsoft_Xna_Framework_GameTime_MLEM_Input_InputHandler_
  name: Update(GameTime, InputHandler)
  nameWithType: TextInput.Update(GameTime, InputHandler)
  fullName: MLEM.Input.TextInput.Update(Microsoft.Xna.Framework.GameTime, MLEM.Input.InputHandler)
  spec.csharp:
  - uid: MLEM.Input.TextInput.Update(Microsoft.Xna.Framework.GameTime,MLEM.Input.InputHandler)
    name: Update
    href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Update_Microsoft_Xna_Framework_GameTime_MLEM_Input_InputHandler_
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Input.InputHandler
    name: InputHandler
    href: MLEM.Input.InputHandler.html
  - name: )
  spec.vb:
  - uid: MLEM.Input.TextInput.Update(Microsoft.Xna.Framework.GameTime,MLEM.Input.InputHandler)
    name: Update
    href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Update_Microsoft_Xna_Framework_GameTime_MLEM_Input_InputHandler_
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Input.InputHandler
    name: InputHandler
    href: MLEM.Input.InputHandler.html
  - name: )
- uid: MLEM.Input.TextInput.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Color)
  commentId: M:MLEM.Input.TextInput.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Color)
  isExternal: true
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Draw_Microsoft_Xna_Framework_Graphics_SpriteBatch_Microsoft_Xna_Framework_Vector2_System_Single_System_Single_Microsoft_Xna_Framework_Color_
  name: Draw(SpriteBatch, Vector2, float, float, Color)
  nameWithType: TextInput.Draw(SpriteBatch, Vector2, float, float, Color)
  fullName: MLEM.Input.TextInput.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, float, float, Microsoft.Xna.Framework.Color)
  nameWithType.vb: TextInput.Draw(SpriteBatch, Vector2, Single, Single, Color)
  fullName.vb: MLEM.Input.TextInput.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, Single, Single, Microsoft.Xna.Framework.Color)
  name.vb: Draw(SpriteBatch, Vector2, Single, Single, Color)
  spec.csharp:
  - uid: MLEM.Input.TextInput.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Color)
    name: Draw
    href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Draw_Microsoft_Xna_Framework_Graphics_SpriteBatch_Microsoft_Xna_Framework_Vector2_System_Single_System_Single_Microsoft_Xna_Framework_Color_
  - name: (
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: )
  spec.vb:
  - uid: MLEM.Input.TextInput.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Color)
    name: Draw
    href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Draw_Microsoft_Xna_Framework_Graphics_SpriteBatch_Microsoft_Xna_Framework_Vector2_System_Single_System_Single_Microsoft_Xna_Framework_Color_
  - name: (
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: )
- uid: MLEM.Input
  commentId: N:MLEM.Input
  href: MLEM.html
  name: MLEM.Input
  nameWithType: MLEM.Input
  fullName: MLEM.Input
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Input
    name: Input
    href: MLEM.Input.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Input
    name: Input
    href: MLEM.Input.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Input.TextInput.Rule
  commentId: T:MLEM.Input.TextInput.Rule
  parent: MLEM.Input
  href: MLEM.Input.TextInput.html
  name: TextInput.Rule
  nameWithType: TextInput.Rule
  fullName: MLEM.Input.TextInput.Rule
  spec.csharp:
  - uid: MLEM.Input.TextInput
    name: TextInput
    href: MLEM.Input.TextInput.html
  - name: .
  - uid: MLEM.Input.TextInput.Rule
    name: Rule
    href: MLEM.Input.TextInput.Rule.html
  spec.vb:
  - uid: MLEM.Input.TextInput
    name: TextInput
    href: MLEM.Input.TextInput.html
  - name: .
  - uid: MLEM.Input.TextInput.Rule
    name: Rule
    href: MLEM.Input.TextInput.Rule.html
- uid: System.IO.Path.GetInvalidPathChars
  commentId: M:System.IO.Path.GetInvalidPathChars
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.path.getinvalidpathchars
  name: GetInvalidPathChars()
  nameWithType: Path.GetInvalidPathChars()
  fullName: System.IO.Path.GetInvalidPathChars()
  spec.csharp:
  - uid: System.IO.Path.GetInvalidPathChars
    name: GetInvalidPathChars
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.path.getinvalidpathchars
  - name: (
  - name: )
  spec.vb:
  - uid: System.IO.Path.GetInvalidPathChars
    name: GetInvalidPathChars
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.path.getinvalidpathchars
  - name: (
  - name: )
- uid: System.IO.Path.GetInvalidFileNameChars
  commentId: M:System.IO.Path.GetInvalidFileNameChars
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.path.getinvalidfilenamechars
  name: GetInvalidFileNameChars()
  nameWithType: Path.GetInvalidFileNameChars()
  fullName: System.IO.Path.GetInvalidFileNameChars()
  spec.csharp:
  - uid: System.IO.Path.GetInvalidFileNameChars
    name: GetInvalidFileNameChars
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.path.getinvalidfilenamechars
  - name: (
  - name: )
  spec.vb:
  - uid: System.IO.Path.GetInvalidFileNameChars
    name: GetInvalidFileNameChars
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.path.getinvalidfilenamechars
  - name: (
  - name: )
- uid: MLEM.Input.TextInput.Text*
  commentId: Overload:MLEM.Input.TextInput.Text
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Text
  name: Text
  nameWithType: TextInput.Text
  fullName: MLEM.Input.TextInput.Text
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: MLEM.Input.TextInput
  commentId: T:MLEM.Input.TextInput
  parent: MLEM.Input
  href: MLEM.Input.TextInput.html
  name: TextInput
  nameWithType: TextInput
  fullName: MLEM.Input.TextInput
- uid: MLEM.Input.TextInput.Length*
  commentId: Overload:MLEM.Input.TextInput.Length
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Length
  name: Length
  nameWithType: TextInput.Length
  fullName: MLEM.Input.TextInput.Length
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: MLEM.Input.TextInput.Text
  commentId: P:MLEM.Input.TextInput.Text
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Text
  name: Text
  nameWithType: TextInput.Text
  fullName: MLEM.Input.TextInput.Text
- uid: MLEM.Input.TextInput.TextChanged
  commentId: T:MLEM.Input.TextInput.TextChanged
  parent: MLEM.Input
  href: MLEM.Input.TextInput.html
  name: TextInput.TextChanged
  nameWithType: TextInput.TextChanged
  fullName: MLEM.Input.TextInput.TextChanged
  spec.csharp:
  - uid: MLEM.Input.TextInput
    name: TextInput
    href: MLEM.Input.TextInput.html
  - name: .
  - uid: MLEM.Input.TextInput.TextChanged
    name: TextChanged
    href: MLEM.Input.TextInput.TextChanged.html
  spec.vb:
  - uid: MLEM.Input.TextInput
    name: TextInput
    href: MLEM.Input.TextInput.html
  - name: .
  - uid: MLEM.Input.TextInput.TextChanged
    name: TextChanged
    href: MLEM.Input.TextInput.TextChanged.html
- uid: System.String.Length
  commentId: P:System.String.Length
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string.length
  name: Length
  nameWithType: string.Length
  fullName: string.Length
  nameWithType.vb: String.Length
  fullName.vb: String.Length
- uid: MLEM.Input.TextInput.CaretPos*
  commentId: Overload:MLEM.Input.TextInput.CaretPos
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_CaretPos
  name: CaretPos
  nameWithType: TextInput.CaretPos
  fullName: MLEM.Input.TextInput.CaretPos
- uid: MLEM.Input.TextInput.CaretLine*
  commentId: Overload:MLEM.Input.TextInput.CaretLine
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_CaretLine
  name: CaretLine
  nameWithType: TextInput.CaretLine
  fullName: MLEM.Input.TextInput.CaretLine
- uid: MLEM.Input.TextInput.CaretLine
  commentId: P:MLEM.Input.TextInput.CaretLine
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_CaretLine
  name: CaretLine
  nameWithType: TextInput.CaretLine
  fullName: MLEM.Input.TextInput.CaretLine
- uid: MLEM.Input.TextInput.CaretPos
  commentId: P:MLEM.Input.TextInput.CaretPos
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_CaretPos
  name: CaretPos
  nameWithType: TextInput.CaretPos
  fullName: MLEM.Input.TextInput.CaretPos
- uid: MLEM.Input.TextInput.CaretPosInLine*
  commentId: Overload:MLEM.Input.TextInput.CaretPosInLine
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_CaretPosInLine
  name: CaretPosInLine
  nameWithType: TextInput.CaretPosInLine
  fullName: MLEM.Input.TextInput.CaretPosInLine
- uid: MLEM.Input.TextInput.MaskingCharacter*
  commentId: Overload:MLEM.Input.TextInput.MaskingCharacter
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_MaskingCharacter
  name: MaskingCharacter
  nameWithType: TextInput.MaskingCharacter
  fullName: MLEM.Input.TextInput.MaskingCharacter
- uid: System.Nullable{System.Char}
  commentId: T:System.Nullable{System.Char}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.char
  name: char?
  nameWithType: char?
  fullName: char?
  nameWithType.vb: Char?
  fullName.vb: Char?
  name.vb: Char?
  spec.csharp:
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '?'
  spec.vb:
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
- uid: Microsoft.Xna.Framework.Input.Keys.Enter
  commentId: F:Microsoft.Xna.Framework.Input.Keys.Enter
  isExternal: true
  name: Enter
  nameWithType: Keys.Enter
  fullName: Microsoft.Xna.Framework.Input.Keys.Enter
- uid: MLEM.Input.TextInput.Multiline*
  commentId: Overload:MLEM.Input.TextInput.Multiline
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Multiline
  name: Multiline
  nameWithType: TextInput.Multiline
  fullName: MLEM.Input.TextInput.Multiline
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: MLEM.Input.TextInput.Font*
  commentId: Overload:MLEM.Input.TextInput.Font
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Font
  name: Font
  nameWithType: TextInput.Font
  fullName: MLEM.Input.TextInput.Font
- uid: MLEM.Font.GenericFont
  commentId: T:MLEM.Font.GenericFont
  parent: MLEM.Font
  href: MLEM.Font.GenericFont.html
  name: GenericFont
  nameWithType: GenericFont
  fullName: MLEM.Font.GenericFont
- uid: MLEM.Font
  commentId: N:MLEM.Font
  href: MLEM.html
  name: MLEM.Font
  nameWithType: MLEM.Font
  fullName: MLEM.Font
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Font
    name: Font
    href: MLEM.Font.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Font
    name: Font
    href: MLEM.Font.html
- uid: MLEM.Input.TextInput.TextScale*
  commentId: Overload:MLEM.Input.TextInput.TextScale
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_TextScale
  name: TextScale
  nameWithType: TextInput.TextScale
  fullName: MLEM.Input.TextInput.TextScale
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: MLEM.Input.TextInput.TextScale
  commentId: P:MLEM.Input.TextInput.TextScale
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_TextScale
  name: TextScale
  nameWithType: TextInput.TextScale
  fullName: MLEM.Input.TextInput.TextScale
- uid: MLEM.Input.TextInput.Size*
  commentId: Overload:MLEM.Input.TextInput.Size
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Size
  name: Size
  nameWithType: TextInput.Size
  fullName: MLEM.Input.TextInput.Size
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: MLEM.Input.TextInput.Size
  commentId: P:MLEM.Input.TextInput.Size
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Size
  name: Size
  nameWithType: TextInput.Size
  fullName: MLEM.Input.TextInput.Size
- uid: MLEM.Input.TextInput.Font
  commentId: P:MLEM.Input.TextInput.Font
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Font
  name: Font
  nameWithType: TextInput.Font
  fullName: MLEM.Input.TextInput.Font
- uid: MLEM.Input.TextInput.MaxDisplayedLines*
  commentId: Overload:MLEM.Input.TextInput.MaxDisplayedLines
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_MaxDisplayedLines
  name: MaxDisplayedLines
  nameWithType: TextInput.MaxDisplayedLines
  fullName: MLEM.Input.TextInput.MaxDisplayedLines
- uid: MLEM.Input.TextInput.ShowLine(System.Int32)
  commentId: M:MLEM.Input.TextInput.ShowLine(System.Int32)
  isExternal: true
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_ShowLine_System_Int32_
  name: ShowLine(int)
  nameWithType: TextInput.ShowLine(int)
  fullName: MLEM.Input.TextInput.ShowLine(int)
  nameWithType.vb: TextInput.ShowLine(Integer)
  fullName.vb: MLEM.Input.TextInput.ShowLine(Integer)
  name.vb: ShowLine(Integer)
  spec.csharp:
  - uid: MLEM.Input.TextInput.ShowLine(System.Int32)
    name: ShowLine
    href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_ShowLine_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.TextInput.ShowLine(System.Int32)
    name: ShowLine
    href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_ShowLine_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.TextInput.FirstVisibleLine*
  commentId: Overload:MLEM.Input.TextInput.FirstVisibleLine
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_FirstVisibleLine
  name: FirstVisibleLine
  nameWithType: TextInput.FirstVisibleLine
  fullName: MLEM.Input.TextInput.FirstVisibleLine
- uid: MLEM.Input.TextInput.Lines*
  commentId: Overload:MLEM.Input.TextInput.Lines
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Lines
  name: Lines
  nameWithType: TextInput.Lines
  fullName: MLEM.Input.TextInput.Lines
- uid: System.Action{System.String}
  commentId: T:System.Action{System.String}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<string>
  nameWithType: Action<string>
  fullName: System.Action<string>
  nameWithType.vb: Action(Of String)
  fullName.vb: System.Action(Of String)
  name.vb: Action(Of String)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Func{System.String}
  commentId: T:System.Func{System.String}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<string>
  nameWithType: Func<string>
  fullName: System.Func<string>
  nameWithType.vb: Func(Of String)
  fullName.vb: System.Func(Of String)
  name.vb: Func(Of String)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: MLEM.Input.TextInput.CopyToClipboardFunction
  commentId: F:MLEM.Input.TextInput.CopyToClipboardFunction
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_CopyToClipboardFunction
  name: CopyToClipboardFunction
  nameWithType: TextInput.CopyToClipboardFunction
  fullName: MLEM.Input.TextInput.CopyToClipboardFunction
- uid: MLEM.Input.TextInput.PasteFromClipboardFunction
  commentId: F:MLEM.Input.TextInput.PasteFromClipboardFunction
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_PasteFromClipboardFunction
  name: PasteFromClipboardFunction
  nameWithType: TextInput.PasteFromClipboardFunction
  fullName: MLEM.Input.TextInput.PasteFromClipboardFunction
- uid: MLEM.Input.TextInput.#ctor*
  commentId: Overload:MLEM.Input.TextInput.#ctor
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput__ctor_MLEM_Font_GenericFont_Microsoft_Xna_Framework_Vector2_System_Single_MLEM_Input_TextInput_Rule_System_Action_System_String__System_Func_System_String__
  name: TextInput
  nameWithType: TextInput.TextInput
  fullName: MLEM.Input.TextInput.TextInput
  nameWithType.vb: TextInput.New
  fullName.vb: MLEM.Input.TextInput.New
  name.vb: New
- uid: MLEM.Misc.MlemPlatform.AddTextInputListener(Microsoft.Xna.Framework.GameWindow,MLEM.Misc.MlemPlatform.TextInputCallback)
  commentId: M:MLEM.Misc.MlemPlatform.AddTextInputListener(Microsoft.Xna.Framework.GameWindow,MLEM.Misc.MlemPlatform.TextInputCallback)
  parent: MLEM.Misc.MlemPlatform
  isExternal: true
  href: MLEM.Misc.MlemPlatform.html#MLEM_Misc_MlemPlatform_AddTextInputListener_Microsoft_Xna_Framework_GameWindow_MLEM_Misc_MlemPlatform_TextInputCallback_
  name: AddTextInputListener(GameWindow, TextInputCallback)
  nameWithType: MlemPlatform.AddTextInputListener(GameWindow, MlemPlatform.TextInputCallback)
  fullName: MLEM.Misc.MlemPlatform.AddTextInputListener(Microsoft.Xna.Framework.GameWindow, MLEM.Misc.MlemPlatform.TextInputCallback)
  spec.csharp:
  - uid: MLEM.Misc.MlemPlatform.AddTextInputListener(Microsoft.Xna.Framework.GameWindow,MLEM.Misc.MlemPlatform.TextInputCallback)
    name: AddTextInputListener
    href: MLEM.Misc.MlemPlatform.html#MLEM_Misc_MlemPlatform_AddTextInputListener_Microsoft_Xna_Framework_GameWindow_MLEM_Misc_MlemPlatform_TextInputCallback_
  - name: (
  - uid: Microsoft.Xna.Framework.GameWindow
    name: GameWindow
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Misc.MlemPlatform.TextInputCallback
    name: TextInputCallback
    href: MLEM.Misc.MlemPlatform.TextInputCallback.html
  - name: )
  spec.vb:
  - uid: MLEM.Misc.MlemPlatform.AddTextInputListener(Microsoft.Xna.Framework.GameWindow,MLEM.Misc.MlemPlatform.TextInputCallback)
    name: AddTextInputListener
    href: MLEM.Misc.MlemPlatform.html#MLEM_Misc_MlemPlatform_AddTextInputListener_Microsoft_Xna_Framework_GameWindow_MLEM_Misc_MlemPlatform_TextInputCallback_
  - name: (
  - uid: Microsoft.Xna.Framework.GameWindow
    name: GameWindow
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Misc.MlemPlatform.TextInputCallback
    name: TextInputCallback
    href: MLEM.Misc.MlemPlatform.TextInputCallback.html
  - name: )
- uid: MLEM.Input.TextInput.OnTextInput*
  commentId: Overload:MLEM.Input.TextInput.OnTextInput
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_OnTextInput_Microsoft_Xna_Framework_Input_Keys_System_Char_
  name: OnTextInput
  nameWithType: TextInput.OnTextInput
  fullName: MLEM.Input.TextInput.OnTextInput
- uid: Microsoft.Xna.Framework.Input.Keys
  commentId: T:Microsoft.Xna.Framework.Input.Keys
  parent: Microsoft.Xna.Framework.Input
  isExternal: true
  name: Keys
  nameWithType: Keys
  fullName: Microsoft.Xna.Framework.Input.Keys
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.char
  name: char
  nameWithType: char
  fullName: char
  nameWithType.vb: Char
  fullName.vb: Char
  name.vb: Char
- uid: MLEM.Misc.MlemPlatform
  commentId: T:MLEM.Misc.MlemPlatform
  parent: MLEM.Misc
  href: MLEM.Misc.MlemPlatform.html
  name: MlemPlatform
  nameWithType: MlemPlatform
  fullName: MLEM.Misc.MlemPlatform
- uid: Microsoft.Xna.Framework.Input
  commentId: N:Microsoft.Xna.Framework.Input
  isExternal: true
  name: Microsoft.Xna.Framework.Input
  nameWithType: Microsoft.Xna.Framework.Input
  fullName: Microsoft.Xna.Framework.Input
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Input
    name: Input
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Input
    name: Input
    isExternal: true
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  href: MLEM.html
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Misc
    name: Misc
    href: MLEM.Misc.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Misc
    name: Misc
    href: MLEM.Misc.html
- uid: MLEM.Input.InputHandler
  commentId: T:MLEM.Input.InputHandler
  parent: MLEM.Input
  href: MLEM.Input.InputHandler.html
  name: InputHandler
  nameWithType: InputHandler
  fullName: MLEM.Input.InputHandler
- uid: MLEM.Input.TextInput.Update*
  commentId: Overload:MLEM.Input.TextInput.Update
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Update_Microsoft_Xna_Framework_GameTime_MLEM_Input_InputHandler_
  name: Update
  nameWithType: TextInput.Update
  fullName: MLEM.Input.TextInput.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: MLEM.Input.TextInput.Draw*
  commentId: Overload:MLEM.Input.TextInput.Draw
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_Draw_Microsoft_Xna_Framework_Graphics_SpriteBatch_Microsoft_Xna_Framework_Vector2_System_Single_System_Single_Microsoft_Xna_Framework_Color_
  name: Draw
  nameWithType: TextInput.Draw
  fullName: MLEM.Input.TextInput.Draw
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: Microsoft.Xna.Framework.Color
  commentId: T:Microsoft.Xna.Framework.Color
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: Microsoft.Xna.Framework.Color
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
- uid: MLEM.Input.TextInput.MaximumCharacters
  commentId: F:MLEM.Input.TextInput.MaximumCharacters
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_MaximumCharacters
  name: MaximumCharacters
  nameWithType: TextInput.MaximumCharacters
  fullName: MLEM.Input.TextInput.MaximumCharacters
- uid: MLEM.Input.TextInput.SetText*
  commentId: Overload:MLEM.Input.TextInput.SetText
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_SetText_System_Object_System_Boolean_
  name: SetText
  nameWithType: TextInput.SetText
  fullName: MLEM.Input.TextInput.SetText
- uid: MLEM.Input.TextInput.InsertText*
  commentId: Overload:MLEM.Input.TextInput.InsertText
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_InsertText_System_Object_System_Boolean_
  name: InsertText
  nameWithType: TextInput.InsertText
  fullName: MLEM.Input.TextInput.InsertText
- uid: MLEM.Input.TextInput.RemoveText*
  commentId: Overload:MLEM.Input.TextInput.RemoveText
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_RemoveText_System_Int32_System_Int32_
  name: RemoveText
  nameWithType: TextInput.RemoveText
  fullName: MLEM.Input.TextInput.RemoveText
- uid: MLEM.Input.TextInput.CaretPosInLine
  commentId: P:MLEM.Input.TextInput.CaretPosInLine
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_CaretPosInLine
  name: CaretPosInLine
  nameWithType: TextInput.CaretPosInLine
  fullName: MLEM.Input.TextInput.CaretPosInLine
- uid: MLEM.Input.TextInput.MoveCaretToLine*
  commentId: Overload:MLEM.Input.TextInput.MoveCaretToLine
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_MoveCaretToLine_System_Int32_
  name: MoveCaretToLine
  nameWithType: TextInput.MoveCaretToLine
  fullName: MLEM.Input.TextInput.MoveCaretToLine
- uid: MLEM.Input.TextInput.ShowLine*
  commentId: Overload:MLEM.Input.TextInput.ShowLine
  href: MLEM.Input.TextInput.html#MLEM_Input_TextInput_ShowLine_System_Int32_
  name: ShowLine
  nameWithType: TextInput.ShowLine
  fullName: MLEM.Input.TextInput.ShowLine
