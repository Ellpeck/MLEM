### YamlMime:ManagedReference
items:
- uid: MLEM.Input.Keybind
  commentId: T:MLEM.Input.Keybind
  id: Keybind
  parent: MLEM.Input
  children:
  - MLEM.Input.Keybind.#ctor
  - MLEM.Input.Keybind.#ctor(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  - MLEM.Input.Keybind.#ctor(MLEM.Input.GenericInput,MLEM.Input.ModifierKey)
  - MLEM.Input.Keybind.#ctor(MLEM.Input.Keybind.Combination[])
  - MLEM.Input.Keybind.Add(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  - MLEM.Input.Keybind.Add(MLEM.Input.GenericInput,MLEM.Input.ModifierKey)
  - MLEM.Input.Keybind.Add(MLEM.Input.Keybind.Combination)
  - MLEM.Input.Keybind.Clear
  - MLEM.Input.Keybind.Combinations
  - MLEM.Input.Keybind.CompareTo(MLEM.Input.Keybind)
  - MLEM.Input.Keybind.CompareTo(System.Object)
  - MLEM.Input.Keybind.CopyFrom(MLEM.Input.Keybind)
  - MLEM.Input.Keybind.GetCombinations
  - MLEM.Input.Keybind.Insert(System.Int32,MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  - MLEM.Input.Keybind.Insert(System.Int32,MLEM.Input.GenericInput,MLEM.Input.ModifierKey)
  - MLEM.Input.Keybind.Insert(System.Int32,MLEM.Input.Keybind.Combination)
  - MLEM.Input.Keybind.IsDown(MLEM.Input.InputHandler,System.Int32)
  - MLEM.Input.Keybind.IsModifierDown(MLEM.Input.InputHandler,System.Int32)
  - MLEM.Input.Keybind.IsPressed(MLEM.Input.InputHandler,System.Int32)
  - MLEM.Input.Keybind.IsPressedAvailable(MLEM.Input.InputHandler,System.Int32)
  - MLEM.Input.Keybind.Remove(System.Func{MLEM.Input.Keybind.Combination,System.Int32,System.Boolean})
  - MLEM.Input.Keybind.ToString
  - MLEM.Input.Keybind.ToString(System.String,System.String,System.Func{MLEM.Input.GenericInput,System.String})
  - MLEM.Input.Keybind.TryConsumePressed(MLEM.Input.InputHandler,System.Int32)
  - MLEM.Input.Keybind.TryGetCombination(System.Int32,MLEM.Input.Keybind.Combination@)
  - MLEM.Input.Keybind.WasDown(MLEM.Input.InputHandler,System.Int32)
  - MLEM.Input.Keybind.WasModifierDown(MLEM.Input.InputHandler,System.Int32)
  langs:
  - csharp
  - vb
  name: Keybind
  nameWithType: Keybind
  fullName: MLEM.Input.Keybind
  type: Class
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Keybind
    path: ../MLEM/Input/Keybind.cs
    startLine: 16
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    A keybind represents a generic way to trigger input.

    A keybind is made up of multiple key combinations, one of which has to be pressed for the keybind to be triggered.

    Note that this type is serializable using <xref href="System.Runtime.Serialization.DataContractAttribute" data-throw-if-not-resolved="false"></xref>.

    Note that this class implements <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> and <xref href="System.IComparable%601" data-throw-if-not-resolved="false"></xref>, which allows two combinations to be ordered based on how many <xref href="MLEM.Input.Keybind.Combination.Modifiers" data-throw-if-not-resolved="false"></xref> their combinations have.
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Keybind : IComparable<Keybind>, IComparable
    content.vb: >-
      <DataContract>

      Public Class Keybind Implements IComparable(Of Keybind), IComparable
  inheritance:
  - System.Object
  implements:
  - System.IComparable{MLEM.Input.Keybind}
  - System.IComparable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: MLEM.Input.Keybind.Combinations
  commentId: P:MLEM.Input.Keybind.Combinations
  id: Combinations
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: Combinations
  nameWithType: Keybind.Combinations
  fullName: MLEM.Input.Keybind.Combinations
  type: Property
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Combinations
    path: ../MLEM/Input/Keybind.cs
    startLine: 26
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    The combinations that make up this keybind.

    This collection can be modified using <xref href="MLEM.Input.Keybind.Add(MLEM.Input.GenericInput%2cMLEM.Input.GenericInput%5b%5d)" data-throw-if-not-resolved="false"></xref>, <xref href="MLEM.Input.Keybind.Remove(System.Func%7bMLEM.Input.Keybind.Combination%2cSystem.Int32%2cSystem.Boolean%7d)" data-throw-if-not-resolved="false"></xref>, <xref href="MLEM.Input.Keybind.Clear" data-throw-if-not-resolved="false"></xref>, <xref href="MLEM.Input.Keybind.CopyFrom(MLEM.Input.Keybind)" data-throw-if-not-resolved="false"></xref>, etc.
  example: []
  syntax:
    content: >-
      [DataMember]

      public Keybind.Combination[] Combinations { get; }
    parameters: []
    return:
      type: MLEM.Input.Keybind.Combination[]
    content.vb: >-
      <DataMember>

      Public Property Combinations As Keybind.Combination()
  overload: MLEM.Input.Keybind.Combinations*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: MLEM.Input.Keybind.#ctor(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  commentId: M:MLEM.Input.Keybind.#ctor(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  id: '#ctor(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])'
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: Keybind(GenericInput, params GenericInput[])
  nameWithType: Keybind.Keybind(GenericInput, params GenericInput[])
  fullName: MLEM.Input.Keybind.Keybind(MLEM.Input.GenericInput, params MLEM.Input.GenericInput[])
  type: Constructor
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM/Input/Keybind.cs
    startLine: 34
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Creates a new keybind and adds the given key and modifiers using <xref href="MLEM.Input.Keybind.Add(MLEM.Input.GenericInput%2cMLEM.Input.GenericInput%5b%5d)" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public Keybind(GenericInput key, params GenericInput[] modifiers)
    parameters:
    - id: key
      type: MLEM.Input.GenericInput
      description: The key to be pressed.
    - id: modifiers
      type: MLEM.Input.GenericInput[]
      description: The modifier keys that have to be held down.
    content.vb: Public Sub New(key As GenericInput, ParamArray modifiers As GenericInput())
  overload: MLEM.Input.Keybind.#ctor*
  nameWithType.vb: Keybind.New(GenericInput, ParamArray GenericInput())
  fullName.vb: MLEM.Input.Keybind.New(MLEM.Input.GenericInput, ParamArray MLEM.Input.GenericInput())
  name.vb: New(GenericInput, ParamArray GenericInput())
- uid: MLEM.Input.Keybind.#ctor(MLEM.Input.GenericInput,MLEM.Input.ModifierKey)
  commentId: M:MLEM.Input.Keybind.#ctor(MLEM.Input.GenericInput,MLEM.Input.ModifierKey)
  id: '#ctor(MLEM.Input.GenericInput,MLEM.Input.ModifierKey)'
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: Keybind(GenericInput, ModifierKey)
  nameWithType: Keybind.Keybind(GenericInput, ModifierKey)
  fullName: MLEM.Input.Keybind.Keybind(MLEM.Input.GenericInput, MLEM.Input.ModifierKey)
  type: Constructor
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM/Input/Keybind.cs
    startLine: 39
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Creates a new keybind and adds the given key and modifiers using <xref href="MLEM.Input.Keybind.Add(MLEM.Input.GenericInput%2cMLEM.Input.GenericInput%5b%5d)" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public Keybind(GenericInput key, ModifierKey modifier)
    parameters:
    - id: key
      type: MLEM.Input.GenericInput
      description: The key to be pressed.
    - id: modifier
      type: MLEM.Input.ModifierKey
    content.vb: Public Sub New(key As GenericInput, modifier As ModifierKey)
  overload: MLEM.Input.Keybind.#ctor*
  nameWithType.vb: Keybind.New(GenericInput, ModifierKey)
  fullName.vb: MLEM.Input.Keybind.New(MLEM.Input.GenericInput, MLEM.Input.ModifierKey)
  name.vb: New(GenericInput, ModifierKey)
- uid: MLEM.Input.Keybind.#ctor(MLEM.Input.Keybind.Combination[])
  commentId: M:MLEM.Input.Keybind.#ctor(MLEM.Input.Keybind.Combination[])
  id: '#ctor(MLEM.Input.Keybind.Combination[])'
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: Keybind(params Combination[])
  nameWithType: Keybind.Keybind(params Keybind.Combination[])
  fullName: MLEM.Input.Keybind.Keybind(params MLEM.Input.Keybind.Combination[])
  type: Constructor
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM/Input/Keybind.cs
    startLine: 47
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Creates a new keybind with the given <code class="paramref">combinations</code>.
  example: []
  syntax:
    content: public Keybind(params Keybind.Combination[] combinations)
    parameters:
    - id: combinations
      type: MLEM.Input.Keybind.Combination[]
      description: The combinations to initialize this keybind with.
    content.vb: Public Sub New(ParamArray combinations As Keybind.Combination())
  overload: MLEM.Input.Keybind.#ctor*
  nameWithType.vb: Keybind.New(ParamArray Keybind.Combination())
  fullName.vb: MLEM.Input.Keybind.New(ParamArray MLEM.Input.Keybind.Combination())
  name.vb: New(ParamArray Combination())
- uid: MLEM.Input.Keybind.#ctor
  commentId: M:MLEM.Input.Keybind.#ctor
  id: '#ctor'
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: Keybind()
  nameWithType: Keybind.Keybind()
  fullName: MLEM.Input.Keybind.Keybind()
  type: Constructor
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM/Input/Keybind.cs
    startLine: 54
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Creates a new keybind with no default combinations
  example: []
  syntax:
    content: public Keybind()
    content.vb: Public Sub New()
  overload: MLEM.Input.Keybind.#ctor*
  nameWithType.vb: Keybind.New()
  fullName.vb: MLEM.Input.Keybind.New()
  name.vb: New()
- uid: MLEM.Input.Keybind.Add(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  commentId: M:MLEM.Input.Keybind.Add(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  id: Add(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: Add(GenericInput, params GenericInput[])
  nameWithType: Keybind.Add(GenericInput, params GenericInput[])
  fullName: MLEM.Input.Keybind.Add(MLEM.Input.GenericInput, params MLEM.Input.GenericInput[])
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Add
    path: ../MLEM/Input/Keybind.cs
    startLine: 62
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Adds a new key combination to this keybind that can optionally be pressed for the keybind to trigger.
  example: []
  syntax:
    content: public Keybind Add(GenericInput key, params GenericInput[] modifiers)
    parameters:
    - id: key
      type: MLEM.Input.GenericInput
      description: The key to be pressed.
    - id: modifiers
      type: MLEM.Input.GenericInput[]
      description: The modifier keys that have to be held down.
    return:
      type: MLEM.Input.Keybind
      description: This keybind, for chaining
    content.vb: Public Function Add(key As GenericInput, ParamArray modifiers As GenericInput()) As Keybind
  overload: MLEM.Input.Keybind.Add*
  nameWithType.vb: Keybind.Add(GenericInput, ParamArray GenericInput())
  fullName.vb: MLEM.Input.Keybind.Add(MLEM.Input.GenericInput, ParamArray MLEM.Input.GenericInput())
  name.vb: Add(GenericInput, ParamArray GenericInput())
- uid: MLEM.Input.Keybind.Add(MLEM.Input.Keybind.Combination)
  commentId: M:MLEM.Input.Keybind.Add(MLEM.Input.Keybind.Combination)
  id: Add(MLEM.Input.Keybind.Combination)
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: Add(Combination)
  nameWithType: Keybind.Add(Keybind.Combination)
  fullName: MLEM.Input.Keybind.Add(MLEM.Input.Keybind.Combination)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Add
    path: ../MLEM/Input/Keybind.cs
    startLine: 71
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Adds the given <xref href="MLEM.Input.Keybind.Combination" data-throw-if-not-resolved="false"></xref> to this keybind that can optionally be pressed for the keybind to trigger.
  example: []
  syntax:
    content: public Keybind Add(Keybind.Combination combination)
    parameters:
    - id: combination
      type: MLEM.Input.Keybind.Combination
      description: The combination to add.
    return:
      type: MLEM.Input.Keybind
      description: This keybind, for chaining
    content.vb: Public Function Add(combination As Keybind.Combination) As Keybind
  overload: MLEM.Input.Keybind.Add*
- uid: MLEM.Input.Keybind.Add(MLEM.Input.GenericInput,MLEM.Input.ModifierKey)
  commentId: M:MLEM.Input.Keybind.Add(MLEM.Input.GenericInput,MLEM.Input.ModifierKey)
  id: Add(MLEM.Input.GenericInput,MLEM.Input.ModifierKey)
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: Add(GenericInput, ModifierKey)
  nameWithType: Keybind.Add(GenericInput, ModifierKey)
  fullName: MLEM.Input.Keybind.Add(MLEM.Input.GenericInput, MLEM.Input.ModifierKey)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Add
    path: ../MLEM/Input/Keybind.cs
    startLine: 77
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Adds a new key combination to this keybind that can optionally be pressed for the keybind to trigger.
  example: []
  syntax:
    content: public Keybind Add(GenericInput key, ModifierKey modifier)
    parameters:
    - id: key
      type: MLEM.Input.GenericInput
      description: The key to be pressed.
    - id: modifier
      type: MLEM.Input.ModifierKey
    return:
      type: MLEM.Input.Keybind
      description: This keybind, for chaining
    content.vb: Public Function Add(key As GenericInput, modifier As ModifierKey) As Keybind
  overload: MLEM.Input.Keybind.Add*
- uid: MLEM.Input.Keybind.Insert(System.Int32,MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  commentId: M:MLEM.Input.Keybind.Insert(System.Int32,MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  id: Insert(System.Int32,MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: Insert(int, GenericInput, params GenericInput[])
  nameWithType: Keybind.Insert(int, GenericInput, params GenericInput[])
  fullName: MLEM.Input.Keybind.Insert(int, MLEM.Input.GenericInput, params MLEM.Input.GenericInput[])
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Insert
    path: ../MLEM/Input/Keybind.cs
    startLine: 90
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Inserts a new key combination into the given <code class="paramref">index</code> of this keybind's combinations that can optionally be pressed for the keybind to trigger.
  example: []
  syntax:
    content: public Keybind Insert(int index, GenericInput key, params GenericInput[] modifiers)
    parameters:
    - id: index
      type: System.Int32
      description: The index to insert this combination into.
    - id: key
      type: MLEM.Input.GenericInput
      description: The key to be pressed.
    - id: modifiers
      type: MLEM.Input.GenericInput[]
      description: The modifier keys that have to be held down.
    return:
      type: MLEM.Input.Keybind
      description: This keybind, for chaining.
    content.vb: Public Function Insert(index As Integer, key As GenericInput, ParamArray modifiers As GenericInput()) As Keybind
  overload: MLEM.Input.Keybind.Insert*
  nameWithType.vb: Keybind.Insert(Integer, GenericInput, ParamArray GenericInput())
  fullName.vb: MLEM.Input.Keybind.Insert(Integer, MLEM.Input.GenericInput, ParamArray MLEM.Input.GenericInput())
  name.vb: Insert(Integer, GenericInput, ParamArray GenericInput())
- uid: MLEM.Input.Keybind.Insert(System.Int32,MLEM.Input.Keybind.Combination)
  commentId: M:MLEM.Input.Keybind.Insert(System.Int32,MLEM.Input.Keybind.Combination)
  id: Insert(System.Int32,MLEM.Input.Keybind.Combination)
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: Insert(int, Combination)
  nameWithType: Keybind.Insert(int, Keybind.Combination)
  fullName: MLEM.Input.Keybind.Insert(int, MLEM.Input.Keybind.Combination)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Insert
    path: ../MLEM/Input/Keybind.cs
    startLine: 100
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Inserts the given <xref href="MLEM.Input.Keybind.Combination" data-throw-if-not-resolved="false"></xref> into the given <code class="paramref">index</code> of this keybind's combinations that can optionally be pressed for the keybind to trigger.
  example: []
  syntax:
    content: public Keybind Insert(int index, Keybind.Combination combination)
    parameters:
    - id: index
      type: System.Int32
      description: The index to insert this combination into.
    - id: combination
      type: MLEM.Input.Keybind.Combination
      description: The combination to insert.
    return:
      type: MLEM.Input.Keybind
      description: This keybind, for chaining.
    content.vb: Public Function Insert(index As Integer, combination As Keybind.Combination) As Keybind
  overload: MLEM.Input.Keybind.Insert*
  nameWithType.vb: Keybind.Insert(Integer, Keybind.Combination)
  fullName.vb: MLEM.Input.Keybind.Insert(Integer, MLEM.Input.Keybind.Combination)
  name.vb: Insert(Integer, Combination)
- uid: MLEM.Input.Keybind.Insert(System.Int32,MLEM.Input.GenericInput,MLEM.Input.ModifierKey)
  commentId: M:MLEM.Input.Keybind.Insert(System.Int32,MLEM.Input.GenericInput,MLEM.Input.ModifierKey)
  id: Insert(System.Int32,MLEM.Input.GenericInput,MLEM.Input.ModifierKey)
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: Insert(int, GenericInput, ModifierKey)
  nameWithType: Keybind.Insert(int, GenericInput, ModifierKey)
  fullName: MLEM.Input.Keybind.Insert(int, MLEM.Input.GenericInput, MLEM.Input.ModifierKey)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Insert
    path: ../MLEM/Input/Keybind.cs
    startLine: 106
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Inserts a new key combination into the given <code class="paramref">index</code> of this keybind's combinations that can optionally be pressed for the keybind to trigger.
  example: []
  syntax:
    content: public Keybind Insert(int index, GenericInput key, ModifierKey modifier)
    parameters:
    - id: index
      type: System.Int32
      description: The index to insert this combination into.
    - id: key
      type: MLEM.Input.GenericInput
      description: The key to be pressed.
    - id: modifier
      type: MLEM.Input.ModifierKey
    return:
      type: MLEM.Input.Keybind
      description: This keybind, for chaining.
    content.vb: Public Function Insert(index As Integer, key As GenericInput, modifier As ModifierKey) As Keybind
  overload: MLEM.Input.Keybind.Insert*
  nameWithType.vb: Keybind.Insert(Integer, GenericInput, ModifierKey)
  fullName.vb: MLEM.Input.Keybind.Insert(Integer, MLEM.Input.GenericInput, MLEM.Input.ModifierKey)
  name.vb: Insert(Integer, GenericInput, ModifierKey)
- uid: MLEM.Input.Keybind.Clear
  commentId: M:MLEM.Input.Keybind.Clear
  id: Clear
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: Keybind.Clear()
  fullName: MLEM.Input.Keybind.Clear()
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Clear
    path: ../MLEM/Input/Keybind.cs
    startLine: 116
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Clears this keybind, removing all active combinations.
  example: []
  syntax:
    content: public Keybind Clear()
    return:
      type: MLEM.Input.Keybind
      description: This keybind, for chaining
    content.vb: Public Function Clear() As Keybind
  overload: MLEM.Input.Keybind.Clear*
- uid: MLEM.Input.Keybind.Remove(System.Func{MLEM.Input.Keybind.Combination,System.Int32,System.Boolean})
  commentId: M:MLEM.Input.Keybind.Remove(System.Func{MLEM.Input.Keybind.Combination,System.Int32,System.Boolean})
  id: Remove(System.Func{MLEM.Input.Keybind.Combination,System.Int32,System.Boolean})
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: Remove(Func<Combination, int, bool>)
  nameWithType: Keybind.Remove(Func<Keybind.Combination, int, bool>)
  fullName: MLEM.Input.Keybind.Remove(System.Func<MLEM.Input.Keybind.Combination, int, bool>)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Remove
    path: ../MLEM/Input/Keybind.cs
    startLine: 126
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Removes all combinations that match the given predicate
  example: []
  syntax:
    content: public Keybind Remove(Func<Keybind.Combination, int, bool> predicate)
    parameters:
    - id: predicate
      type: System.Func{MLEM.Input.Keybind.Combination,System.Int32,System.Boolean}
      description: The predicate to match against
    return:
      type: MLEM.Input.Keybind
      description: This keybind, for chaining
    content.vb: Public Function Remove(predicate As Func(Of Keybind.Combination, Integer, Boolean)) As Keybind
  overload: MLEM.Input.Keybind.Remove*
  nameWithType.vb: Keybind.Remove(Func(Of Keybind.Combination, Integer, Boolean))
  fullName.vb: MLEM.Input.Keybind.Remove(System.Func(Of MLEM.Input.Keybind.Combination, Integer, Boolean))
  name.vb: Remove(Func(Of Combination, Integer, Boolean))
- uid: MLEM.Input.Keybind.CopyFrom(MLEM.Input.Keybind)
  commentId: M:MLEM.Input.Keybind.CopyFrom(MLEM.Input.Keybind)
  id: CopyFrom(MLEM.Input.Keybind)
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: CopyFrom(Keybind)
  nameWithType: Keybind.CopyFrom(Keybind)
  fullName: MLEM.Input.Keybind.CopyFrom(MLEM.Input.Keybind)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CopyFrom
    path: ../MLEM/Input/Keybind.cs
    startLine: 137
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Copies all of the combinations from the given keybind into this keybind.

    Note that this doesn't <xref href="MLEM.Input.Keybind.Clear" data-throw-if-not-resolved="false"></xref> this keybind, so combinations will be merged rather than replaced.
  example: []
  syntax:
    content: public Keybind CopyFrom(Keybind other)
    parameters:
    - id: other
      type: MLEM.Input.Keybind
      description: The keybind to copy from
    return:
      type: MLEM.Input.Keybind
      description: This keybind, for chaining
    content.vb: Public Function CopyFrom(other As Keybind) As Keybind
  overload: MLEM.Input.Keybind.CopyFrom*
- uid: MLEM.Input.Keybind.IsDown(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.IsDown(MLEM.Input.InputHandler,System.Int32)
  id: IsDown(MLEM.Input.InputHandler,System.Int32)
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: IsDown(InputHandler, int)
  nameWithType: Keybind.IsDown(InputHandler, int)
  fullName: MLEM.Input.Keybind.IsDown(MLEM.Input.InputHandler, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsDown
    path: ../MLEM/Input/Keybind.cs
    startLine: 149
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns whether this keybind is considered to be down.

    See <xref href="MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> for more information.
  example: []
  syntax:
    content: public bool IsDown(InputHandler handler, int gamepadIndex = -1)
    parameters:
    - id: handler
      type: MLEM.Input.InputHandler
      description: The input handler to query the keys with
    - id: gamepadIndex
      type: System.Int32
      description: The index of the gamepad to query, or -1 to query all gamepads
    return:
      type: System.Boolean
      description: Whether this keybind is considered to be down
    content.vb: Public Function IsDown(handler As InputHandler, gamepadIndex As Integer = -1) As Boolean
  overload: MLEM.Input.Keybind.IsDown*
  nameWithType.vb: Keybind.IsDown(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.IsDown(MLEM.Input.InputHandler, Integer)
  name.vb: IsDown(InputHandler, Integer)
- uid: MLEM.Input.Keybind.WasDown(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.WasDown(MLEM.Input.InputHandler,System.Int32)
  id: WasDown(MLEM.Input.InputHandler,System.Int32)
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: WasDown(InputHandler, int)
  nameWithType: Keybind.WasDown(InputHandler, int)
  fullName: MLEM.Input.Keybind.WasDown(MLEM.Input.InputHandler, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: WasDown
    path: ../MLEM/Input/Keybind.cs
    startLine: 164
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns whether this keybind was considered to be down in the last update call.

    See <xref href="MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> for more information.
  example: []
  syntax:
    content: public bool WasDown(InputHandler handler, int gamepadIndex = -1)
    parameters:
    - id: handler
      type: MLEM.Input.InputHandler
      description: The input handler to query the keys with
    - id: gamepadIndex
      type: System.Int32
      description: The index of the gamepad to query, or -1 to query all gamepads
    return:
      type: System.Boolean
      description: Whether this keybind was considered to be down
    content.vb: Public Function WasDown(handler As InputHandler, gamepadIndex As Integer = -1) As Boolean
  overload: MLEM.Input.Keybind.WasDown*
  nameWithType.vb: Keybind.WasDown(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.WasDown(MLEM.Input.InputHandler, Integer)
  name.vb: WasDown(InputHandler, Integer)
- uid: MLEM.Input.Keybind.IsPressed(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.IsPressed(MLEM.Input.InputHandler,System.Int32)
  id: IsPressed(MLEM.Input.InputHandler,System.Int32)
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: IsPressed(InputHandler, int)
  nameWithType: Keybind.IsPressed(InputHandler, int)
  fullName: MLEM.Input.Keybind.IsPressed(MLEM.Input.InputHandler, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsPressed
    path: ../MLEM/Input/Keybind.cs
    startLine: 179
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns whether this keybind is considered to be pressed.

    See <xref href="MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> for more information.
  example: []
  syntax:
    content: public bool IsPressed(InputHandler handler, int gamepadIndex = -1)
    parameters:
    - id: handler
      type: MLEM.Input.InputHandler
      description: The input handler to query the keys with
    - id: gamepadIndex
      type: System.Int32
      description: The index of the gamepad to query, or -1 to query all gamepads
    return:
      type: System.Boolean
      description: Whether this keybind is considered to be pressed
    content.vb: Public Function IsPressed(handler As InputHandler, gamepadIndex As Integer = -1) As Boolean
  overload: MLEM.Input.Keybind.IsPressed*
  nameWithType.vb: Keybind.IsPressed(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.IsPressed(MLEM.Input.InputHandler, Integer)
  name.vb: IsPressed(InputHandler, Integer)
- uid: MLEM.Input.Keybind.IsPressedAvailable(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.IsPressedAvailable(MLEM.Input.InputHandler,System.Int32)
  id: IsPressedAvailable(MLEM.Input.InputHandler,System.Int32)
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: IsPressedAvailable(InputHandler, int)
  nameWithType: Keybind.IsPressedAvailable(InputHandler, int)
  fullName: MLEM.Input.Keybind.IsPressedAvailable(MLEM.Input.InputHandler, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsPressedAvailable
    path: ../MLEM/Input/Keybind.cs
    startLine: 194
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns whether this keybind is considered to be pressed and has not been consumed yet using<xref href="MLEM.Input.Keybind.TryConsumePressed(MLEM.Input.InputHandler%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.

    See <xref href="MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> for more information.
  example: []
  syntax:
    content: public bool IsPressedAvailable(InputHandler handler, int gamepadIndex = -1)
    parameters:
    - id: handler
      type: MLEM.Input.InputHandler
      description: The input handler to query the keys with
    - id: gamepadIndex
      type: System.Int32
      description: The index of the gamepad to query, or -1 to query all gamepads
    return:
      type: System.Boolean
      description: Whether this keybind is considered to be pressed
    content.vb: Public Function IsPressedAvailable(handler As InputHandler, gamepadIndex As Integer = -1) As Boolean
  overload: MLEM.Input.Keybind.IsPressedAvailable*
  nameWithType.vb: Keybind.IsPressedAvailable(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.IsPressedAvailable(MLEM.Input.InputHandler, Integer)
  name.vb: IsPressedAvailable(InputHandler, Integer)
- uid: MLEM.Input.Keybind.TryConsumePressed(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.TryConsumePressed(MLEM.Input.InputHandler,System.Int32)
  id: TryConsumePressed(MLEM.Input.InputHandler,System.Int32)
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: TryConsumePressed(InputHandler, int)
  nameWithType: Keybind.TryConsumePressed(InputHandler, int)
  fullName: MLEM.Input.Keybind.TryConsumePressed(MLEM.Input.InputHandler, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TryConsumePressed
    path: ../MLEM/Input/Keybind.cs
    startLine: 209
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns whether this keybind is considered to be pressed.

    See <xref href="MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> for more information.
  example: []
  syntax:
    content: public bool TryConsumePressed(InputHandler handler, int gamepadIndex = -1)
    parameters:
    - id: handler
      type: MLEM.Input.InputHandler
      description: The input handler to query the keys with
    - id: gamepadIndex
      type: System.Int32
      description: The index of the gamepad to query, or -1 to query all gamepads
    return:
      type: System.Boolean
      description: Whether this keybind is considered to be pressed
    content.vb: Public Function TryConsumePressed(handler As InputHandler, gamepadIndex As Integer = -1) As Boolean
  overload: MLEM.Input.Keybind.TryConsumePressed*
  nameWithType.vb: Keybind.TryConsumePressed(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.TryConsumePressed(MLEM.Input.InputHandler, Integer)
  name.vb: TryConsumePressed(InputHandler, Integer)
- uid: MLEM.Input.Keybind.IsModifierDown(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.IsModifierDown(MLEM.Input.InputHandler,System.Int32)
  id: IsModifierDown(MLEM.Input.InputHandler,System.Int32)
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: IsModifierDown(InputHandler, int)
  nameWithType: Keybind.IsModifierDown(InputHandler, int)
  fullName: MLEM.Input.Keybind.IsModifierDown(MLEM.Input.InputHandler, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsModifierDown
    path: ../MLEM/Input/Keybind.cs
    startLine: 224
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns whether any of this keybind's modifier keys are currently down.

    See <xref href="MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> for more information.
  example: []
  syntax:
    content: public bool IsModifierDown(InputHandler handler, int gamepadIndex = -1)
    parameters:
    - id: handler
      type: MLEM.Input.InputHandler
      description: The input handler to query the keys with
    - id: gamepadIndex
      type: System.Int32
      description: The index of the gamepad to query, or -1 to query all gamepads
    return:
      type: System.Boolean
      description: Whether any of this keyboard's modifier keys are down
    content.vb: Public Function IsModifierDown(handler As InputHandler, gamepadIndex As Integer = -1) As Boolean
  overload: MLEM.Input.Keybind.IsModifierDown*
  nameWithType.vb: Keybind.IsModifierDown(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.IsModifierDown(MLEM.Input.InputHandler, Integer)
  name.vb: IsModifierDown(InputHandler, Integer)
- uid: MLEM.Input.Keybind.WasModifierDown(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.WasModifierDown(MLEM.Input.InputHandler,System.Int32)
  id: WasModifierDown(MLEM.Input.InputHandler,System.Int32)
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: WasModifierDown(InputHandler, int)
  nameWithType: Keybind.WasModifierDown(InputHandler, int)
  fullName: MLEM.Input.Keybind.WasModifierDown(MLEM.Input.InputHandler, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: WasModifierDown
    path: ../MLEM/Input/Keybind.cs
    startLine: 239
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns whether any of this keybind's modifier keys were down in the last update call.

    See <xref href="MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> for more information.
  example: []
  syntax:
    content: public bool WasModifierDown(InputHandler handler, int gamepadIndex = -1)
    parameters:
    - id: handler
      type: MLEM.Input.InputHandler
      description: The input handler to query the keys with
    - id: gamepadIndex
      type: System.Int32
      description: The index of the gamepad to query, or -1 to query all gamepads
    return:
      type: System.Boolean
      description: Whether any of this keyboard's modifier keys were down
    content.vb: Public Function WasModifierDown(handler As InputHandler, gamepadIndex As Integer = -1) As Boolean
  overload: MLEM.Input.Keybind.WasModifierDown*
  nameWithType.vb: Keybind.WasModifierDown(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.WasModifierDown(MLEM.Input.InputHandler, Integer)
  name.vb: WasModifierDown(InputHandler, Integer)
- uid: MLEM.Input.Keybind.GetCombinations
  commentId: M:MLEM.Input.Keybind.GetCombinations
  id: GetCombinations
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: GetCombinations()
  nameWithType: Keybind.GetCombinations()
  fullName: MLEM.Input.Keybind.GetCombinations()
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetCombinations
    path: ../MLEM/Input/Keybind.cs
    startLine: 251
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns an enumerable of all of the combinations that this keybind currently contains
  example: []
  syntax:
    content: public IEnumerable<Keybind.Combination> GetCombinations()
    return:
      type: System.Collections.Generic.IEnumerable{MLEM.Input.Keybind.Combination}
      description: This keybind's combinations
    content.vb: Public Function GetCombinations() As IEnumerable(Of Keybind.Combination)
  overload: MLEM.Input.Keybind.GetCombinations*
- uid: MLEM.Input.Keybind.TryGetCombination(System.Int32,MLEM.Input.Keybind.Combination@)
  commentId: M:MLEM.Input.Keybind.TryGetCombination(System.Int32,MLEM.Input.Keybind.Combination@)
  id: TryGetCombination(System.Int32,MLEM.Input.Keybind.Combination@)
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: TryGetCombination(int, out Combination)
  nameWithType: Keybind.TryGetCombination(int, out Keybind.Combination)
  fullName: MLEM.Input.Keybind.TryGetCombination(int, out MLEM.Input.Keybind.Combination)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TryGetCombination
    path: ../MLEM/Input/Keybind.cs
    startLine: 262
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Tries to retrieve the combination at the given <code class="paramref">index</code> within this keybind.
  example: []
  syntax:
    content: public bool TryGetCombination(int index, out Keybind.Combination combination)
    parameters:
    - id: index
      type: System.Int32
      description: The index of the combination to retrieve.
    - id: combination
      type: MLEM.Input.Keybind.Combination
      description: The combination, or default if this method returns false.
    return:
      type: System.Boolean
      description: Whether the combination could be successfully retrieved or the index was out of bounds of this keybind's combination collection.
    content.vb: Public Function TryGetCombination(index As Integer, combination As Keybind.Combination) As Boolean
  overload: MLEM.Input.Keybind.TryGetCombination*
  nameWithType.vb: Keybind.TryGetCombination(Integer, Keybind.Combination)
  fullName.vb: MLEM.Input.Keybind.TryGetCombination(Integer, MLEM.Input.Keybind.Combination)
  name.vb: TryGetCombination(Integer, Combination)
- uid: MLEM.Input.Keybind.ToString(System.String,System.String,System.Func{MLEM.Input.GenericInput,System.String})
  commentId: M:MLEM.Input.Keybind.ToString(System.String,System.String,System.Func{MLEM.Input.GenericInput,System.String})
  id: ToString(System.String,System.String,System.Func{MLEM.Input.GenericInput,System.String})
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: ToString(string, string, Func<GenericInput, string>)
  nameWithType: Keybind.ToString(string, string, Func<GenericInput, string>)
  fullName: MLEM.Input.Keybind.ToString(string, string, System.Func<MLEM.Input.GenericInput, string>)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ToString
    path: ../MLEM/Input/Keybind.cs
    startLine: 280
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Converts this keybind into an easily human-readable string.

    When using <xref href="MLEM.Input.Keybind.ToString" data-throw-if-not-resolved="false"></xref>, this method is used with <code class="paramref">joiner</code> set to ", ".
  example: []
  syntax:
    content: public string ToString(string joiner, string combinationJoiner = " + ", Func<GenericInput, string> inputName = null)
    parameters:
    - id: joiner
      type: System.String
      description: The string to use to join combinations
    - id: combinationJoiner
      type: System.String
      description: The string to use for combination-internal joining, see <xref href="MLEM.Input.Keybind.Combination.ToString(System.String%2cSystem.Func%7bMLEM.Input.GenericInput%2cSystem.String%7d)" data-throw-if-not-resolved="false"></xref>
    - id: inputName
      type: System.Func{MLEM.Input.GenericInput,System.String}
      description: The function to use for determining the display name of generic inputs, see <xref href="MLEM.Input.Keybind.Combination.ToString(System.String%2cSystem.Func%7bMLEM.Input.GenericInput%2cSystem.String%7d)" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.String
      description: A human-readable string representing this keybind
    content.vb: Public Function ToString(joiner As String, combinationJoiner As String = " + ", inputName As Func(Of GenericInput, String) = Nothing) As String
  overload: MLEM.Input.Keybind.ToString*
  nameWithType.vb: Keybind.ToString(String, String, Func(Of GenericInput, String))
  fullName.vb: MLEM.Input.Keybind.ToString(String, String, System.Func(Of MLEM.Input.GenericInput, String))
  name.vb: ToString(String, String, Func(Of GenericInput, String))
- uid: MLEM.Input.Keybind.CompareTo(MLEM.Input.Keybind)
  commentId: M:MLEM.Input.Keybind.CompareTo(MLEM.Input.Keybind)
  id: CompareTo(MLEM.Input.Keybind)
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: CompareTo(Keybind)
  nameWithType: Keybind.CompareTo(Keybind)
  fullName: MLEM.Input.Keybind.CompareTo(MLEM.Input.Keybind)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CompareTo
    path: ../MLEM/Input/Keybind.cs
    startLine: 289
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
  example: []
  syntax:
    content: public int CompareTo(Keybind other)
    parameters:
    - id: other
      type: MLEM.Input.Keybind
      description: An object to compare with this instance.
    return:
      type: System.Int32
      description: >-
        A value that indicates the relative order of the objects being compared. The return value has these meanings:

             <table><thead><tr><th class="term"> Value</th><th class="description"> Meaning</th></tr></thead><tbody><tr><td class="term"> Less than zero</td><td class="description"> This instance precedes <code class="paramref">other</code> in the sort order.</td></tr><tr><td class="term"> Zero</td><td class="description"> This instance occurs in the same position in the sort order as <code class="paramref">other</code>.</td></tr><tr><td class="term"> Greater than zero</td><td class="description"> This instance follows <code class="paramref">other</code> in the sort order.</td></tr></tbody></table>
    content.vb: Public Function CompareTo(other As Keybind) As Integer
  overload: MLEM.Input.Keybind.CompareTo*
  implements:
  - System.IComparable{MLEM.Input.Keybind}.CompareTo(MLEM.Input.Keybind)
- uid: MLEM.Input.Keybind.CompareTo(System.Object)
  commentId: M:MLEM.Input.Keybind.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: CompareTo(object)
  nameWithType: Keybind.CompareTo(object)
  fullName: MLEM.Input.Keybind.CompareTo(object)
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: CompareTo
    path: ../MLEM/Input/Keybind.cs
    startLine: 300
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
  example: []
  syntax:
    content: public int CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance.
    return:
      type: System.Int32
      description: >-
        A value that indicates the relative order of the objects being compared. The return value has these meanings:

             <table><thead><tr><th class="term"> Value</th><th class="description"> Meaning</th></tr></thead><tbody><tr><td class="term"> Less than zero</td><td class="description"> This instance precedes <code class="paramref">obj</code> in the sort order.</td></tr><tr><td class="term"> Zero</td><td class="description"> This instance occurs in the same position in the sort order as <code class="paramref">obj</code>.</td></tr><tr><td class="term"> Greater than zero</td><td class="description"> This instance follows <code class="paramref">obj</code> in the sort order.</td></tr></tbody></table>
    content.vb: Public Function CompareTo(obj As Object) As Integer
  overload: MLEM.Input.Keybind.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code class="paramref">obj</code> is not the same type as this instance.
  implements:
  - System.IComparable.CompareTo(System.Object)
  nameWithType.vb: Keybind.CompareTo(Object)
  fullName.vb: MLEM.Input.Keybind.CompareTo(Object)
  name.vb: CompareTo(Object)
- uid: MLEM.Input.Keybind.ToString
  commentId: M:MLEM.Input.Keybind.ToString
  id: ToString
  parent: MLEM.Input.Keybind
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Keybind.ToString()
  fullName: MLEM.Input.Keybind.ToString()
  type: Method
  source:
    remote:
      path: MLEM/Input/Keybind.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ToString
    path: ../MLEM/Input/Keybind.cs
    startLine: 314
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Converts this keybind into a string, separating every included <xref href="MLEM.Input.Keybind.Combination" data-throw-if-not-resolved="false"></xref> by a comma
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: This keybind as a string
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: MLEM.Input.Keybind.ToString*
references:
- uid: System.Runtime.Serialization.DataContractAttribute
  commentId: T:System.Runtime.Serialization.DataContractAttribute
  parent: System.Runtime.Serialization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.runtime.serialization.datacontractattribute
  name: DataContractAttribute
  nameWithType: DataContractAttribute
  fullName: System.Runtime.Serialization.DataContractAttribute
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Input.Keybind.Combination.Modifiers
  commentId: F:MLEM.Input.Keybind.Combination.Modifiers
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_Modifiers
  name: Modifiers
  nameWithType: Keybind.Combination.Modifiers
  fullName: MLEM.Input.Keybind.Combination.Modifiers
- uid: MLEM.Input
  commentId: N:MLEM.Input
  href: MLEM.html
  name: MLEM.Input
  nameWithType: MLEM.Input
  fullName: MLEM.Input
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Input
    name: Input
    href: MLEM.Input.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Input
    name: Input
    href: MLEM.Input.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IComparable{MLEM.Input.Keybind}
  commentId: T:System.IComparable{MLEM.Input.Keybind}
  parent: System
  definition: System.IComparable`1
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<Keybind>
  nameWithType: IComparable<Keybind>
  fullName: System.IComparable<MLEM.Input.Keybind>
  nameWithType.vb: IComparable(Of Keybind)
  fullName.vb: System.IComparable(Of MLEM.Input.Keybind)
  name.vb: IComparable(Of Keybind)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - uid: MLEM.Input.Keybind
    name: Keybind
    href: MLEM.Input.Keybind.html
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Input.Keybind
    name: Keybind
    href: MLEM.Input.Keybind.html
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Runtime
    name: Runtime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime
  - name: .
  - uid: System.Runtime.Serialization
    name: Serialization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime.serialization
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Runtime
    name: Runtime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime
  - name: .
  - uid: System.Runtime.Serialization
    name: Serialization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime.serialization
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Input.Keybind.Add(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  commentId: M:MLEM.Input.Keybind.Add(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Add_MLEM_Input_GenericInput_MLEM_Input_GenericInput___
  name: Add(GenericInput, params GenericInput[])
  nameWithType: Keybind.Add(GenericInput, params GenericInput[])
  fullName: MLEM.Input.Keybind.Add(MLEM.Input.GenericInput, params MLEM.Input.GenericInput[])
  nameWithType.vb: Keybind.Add(GenericInput, ParamArray GenericInput())
  fullName.vb: MLEM.Input.Keybind.Add(MLEM.Input.GenericInput, ParamArray MLEM.Input.GenericInput())
  name.vb: Add(GenericInput, ParamArray GenericInput())
  spec.csharp:
  - uid: MLEM.Input.Keybind.Add(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
    name: Add
    href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Add_MLEM_Input_GenericInput_MLEM_Input_GenericInput___
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: MLEM.Input.Keybind.Add(MLEM.Input.GenericInput,MLEM.Input.GenericInput[])
    name: Add
    href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Add_MLEM_Input_GenericInput_MLEM_Input_GenericInput___
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: (
  - name: )
  - name: )
- uid: MLEM.Input.Keybind.Remove(System.Func{MLEM.Input.Keybind.Combination,System.Int32,System.Boolean})
  commentId: M:MLEM.Input.Keybind.Remove(System.Func{MLEM.Input.Keybind.Combination,System.Int32,System.Boolean})
  isExternal: true
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Remove_System_Func_MLEM_Input_Keybind_Combination_System_Int32_System_Boolean__
  name: Remove(Func<Combination, int, bool>)
  nameWithType: Keybind.Remove(Func<Keybind.Combination, int, bool>)
  fullName: MLEM.Input.Keybind.Remove(System.Func<MLEM.Input.Keybind.Combination, int, bool>)
  nameWithType.vb: Keybind.Remove(Func(Of Keybind.Combination, Integer, Boolean))
  fullName.vb: MLEM.Input.Keybind.Remove(System.Func(Of MLEM.Input.Keybind.Combination, Integer, Boolean))
  name.vb: Remove(Func(Of Combination, Integer, Boolean))
  spec.csharp:
  - uid: MLEM.Input.Keybind.Remove(System.Func{MLEM.Input.Keybind.Combination,System.Int32,System.Boolean})
    name: Remove
    href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Remove_System_Func_MLEM_Input_Keybind_Combination_System_Int32_System_Boolean__
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: MLEM.Input.Keybind.Combination
    name: Combination
    href: MLEM.Input.Keybind.Combination.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: )
  spec.vb:
  - uid: MLEM.Input.Keybind.Remove(System.Func{MLEM.Input.Keybind.Combination,System.Int32,System.Boolean})
    name: Remove
    href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Remove_System_Func_MLEM_Input_Keybind_Combination_System_Int32_System_Boolean__
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Input.Keybind.Combination
    name: Combination
    href: MLEM.Input.Keybind.Combination.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: MLEM.Input.Keybind.Clear
  commentId: M:MLEM.Input.Keybind.Clear
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Clear
  name: Clear()
  nameWithType: Keybind.Clear()
  fullName: MLEM.Input.Keybind.Clear()
  spec.csharp:
  - uid: MLEM.Input.Keybind.Clear
    name: Clear
    href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Clear
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Input.Keybind.Clear
    name: Clear
    href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Clear
  - name: (
  - name: )
- uid: MLEM.Input.Keybind.CopyFrom(MLEM.Input.Keybind)
  commentId: M:MLEM.Input.Keybind.CopyFrom(MLEM.Input.Keybind)
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_CopyFrom_MLEM_Input_Keybind_
  name: CopyFrom(Keybind)
  nameWithType: Keybind.CopyFrom(Keybind)
  fullName: MLEM.Input.Keybind.CopyFrom(MLEM.Input.Keybind)
  spec.csharp:
  - uid: MLEM.Input.Keybind.CopyFrom(MLEM.Input.Keybind)
    name: CopyFrom
    href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_CopyFrom_MLEM_Input_Keybind_
  - name: (
  - uid: MLEM.Input.Keybind
    name: Keybind
    href: MLEM.Input.Keybind.html
  - name: )
  spec.vb:
  - uid: MLEM.Input.Keybind.CopyFrom(MLEM.Input.Keybind)
    name: CopyFrom
    href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_CopyFrom_MLEM_Input_Keybind_
  - name: (
  - uid: MLEM.Input.Keybind
    name: Keybind
    href: MLEM.Input.Keybind.html
  - name: )
- uid: MLEM.Input.Keybind.Combinations*
  commentId: Overload:MLEM.Input.Keybind.Combinations
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Combinations
  name: Combinations
  nameWithType: Keybind.Combinations
  fullName: MLEM.Input.Keybind.Combinations
- uid: MLEM.Input.Keybind.Combination[]
  isExternal: true
  href: MLEM.Input.Keybind.Combination.html
  name: Combination[]
  nameWithType: Keybind.Combination[]
  fullName: MLEM.Input.Keybind.Combination[]
  nameWithType.vb: Keybind.Combination()
  fullName.vb: MLEM.Input.Keybind.Combination()
  name.vb: Combination()
  spec.csharp:
  - uid: MLEM.Input.Keybind.Combination
    name: Combination
    href: MLEM.Input.Keybind.Combination.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: MLEM.Input.Keybind.Combination
    name: Combination
    href: MLEM.Input.Keybind.Combination.html
  - name: (
  - name: )
- uid: MLEM.Input.Keybind.#ctor*
  commentId: Overload:MLEM.Input.Keybind.#ctor
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind__ctor_MLEM_Input_GenericInput_MLEM_Input_GenericInput___
  name: Keybind
  nameWithType: Keybind.Keybind
  fullName: MLEM.Input.Keybind.Keybind
  nameWithType.vb: Keybind.New
  fullName.vb: MLEM.Input.Keybind.New
  name.vb: New
- uid: MLEM.Input.GenericInput
  commentId: T:MLEM.Input.GenericInput
  parent: MLEM.Input
  href: MLEM.Input.GenericInput.html
  name: GenericInput
  nameWithType: GenericInput
  fullName: MLEM.Input.GenericInput
- uid: MLEM.Input.GenericInput[]
  isExternal: true
  href: MLEM.Input.GenericInput.html
  name: GenericInput[]
  nameWithType: GenericInput[]
  fullName: MLEM.Input.GenericInput[]
  nameWithType.vb: GenericInput()
  fullName.vb: MLEM.Input.GenericInput()
  name.vb: GenericInput()
  spec.csharp:
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: (
  - name: )
- uid: MLEM.Input.ModifierKey
  commentId: T:MLEM.Input.ModifierKey
  parent: MLEM.Input
  href: MLEM.Input.ModifierKey.html
  name: ModifierKey
  nameWithType: ModifierKey
  fullName: MLEM.Input.ModifierKey
- uid: MLEM.Input.Keybind.Add*
  commentId: Overload:MLEM.Input.Keybind.Add
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Add_MLEM_Input_GenericInput_MLEM_Input_GenericInput___
  name: Add
  nameWithType: Keybind.Add
  fullName: MLEM.Input.Keybind.Add
- uid: MLEM.Input.Keybind
  commentId: T:MLEM.Input.Keybind
  parent: MLEM.Input
  href: MLEM.Input.Keybind.html
  name: Keybind
  nameWithType: Keybind
  fullName: MLEM.Input.Keybind
- uid: MLEM.Input.Keybind.Combination
  commentId: T:MLEM.Input.Keybind.Combination
  parent: MLEM.Input
  href: MLEM.Input.Keybind.html
  name: Keybind.Combination
  nameWithType: Keybind.Combination
  fullName: MLEM.Input.Keybind.Combination
  spec.csharp:
  - uid: MLEM.Input.Keybind
    name: Keybind
    href: MLEM.Input.Keybind.html
  - name: .
  - uid: MLEM.Input.Keybind.Combination
    name: Combination
    href: MLEM.Input.Keybind.Combination.html
  spec.vb:
  - uid: MLEM.Input.Keybind
    name: Keybind
    href: MLEM.Input.Keybind.html
  - name: .
  - uid: MLEM.Input.Keybind.Combination
    name: Combination
    href: MLEM.Input.Keybind.Combination.html
- uid: MLEM.Input.Keybind.Insert*
  commentId: Overload:MLEM.Input.Keybind.Insert
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Insert_System_Int32_MLEM_Input_GenericInput_MLEM_Input_GenericInput___
  name: Insert
  nameWithType: Keybind.Insert
  fullName: MLEM.Input.Keybind.Insert
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: MLEM.Input.Keybind.Clear*
  commentId: Overload:MLEM.Input.Keybind.Clear
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Clear
  name: Clear
  nameWithType: Keybind.Clear
  fullName: MLEM.Input.Keybind.Clear
- uid: MLEM.Input.Keybind.Remove*
  commentId: Overload:MLEM.Input.Keybind.Remove
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_Remove_System_Func_MLEM_Input_Keybind_Combination_System_Int32_System_Boolean__
  name: Remove
  nameWithType: Keybind.Remove
  fullName: MLEM.Input.Keybind.Remove
- uid: System.Func{MLEM.Input.Keybind.Combination,System.Int32,System.Boolean}
  commentId: T:System.Func{MLEM.Input.Keybind.Combination,System.Int32,System.Boolean}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<Keybind.Combination, int, bool>
  nameWithType: Func<Keybind.Combination, int, bool>
  fullName: System.Func<MLEM.Input.Keybind.Combination, int, bool>
  nameWithType.vb: Func(Of Keybind.Combination, Integer, Boolean)
  fullName.vb: System.Func(Of MLEM.Input.Keybind.Combination, Integer, Boolean)
  name.vb: Func(Of Keybind.Combination, Integer, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: MLEM.Input.Keybind
    name: Keybind
    href: MLEM.Input.Keybind.html
  - name: .
  - uid: MLEM.Input.Keybind.Combination
    name: Combination
    href: MLEM.Input.Keybind.Combination.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Input.Keybind
    name: Keybind
    href: MLEM.Input.Keybind.html
  - name: .
  - uid: MLEM.Input.Keybind.Combination
    name: Combination
    href: MLEM.Input.Keybind.Combination.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: MLEM.Input.Keybind.CopyFrom*
  commentId: Overload:MLEM.Input.Keybind.CopyFrom
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_CopyFrom_MLEM_Input_Keybind_
  name: CopyFrom
  nameWithType: Keybind.CopyFrom
  fullName: MLEM.Input.Keybind.CopyFrom
- uid: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsDown_MLEM_Input_GenericInput_System_Int32_
  name: IsDown(GenericInput, int)
  nameWithType: InputHandler.IsDown(GenericInput, int)
  fullName: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput, int)
  nameWithType.vb: InputHandler.IsDown(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput, Integer)
  name.vb: IsDown(GenericInput, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput,System.Int32)
    name: IsDown
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsDown_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput,System.Int32)
    name: IsDown
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsDown_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.Keybind.IsDown*
  commentId: Overload:MLEM.Input.Keybind.IsDown
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_IsDown_MLEM_Input_InputHandler_System_Int32_
  name: IsDown
  nameWithType: Keybind.IsDown
  fullName: MLEM.Input.Keybind.IsDown
- uid: MLEM.Input.InputHandler
  commentId: T:MLEM.Input.InputHandler
  parent: MLEM.Input
  href: MLEM.Input.InputHandler.html
  name: InputHandler
  nameWithType: InputHandler
  fullName: MLEM.Input.InputHandler
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_WasDown_MLEM_Input_GenericInput_System_Int32_
  name: WasDown(GenericInput, int)
  nameWithType: InputHandler.WasDown(GenericInput, int)
  fullName: MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput, int)
  nameWithType.vb: InputHandler.WasDown(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput, Integer)
  name.vb: WasDown(GenericInput, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput,System.Int32)
    name: WasDown
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_WasDown_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput,System.Int32)
    name: WasDown
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_WasDown_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.Keybind.WasDown*
  commentId: Overload:MLEM.Input.Keybind.WasDown
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_WasDown_MLEM_Input_InputHandler_System_Int32_
  name: WasDown
  nameWithType: Keybind.WasDown
  fullName: MLEM.Input.Keybind.WasDown
- uid: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressed_MLEM_Input_GenericInput_System_Int32_
  name: IsPressed(GenericInput, int)
  nameWithType: InputHandler.IsPressed(GenericInput, int)
  fullName: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput, int)
  nameWithType.vb: InputHandler.IsPressed(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput, Integer)
  name.vb: IsPressed(GenericInput, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput,System.Int32)
    name: IsPressed
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressed_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput,System.Int32)
    name: IsPressed
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressed_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.Keybind.IsPressed*
  commentId: Overload:MLEM.Input.Keybind.IsPressed
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_IsPressed_MLEM_Input_InputHandler_System_Int32_
  name: IsPressed
  nameWithType: Keybind.IsPressed
  fullName: MLEM.Input.Keybind.IsPressed
- uid: MLEM.Input.Keybind.TryConsumePressed(MLEM.Input.InputHandler,System.Int32)
  commentId: M:MLEM.Input.Keybind.TryConsumePressed(MLEM.Input.InputHandler,System.Int32)
  isExternal: true
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_TryConsumePressed_MLEM_Input_InputHandler_System_Int32_
  name: TryConsumePressed(InputHandler, int)
  nameWithType: Keybind.TryConsumePressed(InputHandler, int)
  fullName: MLEM.Input.Keybind.TryConsumePressed(MLEM.Input.InputHandler, int)
  nameWithType.vb: Keybind.TryConsumePressed(InputHandler, Integer)
  fullName.vb: MLEM.Input.Keybind.TryConsumePressed(MLEM.Input.InputHandler, Integer)
  name.vb: TryConsumePressed(InputHandler, Integer)
  spec.csharp:
  - uid: MLEM.Input.Keybind.TryConsumePressed(MLEM.Input.InputHandler,System.Int32)
    name: TryConsumePressed
    href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_TryConsumePressed_MLEM_Input_InputHandler_System_Int32_
  - name: (
  - uid: MLEM.Input.InputHandler
    name: InputHandler
    href: MLEM.Input.InputHandler.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.Keybind.TryConsumePressed(MLEM.Input.InputHandler,System.Int32)
    name: TryConsumePressed
    href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_TryConsumePressed_MLEM_Input_InputHandler_System_Int32_
  - name: (
  - uid: MLEM.Input.InputHandler
    name: InputHandler
    href: MLEM.Input.InputHandler.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressedAvailable_MLEM_Input_GenericInput_System_Int32_
  name: IsPressedAvailable(GenericInput, int)
  nameWithType: InputHandler.IsPressedAvailable(GenericInput, int)
  fullName: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput, int)
  nameWithType.vb: InputHandler.IsPressedAvailable(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput, Integer)
  name.vb: IsPressedAvailable(GenericInput, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput,System.Int32)
    name: IsPressedAvailable
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressedAvailable_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput,System.Int32)
    name: IsPressedAvailable
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressedAvailable_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.Keybind.IsPressedAvailable*
  commentId: Overload:MLEM.Input.Keybind.IsPressedAvailable
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_IsPressedAvailable_MLEM_Input_InputHandler_System_Int32_
  name: IsPressedAvailable
  nameWithType: Keybind.IsPressedAvailable
  fullName: MLEM.Input.Keybind.IsPressedAvailable
- uid: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryConsumePressed_MLEM_Input_GenericInput_System_Int32_
  name: TryConsumePressed(GenericInput, int)
  nameWithType: InputHandler.TryConsumePressed(GenericInput, int)
  fullName: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput, int)
  nameWithType.vb: InputHandler.TryConsumePressed(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput, Integer)
  name.vb: TryConsumePressed(GenericInput, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput,System.Int32)
    name: TryConsumePressed
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryConsumePressed_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput,System.Int32)
    name: TryConsumePressed
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryConsumePressed_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.Keybind.TryConsumePressed*
  commentId: Overload:MLEM.Input.Keybind.TryConsumePressed
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_TryConsumePressed_MLEM_Input_InputHandler_System_Int32_
  name: TryConsumePressed
  nameWithType: Keybind.TryConsumePressed
  fullName: MLEM.Input.Keybind.TryConsumePressed
- uid: MLEM.Input.Keybind.IsModifierDown*
  commentId: Overload:MLEM.Input.Keybind.IsModifierDown
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_IsModifierDown_MLEM_Input_InputHandler_System_Int32_
  name: IsModifierDown
  nameWithType: Keybind.IsModifierDown
  fullName: MLEM.Input.Keybind.IsModifierDown
- uid: MLEM.Input.Keybind.WasModifierDown*
  commentId: Overload:MLEM.Input.Keybind.WasModifierDown
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_WasModifierDown_MLEM_Input_InputHandler_System_Int32_
  name: WasModifierDown
  nameWithType: Keybind.WasModifierDown
  fullName: MLEM.Input.Keybind.WasModifierDown
- uid: MLEM.Input.Keybind.GetCombinations*
  commentId: Overload:MLEM.Input.Keybind.GetCombinations
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_GetCombinations
  name: GetCombinations
  nameWithType: Keybind.GetCombinations
  fullName: MLEM.Input.Keybind.GetCombinations
- uid: System.Collections.Generic.IEnumerable{MLEM.Input.Keybind.Combination}
  commentId: T:System.Collections.Generic.IEnumerable{MLEM.Input.Keybind.Combination}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Keybind.Combination>
  nameWithType: IEnumerable<Keybind.Combination>
  fullName: System.Collections.Generic.IEnumerable<MLEM.Input.Keybind.Combination>
  nameWithType.vb: IEnumerable(Of Keybind.Combination)
  fullName.vb: System.Collections.Generic.IEnumerable(Of MLEM.Input.Keybind.Combination)
  name.vb: IEnumerable(Of Keybind.Combination)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: MLEM.Input.Keybind
    name: Keybind
    href: MLEM.Input.Keybind.html
  - name: .
  - uid: MLEM.Input.Keybind.Combination
    name: Combination
    href: MLEM.Input.Keybind.Combination.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Input.Keybind
    name: Keybind
    href: MLEM.Input.Keybind.html
  - name: .
  - uid: MLEM.Input.Keybind.Combination
    name: Combination
    href: MLEM.Input.Keybind.Combination.html
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: MLEM.Input.Keybind.TryGetCombination*
  commentId: Overload:MLEM.Input.Keybind.TryGetCombination
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_TryGetCombination_System_Int32_MLEM_Input_Keybind_Combination__
  name: TryGetCombination
  nameWithType: Keybind.TryGetCombination
  fullName: MLEM.Input.Keybind.TryGetCombination
- uid: MLEM.Input.Keybind.ToString
  commentId: M:MLEM.Input.Keybind.ToString
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_ToString
  name: ToString()
  nameWithType: Keybind.ToString()
  fullName: MLEM.Input.Keybind.ToString()
  spec.csharp:
  - uid: MLEM.Input.Keybind.ToString
    name: ToString
    href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_ToString
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Input.Keybind.ToString
    name: ToString
    href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_ToString
  - name: (
  - name: )
- uid: MLEM.Input.Keybind.Combination.ToString(System.String,System.Func{MLEM.Input.GenericInput,System.String})
  commentId: M:MLEM.Input.Keybind.Combination.ToString(System.String,System.Func{MLEM.Input.GenericInput,System.String})
  isExternal: true
  href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_ToString_System_String_System_Func_MLEM_Input_GenericInput_System_String__
  name: ToString(string, Func<GenericInput, string>)
  nameWithType: Keybind.Combination.ToString(string, Func<GenericInput, string>)
  fullName: MLEM.Input.Keybind.Combination.ToString(string, System.Func<MLEM.Input.GenericInput, string>)
  nameWithType.vb: Keybind.Combination.ToString(String, Func(Of GenericInput, String))
  fullName.vb: MLEM.Input.Keybind.Combination.ToString(String, System.Func(Of MLEM.Input.GenericInput, String))
  name.vb: ToString(String, Func(Of GenericInput, String))
  spec.csharp:
  - uid: MLEM.Input.Keybind.Combination.ToString(System.String,System.Func{MLEM.Input.GenericInput,System.String})
    name: ToString
    href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_ToString_System_String_System_Func_MLEM_Input_GenericInput_System_String__
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: )
  spec.vb:
  - uid: MLEM.Input.Keybind.Combination.ToString(System.String,System.Func{MLEM.Input.GenericInput,System.String})
    name: ToString
    href: MLEM.Input.Keybind.Combination.html#MLEM_Input_Keybind_Combination_ToString_System_String_System_Func_MLEM_Input_GenericInput_System_String__
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: )
- uid: MLEM.Input.Keybind.ToString*
  commentId: Overload:MLEM.Input.Keybind.ToString
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_ToString_System_String_System_String_System_Func_MLEM_Input_GenericInput_System_String__
  name: ToString
  nameWithType: Keybind.ToString
  fullName: MLEM.Input.Keybind.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Func{MLEM.Input.GenericInput,System.String}
  commentId: T:System.Func{MLEM.Input.GenericInput,System.String}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<GenericInput, string>
  nameWithType: Func<GenericInput, string>
  fullName: System.Func<MLEM.Input.GenericInput, string>
  nameWithType.vb: Func(Of GenericInput, String)
  fullName.vb: System.Func(Of MLEM.Input.GenericInput, String)
  name.vb: Func(Of GenericInput, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: MLEM.Input.Keybind.CompareTo*
  commentId: Overload:MLEM.Input.Keybind.CompareTo
  href: MLEM.Input.Keybind.html#MLEM_Input_Keybind_CompareTo_MLEM_Input_Keybind_
  name: CompareTo
  nameWithType: Keybind.CompareTo
  fullName: MLEM.Input.Keybind.CompareTo
- uid: System.IComparable{MLEM.Input.Keybind}.CompareTo(MLEM.Input.Keybind)
  commentId: M:System.IComparable{MLEM.Input.Keybind}.CompareTo(MLEM.Input.Keybind)
  parent: System.IComparable{MLEM.Input.Keybind}
  definition: System.IComparable`1.CompareTo(`0)
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  name: CompareTo(Keybind)
  nameWithType: IComparable<Keybind>.CompareTo(Keybind)
  fullName: System.IComparable<MLEM.Input.Keybind>.CompareTo(MLEM.Input.Keybind)
  nameWithType.vb: IComparable(Of Keybind).CompareTo(Keybind)
  fullName.vb: System.IComparable(Of MLEM.Input.Keybind).CompareTo(MLEM.Input.Keybind)
  spec.csharp:
  - uid: System.IComparable{MLEM.Input.Keybind}.CompareTo(MLEM.Input.Keybind)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - uid: MLEM.Input.Keybind
    name: Keybind
    href: MLEM.Input.Keybind.html
  - name: )
  spec.vb:
  - uid: System.IComparable{MLEM.Input.Keybind}.CompareTo(MLEM.Input.Keybind)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - uid: MLEM.Input.Keybind
    name: Keybind
    href: MLEM.Input.Keybind.html
  - name: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - name: T
  - name: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  name: CompareTo(object)
  nameWithType: IComparable.CompareTo(object)
  fullName: System.IComparable.CompareTo(object)
  nameWithType.vb: IComparable.CompareTo(Object)
  fullName.vb: System.IComparable.CompareTo(Object)
  name.vb: CompareTo(Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
