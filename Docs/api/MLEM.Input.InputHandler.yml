### YamlMime:ManagedReference
items:
- uid: MLEM.Input.InputHandler
  commentId: T:MLEM.Input.InputHandler
  id: InputHandler
  parent: MLEM.Input
  children:
  - MLEM.Input.InputHandler.#ctor(Microsoft.Xna.Framework.Game,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - MLEM.Input.InputHandler.AddExternalGesture(Microsoft.Xna.Framework.Input.Touch.GestureSample)
  - MLEM.Input.InputHandler.AllButtons
  - MLEM.Input.InputHandler.AllKeys
  - MLEM.Input.InputHandler.ConnectedGamepads
  - MLEM.Input.InputHandler.DisableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  - MLEM.Input.InputHandler.EnableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  - MLEM.Input.InputHandler.ExternalGestureHandling
  - MLEM.Input.InputHandler.GamepadButtonDeadzone
  - MLEM.Input.InputHandler.Gestures
  - MLEM.Input.InputHandler.GetDownTime(MLEM.Input.GenericInput,System.Int32)
  - MLEM.Input.InputHandler.GetGamepadState(System.Int32)
  - MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  - MLEM.Input.InputHandler.GetLastGamepadState(System.Int32)
  - MLEM.Input.InputHandler.GetTimeSincePress(MLEM.Input.GenericInput,System.Int32)
  - MLEM.Input.InputHandler.GetUpTime(MLEM.Input.GenericInput,System.Int32)
  - MLEM.Input.InputHandler.GetViewportGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  - MLEM.Input.InputHandler.HandleGamepadRepeats
  - MLEM.Input.InputHandler.HandleGamepads
  - MLEM.Input.InputHandler.HandleKeyboard
  - MLEM.Input.InputHandler.HandleKeyboardRepeats
  - MLEM.Input.InputHandler.HandleMouse
  - MLEM.Input.InputHandler.HandleTouch
  - MLEM.Input.InputHandler.InputsDown
  - MLEM.Input.InputHandler.InputsPressed
  - MLEM.Input.InputHandler.InvertPressBehavior
  - MLEM.Input.InputHandler.IsAnyDown(MLEM.Input.GenericInput[])
  - MLEM.Input.InputHandler.IsAnyPressed(MLEM.Input.GenericInput[])
  - MLEM.Input.InputHandler.IsAnyPressedAvailable(MLEM.Input.GenericInput[])
  - MLEM.Input.InputHandler.IsAnyUp(MLEM.Input.GenericInput[])
  - MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput,System.Int32)
  - MLEM.Input.InputHandler.IsModifierKeyDown(MLEM.Input.ModifierKey)
  - MLEM.Input.InputHandler.IsPressConsumed(MLEM.Input.GenericInput,System.Int32)
  - MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput,System.Int32)
  - MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput,System.Int32)
  - MLEM.Input.InputHandler.IsPressedIgnoreRepeats(MLEM.Input.GenericInput,System.Int32)
  - MLEM.Input.InputHandler.IsUp(MLEM.Input.GenericInput,System.Int32)
  - MLEM.Input.InputHandler.KeyRepeatDelay
  - MLEM.Input.InputHandler.KeyRepeatRate
  - MLEM.Input.InputHandler.KeyboardState
  - MLEM.Input.InputHandler.LastKeyboardState
  - MLEM.Input.InputHandler.LastMousePosition
  - MLEM.Input.InputHandler.LastMouseState
  - MLEM.Input.InputHandler.LastScrollWheel
  - MLEM.Input.InputHandler.LastTouchState
  - MLEM.Input.InputHandler.LastViewportMousePosition
  - MLEM.Input.InputHandler.LastViewportTouchState
  - MLEM.Input.InputHandler.MousePosition
  - MLEM.Input.InputHandler.MouseState
  - MLEM.Input.InputHandler.ScrollWheel
  - MLEM.Input.InputHandler.SetGesturesEnabled(System.Boolean,Microsoft.Xna.Framework.Input.Touch.GestureType[])
  - MLEM.Input.InputHandler.TouchState
  - MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput,System.Int32)
  - MLEM.Input.InputHandler.TryConsumePressedForLess(MLEM.Input.GenericInput,System.TimeSpan,System.Int32)
  - MLEM.Input.InputHandler.TryGetDownTime(MLEM.Input.GenericInput,System.TimeSpan@,System.Int32)
  - MLEM.Input.InputHandler.TryGetTimeSincePress(MLEM.Input.GenericInput,System.TimeSpan@,System.Int32)
  - MLEM.Input.InputHandler.TryGetUpTime(MLEM.Input.GenericInput,System.TimeSpan@,System.Int32)
  - MLEM.Input.InputHandler.Update
  - MLEM.Input.InputHandler.Update(Microsoft.Xna.Framework.GameTime)
  - MLEM.Input.InputHandler.ViewportMousePosition
  - MLEM.Input.InputHandler.ViewportTouchState
  - MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput,System.Int32)
  - MLEM.Input.InputHandler.WasPressedForLess(MLEM.Input.GenericInput,System.TimeSpan,System.Int32)
  - MLEM.Input.InputHandler.WasPressedForLessAvailable(MLEM.Input.GenericInput,System.TimeSpan,System.Int32)
  - MLEM.Input.InputHandler.WasUp(MLEM.Input.GenericInput,System.Int32)
  langs:
  - csharp
  - vb
  name: InputHandler
  nameWithType: InputHandler
  fullName: MLEM.Input.InputHandler
  type: Class
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: InputHandler
    path: ../MLEM/Input/InputHandler.cs
    startLine: 15
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    An input handler is a more advanced wrapper around MonoGame's default input system.

    It includes keyboard, mouse, gamepad and touch handling through the <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref> wrapper, as well as a new "pressed" state for inputs, the ability for keyboard and gamepad repeat events, and the ability to track down, up and press times for inputs.
  example: []
  syntax:
    content: 'public class InputHandler : GameComponent, IGameComponent, IUpdateable, IDisposable'
    content.vb: Public Class InputHandler Inherits GameComponent Implements IGameComponent, IUpdateable, IDisposable
  inheritance:
  - System.Object
  - Microsoft.Xna.Framework.GameComponent
  implements:
  - Microsoft.Xna.Framework.IGameComponent
  - Microsoft.Xna.Framework.IUpdateable
  - System.IDisposable
  inheritedMembers:
  - Microsoft.Xna.Framework.GameComponent.Initialize
  - Microsoft.Xna.Framework.GameComponent.OnUpdateOrderChanged(System.Object,System.EventArgs)
  - Microsoft.Xna.Framework.GameComponent.OnEnabledChanged(System.Object,System.EventArgs)
  - Microsoft.Xna.Framework.GameComponent.Dispose(System.Boolean)
  - Microsoft.Xna.Framework.GameComponent.Dispose
  - Microsoft.Xna.Framework.GameComponent.Game
  - Microsoft.Xna.Framework.GameComponent.Enabled
  - Microsoft.Xna.Framework.GameComponent.UpdateOrder
  - Microsoft.Xna.Framework.GameComponent.EnabledChanged
  - Microsoft.Xna.Framework.GameComponent.UpdateOrderChanged
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: MLEM.Input.InputHandler.AllButtons
  commentId: F:MLEM.Input.InputHandler.AllButtons
  id: AllButtons
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: AllButtons
  nameWithType: InputHandler.AllButtons
  fullName: MLEM.Input.InputHandler.AllButtons
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: AllButtons
    path: ../MLEM/Input/InputHandler.cs
    startLine: 20
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: All values of the <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref> enum.
  example: []
  syntax:
    content: public static readonly Buttons[] AllButtons
    return:
      type: Microsoft.Xna.Framework.Input.Buttons[]
    content.vb: Public Shared ReadOnly AllButtons As Buttons()
- uid: MLEM.Input.InputHandler.AllKeys
  commentId: F:MLEM.Input.InputHandler.AllKeys
  id: AllKeys
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: AllKeys
  nameWithType: InputHandler.AllKeys
  fullName: MLEM.Input.InputHandler.AllKeys
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: AllKeys
    path: ../MLEM/Input/InputHandler.cs
    startLine: 29
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: All values of the <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref> enum.
  example: []
  syntax:
    content: public static readonly Keys[] AllKeys
    return:
      type: Microsoft.Xna.Framework.Input.Keys[]
    content.vb: Public Shared ReadOnly AllKeys As Keys()
- uid: MLEM.Input.InputHandler.Gestures
  commentId: F:MLEM.Input.InputHandler.Gestures
  id: Gestures
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: Gestures
  nameWithType: InputHandler.Gestures
  fullName: MLEM.Input.InputHandler.Gestures
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Gestures
    path: ../MLEM/Input/InputHandler.cs
    startLine: 48
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Contains all of the gestures that have finished during the last update call.

    To easily query these gestures, use <xref href="MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType%2cMicrosoft.Xna.Framework.Input.Touch.GestureSample%40)" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Input.InputHandler.GetViewportGesture(Microsoft.Xna.Framework.Input.Touch.GestureType%2cMicrosoft.Xna.Framework.Input.Touch.GestureSample%40)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public readonly ReadOnlyCollection<GestureSample> Gestures
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Xna.Framework.Input.Touch.GestureSample}
    content.vb: Public ReadOnly Gestures As ReadOnlyCollection(Of GestureSample)
- uid: MLEM.Input.InputHandler.HandleKeyboard
  commentId: F:MLEM.Input.InputHandler.HandleKeyboard
  id: HandleKeyboard
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: HandleKeyboard
  nameWithType: InputHandler.HandleKeyboard
  fullName: MLEM.Input.InputHandler.HandleKeyboard
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: HandleKeyboard
    path: ../MLEM/Input/InputHandler.cs
    startLine: 53
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Set this field to false to disable keyboard handling for this input handler.
  example: []
  syntax:
    content: public bool HandleKeyboard
    return:
      type: System.Boolean
    content.vb: Public HandleKeyboard As Boolean
- uid: MLEM.Input.InputHandler.HandleMouse
  commentId: F:MLEM.Input.InputHandler.HandleMouse
  id: HandleMouse
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: HandleMouse
  nameWithType: InputHandler.HandleMouse
  fullName: MLEM.Input.InputHandler.HandleMouse
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: HandleMouse
    path: ../MLEM/Input/InputHandler.cs
    startLine: 57
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Set this field to false to disable mouse handling for this input handler.
  example: []
  syntax:
    content: public bool HandleMouse
    return:
      type: System.Boolean
    content.vb: Public HandleMouse As Boolean
- uid: MLEM.Input.InputHandler.HandleGamepads
  commentId: F:MLEM.Input.InputHandler.HandleGamepads
  id: HandleGamepads
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: HandleGamepads
  nameWithType: InputHandler.HandleGamepads
  fullName: MLEM.Input.InputHandler.HandleGamepads
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: HandleGamepads
    path: ../MLEM/Input/InputHandler.cs
    startLine: 61
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Set this field to false to disable keyboard handling for this input handler.
  example: []
  syntax:
    content: public bool HandleGamepads
    return:
      type: System.Boolean
    content.vb: Public HandleGamepads As Boolean
- uid: MLEM.Input.InputHandler.HandleTouch
  commentId: F:MLEM.Input.InputHandler.HandleTouch
  id: HandleTouch
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: HandleTouch
  nameWithType: InputHandler.HandleTouch
  fullName: MLEM.Input.InputHandler.HandleTouch
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: HandleTouch
    path: ../MLEM/Input/InputHandler.cs
    startLine: 65
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Set this field to false to disable touch handling for this input handler.
  example: []
  syntax:
    content: public bool HandleTouch
    return:
      type: System.Boolean
    content.vb: Public HandleTouch As Boolean
- uid: MLEM.Input.InputHandler.KeyRepeatDelay
  commentId: F:MLEM.Input.InputHandler.KeyRepeatDelay
  id: KeyRepeatDelay
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: KeyRepeatDelay
  nameWithType: InputHandler.KeyRepeatDelay
  fullName: MLEM.Input.InputHandler.KeyRepeatDelay
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: KeyRepeatDelay
    path: ../MLEM/Input/InputHandler.cs
    startLine: 70
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    This is the amount of time that has to pass before the first keyboard repeat event is triggered.

    <xref href="MLEM.Input.InputHandler.KeyRepeatRate" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public TimeSpan KeyRepeatDelay
    return:
      type: System.TimeSpan
    content.vb: Public KeyRepeatDelay As TimeSpan
- uid: MLEM.Input.InputHandler.KeyRepeatRate
  commentId: F:MLEM.Input.InputHandler.KeyRepeatRate
  id: KeyRepeatRate
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: KeyRepeatRate
  nameWithType: InputHandler.KeyRepeatRate
  fullName: MLEM.Input.InputHandler.KeyRepeatRate
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: KeyRepeatRate
    path: ../MLEM/Input/InputHandler.cs
    startLine: 75
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    This is the amount of time that has to pass between keyboard repeat events.

    <xref href="MLEM.Input.InputHandler.KeyRepeatDelay" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public TimeSpan KeyRepeatRate
    return:
      type: System.TimeSpan
    content.vb: Public KeyRepeatRate As TimeSpan
- uid: MLEM.Input.InputHandler.HandleKeyboardRepeats
  commentId: F:MLEM.Input.InputHandler.HandleKeyboardRepeats
  id: HandleKeyboardRepeats
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: HandleKeyboardRepeats
  nameWithType: InputHandler.HandleKeyboardRepeats
  fullName: MLEM.Input.InputHandler.HandleKeyboardRepeats
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: HandleKeyboardRepeats
    path: ../MLEM/Input/InputHandler.cs
    startLine: 79
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Set this field to false to disable keyboard repeat event handling.
  example: []
  syntax:
    content: public bool HandleKeyboardRepeats
    return:
      type: System.Boolean
    content.vb: Public HandleKeyboardRepeats As Boolean
- uid: MLEM.Input.InputHandler.HandleGamepadRepeats
  commentId: F:MLEM.Input.InputHandler.HandleGamepadRepeats
  id: HandleGamepadRepeats
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: HandleGamepadRepeats
  nameWithType: InputHandler.HandleGamepadRepeats
  fullName: MLEM.Input.InputHandler.HandleGamepadRepeats
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: HandleGamepadRepeats
    path: ../MLEM/Input/InputHandler.cs
    startLine: 83
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Set this field to false to disable gamepad repeat event handling.
  example: []
  syntax:
    content: public bool HandleGamepadRepeats
    return:
      type: System.Boolean
    content.vb: Public HandleGamepadRepeats As Boolean
- uid: MLEM.Input.InputHandler.GamepadButtonDeadzone
  commentId: F:MLEM.Input.InputHandler.GamepadButtonDeadzone
  id: GamepadButtonDeadzone
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: GamepadButtonDeadzone
  nameWithType: InputHandler.GamepadButtonDeadzone
  fullName: MLEM.Input.InputHandler.GamepadButtonDeadzone
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GamepadButtonDeadzone
    path: ../MLEM/Input/InputHandler.cs
    startLine: 89
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    This field represents the deadzone that gamepad <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref> have when input is queried for them using this input handler.

    A deadzone is the percentage (between 0 and 1) that an analog value has to exceed for it to be considered down (<xref href="MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>) or pressed (<xref href="MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>).

    Querying of analog values is done using <xref href="MLEM.Input.GamepadExtensions.GetAnalogValue(Microsoft.Xna.Framework.Input.GamePadState%2cMicrosoft.Xna.Framework.Input.Buttons)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public float GamepadButtonDeadzone
    return:
      type: System.Single
    content.vb: Public GamepadButtonDeadzone As Single
- uid: MLEM.Input.InputHandler.InvertPressBehavior
  commentId: F:MLEM.Input.InputHandler.InvertPressBehavior
  id: InvertPressBehavior
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: InvertPressBehavior
  nameWithType: InputHandler.InvertPressBehavior
  fullName: MLEM.Input.InputHandler.InvertPressBehavior
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: InvertPressBehavior
    path: ../MLEM/Input/InputHandler.cs
    startLine: 94
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Set this field to true to invert the press behavior of <xref href="MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.

    Inverted behavior means that, instead of an input counting as pressed when it was up in the last frame and is now down, it will be counted as pressed when it was down in the last frame and is now up.
  example: []
  syntax:
    content: public bool InvertPressBehavior
    return:
      type: System.Boolean
    content.vb: Public InvertPressBehavior As Boolean
- uid: MLEM.Input.InputHandler.ExternalGestureHandling
  commentId: F:MLEM.Input.InputHandler.ExternalGestureHandling
  id: ExternalGestureHandling
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: ExternalGestureHandling
  nameWithType: InputHandler.ExternalGestureHandling
  fullName: MLEM.Input.InputHandler.ExternalGestureHandling
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ExternalGestureHandling
    path: ../MLEM/Input/InputHandler.cs
    startLine: 100
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    If your project already handles the processing of MonoGame's gestures elsewhere, you can set this field to true to ensure that this input handler's gesture handling does not override your own, since <xref href="Microsoft.Xna.Framework.Input.Touch.GestureSample" data-throw-if-not-resolved="false"></xref> objects can only be retrieved once and are then removed from the <xref href="Microsoft.Xna.Framework.Input.Touch.TouchPanel" data-throw-if-not-resolved="false"></xref>'s queue.

    If this value is set to true, but you still want to be able to use <xref href="MLEM.Input.InputHandler.Gestures" data-throw-if-not-resolved="false"></xref>, <xref href="MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType%2cMicrosoft.Xna.Framework.Input.Touch.GestureSample%40)" data-throw-if-not-resolved="false"></xref>, and <xref href="MLEM.Input.InputHandler.GetViewportGesture(Microsoft.Xna.Framework.Input.Touch.GestureType%2cMicrosoft.Xna.Framework.Input.Touch.GestureSample%40)" data-throw-if-not-resolved="false"></xref>, you can make this input handler aware of a gesture for the duration of the update frame that you added it on by using <xref href="MLEM.Input.InputHandler.AddExternalGesture(Microsoft.Xna.Framework.Input.Touch.GestureSample)" data-throw-if-not-resolved="false"></xref>.

    For more info, see https://mlem.ellpeck.de/articles/input.html#external-gesture-handling.
  example: []
  syntax:
    content: public bool ExternalGestureHandling
    return:
      type: System.Boolean
    content.vb: Public ExternalGestureHandling As Boolean
- uid: MLEM.Input.InputHandler.InputsDown
  commentId: P:MLEM.Input.InputHandler.InputsDown
  id: InputsDown
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: InputsDown
  nameWithType: InputHandler.InputsDown
  fullName: MLEM.Input.InputHandler.InputsDown
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: InputsDown
    path: ../MLEM/Input/InputHandler.cs
    startLine: 106
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    An array of all <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Input.MouseButton" data-throw-if-not-resolved="false"></xref> values that are currently down.

    Additionally, <xref href="MLEM.Input.InputHandler.TryGetDownTime(MLEM.Input.GenericInput%2cSystem.TimeSpan%40%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Input.InputHandler.GetDownTime(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> can be used to determine the amount of time that a given input has been down for.
  example: []
  syntax:
    content: public GenericInput[] InputsDown { get; }
    parameters: []
    return:
      type: MLEM.Input.GenericInput[]
    content.vb: Public Property InputsDown As GenericInput()
  overload: MLEM.Input.InputHandler.InputsDown*
- uid: MLEM.Input.InputHandler.InputsPressed
  commentId: P:MLEM.Input.InputHandler.InputsPressed
  id: InputsPressed
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: InputsPressed
  nameWithType: InputHandler.InputsPressed
  fullName: MLEM.Input.InputHandler.InputsPressed
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: InputsPressed
    path: ../MLEM/Input/InputHandler.cs
    startLine: 111
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    An array of all <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Input.MouseButton" data-throw-if-not-resolved="false"></xref> that are currently considered pressed.

    An input is considered pressed if it was up in the last update, and is up in the current one.
  example: []
  syntax:
    content: public GenericInput[] InputsPressed { get; }
    parameters: []
    return:
      type: MLEM.Input.GenericInput[]
    content.vb: Public Property InputsPressed As GenericInput()
  overload: MLEM.Input.InputHandler.InputsPressed*
- uid: MLEM.Input.InputHandler.LastTouchState
  commentId: P:MLEM.Input.InputHandler.LastTouchState
  id: LastTouchState
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: LastTouchState
  nameWithType: InputHandler.LastTouchState
  fullName: MLEM.Input.InputHandler.LastTouchState
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: LastTouchState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 115
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Contains the touch state from the last update call
  example: []
  syntax:
    content: public TouchCollection LastTouchState { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.Touch.TouchCollection
    content.vb: Public Property LastTouchState As TouchCollection
  overload: MLEM.Input.InputHandler.LastTouchState*
- uid: MLEM.Input.InputHandler.TouchState
  commentId: P:MLEM.Input.InputHandler.TouchState
  id: TouchState
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: TouchState
  nameWithType: InputHandler.TouchState
  fullName: MLEM.Input.InputHandler.TouchState
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TouchState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 119
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Contains the current touch state
  example: []
  syntax:
    content: public TouchCollection TouchState { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.Touch.TouchCollection
    content.vb: Public Property TouchState As TouchCollection
  overload: MLEM.Input.InputHandler.TouchState*
- uid: MLEM.Input.InputHandler.LastViewportTouchState
  commentId: P:MLEM.Input.InputHandler.LastViewportTouchState
  id: LastViewportTouchState
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: LastViewportTouchState
  nameWithType: InputHandler.LastViewportTouchState
  fullName: MLEM.Input.InputHandler.LastViewportTouchState
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: LastViewportTouchState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 123
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Contains the <xref href="MLEM.Input.InputHandler.LastTouchState" data-throw-if-not-resolved="false"></xref>, but with the <xref href="Microsoft.Xna.Framework.Graphics.GraphicsDevice.Viewport" data-throw-if-not-resolved="false"></xref> taken into account.
  example: []
  syntax:
    content: public IList<TouchLocation> LastViewportTouchState { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
    content.vb: Public Property LastViewportTouchState As IList(Of TouchLocation)
  overload: MLEM.Input.InputHandler.LastViewportTouchState*
- uid: MLEM.Input.InputHandler.ViewportTouchState
  commentId: P:MLEM.Input.InputHandler.ViewportTouchState
  id: ViewportTouchState
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: ViewportTouchState
  nameWithType: InputHandler.ViewportTouchState
  fullName: MLEM.Input.InputHandler.ViewportTouchState
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ViewportTouchState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 127
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Contains the <xref href="MLEM.Input.InputHandler.TouchState" data-throw-if-not-resolved="false"></xref>, but with the <xref href="Microsoft.Xna.Framework.Graphics.GraphicsDevice.Viewport" data-throw-if-not-resolved="false"></xref> taken into account.
  example: []
  syntax:
    content: public IList<TouchLocation> ViewportTouchState { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
    content.vb: Public Property ViewportTouchState As IList(Of TouchLocation)
  overload: MLEM.Input.InputHandler.ViewportTouchState*
- uid: MLEM.Input.InputHandler.ConnectedGamepads
  commentId: P:MLEM.Input.InputHandler.ConnectedGamepads
  id: ConnectedGamepads
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: ConnectedGamepads
  nameWithType: InputHandler.ConnectedGamepads
  fullName: MLEM.Input.InputHandler.ConnectedGamepads
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ConnectedGamepads
    path: ../MLEM/Input/InputHandler.cs
    startLine: 132
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Contains the amount of gamepads that are currently connected. Note that this value will be set to 0 if <xref href="MLEM.Input.InputHandler.HandleGamepads" data-throw-if-not-resolved="false"></xref> is false.

    This field is automatically updated in <xref href="MLEM.Input.InputHandler.Update" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public int ConnectedGamepads { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property ConnectedGamepads As Integer
  overload: MLEM.Input.InputHandler.ConnectedGamepads*
- uid: MLEM.Input.InputHandler.LastMouseState
  commentId: P:MLEM.Input.InputHandler.LastMouseState
  id: LastMouseState
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: LastMouseState
  nameWithType: InputHandler.LastMouseState
  fullName: MLEM.Input.InputHandler.LastMouseState
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: LastMouseState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 136
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Contains the mouse state from the last update call
  example: []
  syntax:
    content: public MouseState LastMouseState { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.MouseState
    content.vb: Public Property LastMouseState As MouseState
  overload: MLEM.Input.InputHandler.LastMouseState*
- uid: MLEM.Input.InputHandler.MouseState
  commentId: P:MLEM.Input.InputHandler.MouseState
  id: MouseState
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: MouseState
  nameWithType: InputHandler.MouseState
  fullName: MLEM.Input.InputHandler.MouseState
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: MouseState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 140
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Contains the current mouse state
  example: []
  syntax:
    content: public MouseState MouseState { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.MouseState
    content.vb: Public Property MouseState As MouseState
  overload: MLEM.Input.InputHandler.MouseState*
- uid: MLEM.Input.InputHandler.LastMousePosition
  commentId: P:MLEM.Input.InputHandler.LastMousePosition
  id: LastMousePosition
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: LastMousePosition
  nameWithType: InputHandler.LastMousePosition
  fullName: MLEM.Input.InputHandler.LastMousePosition
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: LastMousePosition
    path: ../MLEM/Input/InputHandler.cs
    startLine: 144
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Contains the position of the mouse from the last update call, extracted from <xref href="MLEM.Input.InputHandler.LastMouseState" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public Point LastMousePosition { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public ReadOnly Property LastMousePosition As Point
  overload: MLEM.Input.InputHandler.LastMousePosition*
- uid: MLEM.Input.InputHandler.LastViewportMousePosition
  commentId: P:MLEM.Input.InputHandler.LastViewportMousePosition
  id: LastViewportMousePosition
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: LastViewportMousePosition
  nameWithType: InputHandler.LastViewportMousePosition
  fullName: MLEM.Input.InputHandler.LastViewportMousePosition
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: LastViewportMousePosition
    path: ../MLEM/Input/InputHandler.cs
    startLine: 148
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Contains the <xref href="MLEM.Input.InputHandler.LastMousePosition" data-throw-if-not-resolved="false"></xref>, but with the <xref href="Microsoft.Xna.Framework.Graphics.GraphicsDevice.Viewport" data-throw-if-not-resolved="false"></xref> taken into account.
  example: []
  syntax:
    content: public Point LastViewportMousePosition { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public ReadOnly Property LastViewportMousePosition As Point
  overload: MLEM.Input.InputHandler.LastViewportMousePosition*
- uid: MLEM.Input.InputHandler.MousePosition
  commentId: P:MLEM.Input.InputHandler.MousePosition
  id: MousePosition
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: MousePosition
  nameWithType: InputHandler.MousePosition
  fullName: MLEM.Input.InputHandler.MousePosition
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: MousePosition
    path: ../MLEM/Input/InputHandler.cs
    startLine: 152
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Contains the current position of the mouse, extracted from <xref href="MLEM.Input.InputHandler.MouseState" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public Point MousePosition { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public ReadOnly Property MousePosition As Point
  overload: MLEM.Input.InputHandler.MousePosition*
- uid: MLEM.Input.InputHandler.ViewportMousePosition
  commentId: P:MLEM.Input.InputHandler.ViewportMousePosition
  id: ViewportMousePosition
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: ViewportMousePosition
  nameWithType: InputHandler.ViewportMousePosition
  fullName: MLEM.Input.InputHandler.ViewportMousePosition
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ViewportMousePosition
    path: ../MLEM/Input/InputHandler.cs
    startLine: 156
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Contains the <xref href="MLEM.Input.InputHandler.MousePosition" data-throw-if-not-resolved="false"></xref>, but with the <xref href="Microsoft.Xna.Framework.Graphics.GraphicsDevice.Viewport" data-throw-if-not-resolved="false"></xref> taken into account.
  example: []
  syntax:
    content: public Point ViewportMousePosition { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public ReadOnly Property ViewportMousePosition As Point
  overload: MLEM.Input.InputHandler.ViewportMousePosition*
- uid: MLEM.Input.InputHandler.ScrollWheel
  commentId: P:MLEM.Input.InputHandler.ScrollWheel
  id: ScrollWheel
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: ScrollWheel
  nameWithType: InputHandler.ScrollWheel
  fullName: MLEM.Input.InputHandler.ScrollWheel
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ScrollWheel
    path: ../MLEM/Input/InputHandler.cs
    startLine: 160
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Contains the current scroll wheel value, in increments of 120
  example: []
  syntax:
    content: public int ScrollWheel { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ScrollWheel As Integer
  overload: MLEM.Input.InputHandler.ScrollWheel*
- uid: MLEM.Input.InputHandler.LastScrollWheel
  commentId: P:MLEM.Input.InputHandler.LastScrollWheel
  id: LastScrollWheel
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: LastScrollWheel
  nameWithType: InputHandler.LastScrollWheel
  fullName: MLEM.Input.InputHandler.LastScrollWheel
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: LastScrollWheel
    path: ../MLEM/Input/InputHandler.cs
    startLine: 164
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Contains the scroll wheel value from the last update call, in increments of 120
  example: []
  syntax:
    content: public int LastScrollWheel { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property LastScrollWheel As Integer
  overload: MLEM.Input.InputHandler.LastScrollWheel*
- uid: MLEM.Input.InputHandler.LastKeyboardState
  commentId: P:MLEM.Input.InputHandler.LastKeyboardState
  id: LastKeyboardState
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: LastKeyboardState
  nameWithType: InputHandler.LastKeyboardState
  fullName: MLEM.Input.InputHandler.LastKeyboardState
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: LastKeyboardState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 168
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Contains the keyboard state from the last update call
  example: []
  syntax:
    content: public KeyboardState LastKeyboardState { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.KeyboardState
    content.vb: Public Property LastKeyboardState As KeyboardState
  overload: MLEM.Input.InputHandler.LastKeyboardState*
- uid: MLEM.Input.InputHandler.KeyboardState
  commentId: P:MLEM.Input.InputHandler.KeyboardState
  id: KeyboardState
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: KeyboardState
  nameWithType: InputHandler.KeyboardState
  fullName: MLEM.Input.InputHandler.KeyboardState
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: KeyboardState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 172
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Contains the current keyboard state
  example: []
  syntax:
    content: public KeyboardState KeyboardState { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.KeyboardState
    content.vb: Public Property KeyboardState As KeyboardState
  overload: MLEM.Input.InputHandler.KeyboardState*
- uid: MLEM.Input.InputHandler.#ctor(Microsoft.Xna.Framework.Game,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:MLEM.Input.InputHandler.#ctor(Microsoft.Xna.Framework.Game,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: '#ctor(Microsoft.Xna.Framework.Game,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)'
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: InputHandler(Game, bool, bool, bool, bool, bool)
  nameWithType: InputHandler.InputHandler(Game, bool, bool, bool, bool, bool)
  fullName: MLEM.Input.InputHandler.InputHandler(Microsoft.Xna.Framework.Game, bool, bool, bool, bool, bool)
  type: Constructor
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM/Input/InputHandler.cs
    startLine: 201
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Creates a new input handler with optional initial values.
  example: []
  syntax:
    content: public InputHandler(Game game, bool handleKeyboard = true, bool handleMouse = true, bool handleGamepads = true, bool handleTouch = true, bool externalGestureHandling = false)
    parameters:
    - id: game
      type: Microsoft.Xna.Framework.Game
      description: The game instance that this input handler belongs to.
    - id: handleKeyboard
      type: System.Boolean
      description: The initial value for <xref href="MLEM.Input.InputHandler.HandleKeyboard" data-throw-if-not-resolved="false"></xref>, which determines whether this input handler handles keyboard inputs.
    - id: handleMouse
      type: System.Boolean
      description: The initial value for <xref href="MLEM.Input.InputHandler.HandleMouse" data-throw-if-not-resolved="false"></xref>, which determines whether this input handler handles mouse inputs.
    - id: handleGamepads
      type: System.Boolean
      description: The initial value for <xref href="MLEM.Input.InputHandler.HandleGamepads" data-throw-if-not-resolved="false"></xref>, which determines whether this input handler handles gamepad inputs.
    - id: handleTouch
      type: System.Boolean
      description: The initial value for <xref href="MLEM.Input.InputHandler.HandleTouch" data-throw-if-not-resolved="false"></xref>, which determines whether this input handler handles touch inputs.
    - id: externalGestureHandling
      type: System.Boolean
      description: The initial value for <xref href="MLEM.Input.InputHandler.ExternalGestureHandling" data-throw-if-not-resolved="false"></xref>, which determines whether gestures will be supplied using <xref href="MLEM.Input.InputHandler.AddExternalGesture(Microsoft.Xna.Framework.Input.Touch.GestureSample)" data-throw-if-not-resolved="false"></xref> (or this input handler should handle gestures itself).
    content.vb: Public Sub New(game As Game, handleKeyboard As Boolean = True, handleMouse As Boolean = True, handleGamepads As Boolean = True, handleTouch As Boolean = True, externalGestureHandling As Boolean = False)
  overload: MLEM.Input.InputHandler.#ctor*
  nameWithType.vb: InputHandler.New(Game, Boolean, Boolean, Boolean, Boolean, Boolean)
  fullName.vb: MLEM.Input.InputHandler.New(Microsoft.Xna.Framework.Game, Boolean, Boolean, Boolean, Boolean, Boolean)
  name.vb: New(Game, Boolean, Boolean, Boolean, Boolean, Boolean)
- uid: MLEM.Input.InputHandler.Update
  commentId: M:MLEM.Input.InputHandler.Update
  id: Update
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: InputHandler.Update()
  fullName: MLEM.Input.InputHandler.Update()
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Update
    path: ../MLEM/Input/InputHandler.cs
    startLine: 214
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Updates this input handler, querying pressed and released keys and calculating repeat events.

    Call this in your <xref href="Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)" data-throw-if-not-resolved="false"></xref> method.
  example: []
  syntax:
    content: public void Update()
    content.vb: Public Sub Update()
  overload: MLEM.Input.InputHandler.Update*
- uid: MLEM.Input.InputHandler.Update(Microsoft.Xna.Framework.GameTime)
  commentId: M:MLEM.Input.InputHandler.Update(Microsoft.Xna.Framework.GameTime)
  id: Update(Microsoft.Xna.Framework.GameTime)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: Update(GameTime)
  nameWithType: InputHandler.Update(GameTime)
  fullName: MLEM.Input.InputHandler.Update(Microsoft.Xna.Framework.GameTime)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Update
    path: ../MLEM/Input/InputHandler.cs
    startLine: 382
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Updates this input handler, querying pressed and released keys and calculating repeat events.

    Call this in your <xref href="Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)" data-throw-if-not-resolved="false"></xref> method.
  example: []
  syntax:
    content: public override void Update(GameTime gameTime)
    parameters:
    - id: gameTime
      type: Microsoft.Xna.Framework.GameTime
    content.vb: Public Overrides Sub Update(gameTime As GameTime)
  overridden: Microsoft.Xna.Framework.GameComponent.Update(Microsoft.Xna.Framework.GameTime)
  overload: MLEM.Input.InputHandler.Update*
- uid: MLEM.Input.InputHandler.GetLastGamepadState(System.Int32)
  commentId: M:MLEM.Input.InputHandler.GetLastGamepadState(System.Int32)
  id: GetLastGamepadState(System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: GetLastGamepadState(int)
  nameWithType: InputHandler.GetLastGamepadState(int)
  fullName: MLEM.Input.InputHandler.GetLastGamepadState(int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetLastGamepadState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 391
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns the state of the <code>index</code>th gamepad from the last update call
  example: []
  syntax:
    content: public GamePadState GetLastGamepadState(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based gamepad index
    return:
      type: Microsoft.Xna.Framework.Input.GamePadState
      description: The state of the gamepad last update
    content.vb: Public Function GetLastGamepadState(index As Integer) As GamePadState
  overload: MLEM.Input.InputHandler.GetLastGamepadState*
  nameWithType.vb: InputHandler.GetLastGamepadState(Integer)
  fullName.vb: MLEM.Input.InputHandler.GetLastGamepadState(Integer)
  name.vb: GetLastGamepadState(Integer)
- uid: MLEM.Input.InputHandler.GetGamepadState(System.Int32)
  commentId: M:MLEM.Input.InputHandler.GetGamepadState(System.Int32)
  id: GetGamepadState(System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: GetGamepadState(int)
  nameWithType: InputHandler.GetGamepadState(int)
  fullName: MLEM.Input.InputHandler.GetGamepadState(int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetGamepadState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 400
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns the current state of the <code>index</code>th gamepad
  example: []
  syntax:
    content: public GamePadState GetGamepadState(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based gamepad index
    return:
      type: Microsoft.Xna.Framework.Input.GamePadState
      description: The current state of the gamepad
    content.vb: Public Function GetGamepadState(index As Integer) As GamePadState
  overload: MLEM.Input.InputHandler.GetGamepadState*
  nameWithType.vb: InputHandler.GetGamepadState(Integer)
  fullName.vb: MLEM.Input.InputHandler.GetGamepadState(Integer)
  name.vb: GetGamepadState(Integer)
- uid: MLEM.Input.InputHandler.IsModifierKeyDown(MLEM.Input.ModifierKey)
  commentId: M:MLEM.Input.InputHandler.IsModifierKeyDown(MLEM.Input.ModifierKey)
  id: IsModifierKeyDown(MLEM.Input.ModifierKey)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsModifierKeyDown(ModifierKey)
  nameWithType: InputHandler.IsModifierKeyDown(ModifierKey)
  fullName: MLEM.Input.InputHandler.IsModifierKeyDown(MLEM.Input.ModifierKey)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsModifierKeyDown
    path: ../MLEM/Input/InputHandler.cs
    startLine: 409
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns whether the given modifier key is down.
  example: []
  syntax:
    content: public bool IsModifierKeyDown(ModifierKey modifier)
    parameters:
    - id: modifier
      type: MLEM.Input.ModifierKey
      description: The modifier key
    return:
      type: System.Boolean
      description: If the modifier key is down
    content.vb: Public Function IsModifierKeyDown(modifier As ModifierKey) As Boolean
  overload: MLEM.Input.InputHandler.IsModifierKeyDown*
- uid: MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  commentId: M:MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  id: GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: GetGesture(GestureType, out GestureSample)
  nameWithType: InputHandler.GetGesture(GestureType, out GestureSample)
  fullName: MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType, out Microsoft.Xna.Framework.Input.Touch.GestureSample)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetGesture
    path: ../MLEM/Input/InputHandler.cs
    startLine: 422
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Queries for a gesture of a given type that finished during the current update call.
  example: []
  syntax:
    content: public bool GetGesture(GestureType type, out GestureSample sample)
    parameters:
    - id: type
      type: Microsoft.Xna.Framework.Input.Touch.GestureType
      description: The type of gesture to query for
    - id: sample
      type: Microsoft.Xna.Framework.Input.Touch.GestureSample
      description: The resulting gesture sample, or default if there isn't one
    return:
      type: System.Boolean
      description: True if a gesture of the type was found, otherwise false
    content.vb: Public Function GetGesture(type As GestureType, sample As GestureSample) As Boolean
  overload: MLEM.Input.InputHandler.GetGesture*
  nameWithType.vb: InputHandler.GetGesture(GestureType, GestureSample)
  fullName.vb: MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType, Microsoft.Xna.Framework.Input.Touch.GestureSample)
  name.vb: GetGesture(GestureType, GestureSample)
- uid: MLEM.Input.InputHandler.GetViewportGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  commentId: M:MLEM.Input.InputHandler.GetViewportGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  id: GetViewportGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: GetViewportGesture(GestureType, out GestureSample)
  nameWithType: InputHandler.GetViewportGesture(GestureType, out GestureSample)
  fullName: MLEM.Input.InputHandler.GetViewportGesture(Microsoft.Xna.Framework.Input.Touch.GestureType, out Microsoft.Xna.Framework.Input.Touch.GestureSample)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetViewportGesture
    path: ../MLEM/Input/InputHandler.cs
    startLine: 440
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Queries for a gesture of the given type that finished during the current update call.

    Unlike <xref href="MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType%2cMicrosoft.Xna.Framework.Input.Touch.GestureSample%40)" data-throw-if-not-resolved="false"></xref>, the return value of this method takes the <xref href="Microsoft.Xna.Framework.Graphics.GraphicsDevice.Viewport" data-throw-if-not-resolved="false"></xref> into account.
  example: []
  syntax:
    content: public bool GetViewportGesture(GestureType type, out GestureSample sample)
    parameters:
    - id: type
      type: Microsoft.Xna.Framework.Input.Touch.GestureType
      description: The type of gesture to query for
    - id: sample
      type: Microsoft.Xna.Framework.Input.Touch.GestureSample
      description: The resulting gesture sample with the <xref href="Microsoft.Xna.Framework.Graphics.GraphicsDevice.Viewport" data-throw-if-not-resolved="false"></xref> taken into account, or default if there isn't one
    return:
      type: System.Boolean
      description: True if a gesture of the type was found, otherwise false
    content.vb: Public Function GetViewportGesture(type As GestureType, sample As GestureSample) As Boolean
  overload: MLEM.Input.InputHandler.GetViewportGesture*
  nameWithType.vb: InputHandler.GetViewportGesture(GestureType, GestureSample)
  fullName.vb: MLEM.Input.InputHandler.GetViewportGesture(Microsoft.Xna.Framework.Input.Touch.GestureType, Microsoft.Xna.Framework.Input.Touch.GestureSample)
  name.vb: GetViewportGesture(GestureType, GestureSample)
- uid: MLEM.Input.InputHandler.AddExternalGesture(Microsoft.Xna.Framework.Input.Touch.GestureSample)
  commentId: M:MLEM.Input.InputHandler.AddExternalGesture(Microsoft.Xna.Framework.Input.Touch.GestureSample)
  id: AddExternalGesture(Microsoft.Xna.Framework.Input.Touch.GestureSample)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: AddExternalGesture(GestureSample)
  nameWithType: InputHandler.AddExternalGesture(GestureSample)
  fullName: MLEM.Input.InputHandler.AddExternalGesture(Microsoft.Xna.Framework.Input.Touch.GestureSample)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: AddExternalGesture
    path: ../MLEM/Input/InputHandler.cs
    startLine: 457
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Adds a gesture to the <xref href="MLEM.Input.InputHandler.Gestures" data-throw-if-not-resolved="false"></xref> collection and allows it to be queried using <xref href="MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType%2cMicrosoft.Xna.Framework.Input.Touch.GestureSample%40)" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Input.InputHandler.GetViewportGesture(Microsoft.Xna.Framework.Input.Touch.GestureType%2cMicrosoft.Xna.Framework.Input.Touch.GestureSample%40)" data-throw-if-not-resolved="false"></xref> for the duration of the update frame that it was added on.

    This method should be used when <xref href="MLEM.Input.InputHandler.ExternalGestureHandling" data-throw-if-not-resolved="false"></xref> is set to true, but <xref href="MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType%2cMicrosoft.Xna.Framework.Input.Touch.GestureSample%40)" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Input.InputHandler.GetViewportGesture(Microsoft.Xna.Framework.Input.Touch.GestureType%2cMicrosoft.Xna.Framework.Input.Touch.GestureSample%40)" data-throw-if-not-resolved="false"></xref> should still be available.

    For more info, see https://mlem.ellpeck.de/articles/input.html#external-gesture-handling.
  example: []
  syntax:
    content: public void AddExternalGesture(GestureSample sample)
    parameters:
    - id: sample
      type: Microsoft.Xna.Framework.Input.Touch.GestureSample
      description: The gesture sample to add.
    content.vb: Public Sub AddExternalGesture(sample As GestureSample)
  overload: MLEM.Input.InputHandler.AddExternalGesture*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if <xref href="MLEM.Input.InputHandler.ExternalGestureHandling" data-throw-if-not-resolved="false"></xref> is false.
- uid: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput,System.Int32)
  id: IsDown(MLEM.Input.GenericInput,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsDown(GenericInput, int)
  nameWithType: InputHandler.IsDown(GenericInput, int)
  fullName: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsDown
    path: ../MLEM/Input/InputHandler.cs
    startLine: 470
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns if a given control of any kind is down.

    This is a helper function that can be passed a <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Input.MouseButton" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool IsDown(GenericInput control, int index = -1)
    parameters:
    - id: control
      type: MLEM.Input.GenericInput
      description: The control whose down state to query
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad
    return:
      type: System.Boolean
      description: Whether the given control is down
    content.vb: Public Function IsDown(control As GenericInput, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.IsDown*
  nameWithType.vb: InputHandler.IsDown(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput, Integer)
  name.vb: IsDown(GenericInput, Integer)
- uid: MLEM.Input.InputHandler.IsUp(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsUp(MLEM.Input.GenericInput,System.Int32)
  id: IsUp(MLEM.Input.GenericInput,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsUp(GenericInput, int)
  nameWithType: InputHandler.IsUp(GenericInput, int)
  fullName: MLEM.Input.InputHandler.IsUp(MLEM.Input.GenericInput, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsUp
    path: ../MLEM/Input/InputHandler.cs
    startLine: 497
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns if a given control of any kind is up.

    This is a helper function that can be passed a <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Input.MouseButton" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool IsUp(GenericInput control, int index = -1)
    parameters:
    - id: control
      type: MLEM.Input.GenericInput
      description: The control whose up state to query
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad
    return:
      type: System.Boolean
      description: Whether the given control is up.
    content.vb: Public Function IsUp(control As GenericInput, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.IsUp*
  nameWithType.vb: InputHandler.IsUp(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.IsUp(MLEM.Input.GenericInput, Integer)
  name.vb: IsUp(GenericInput, Integer)
- uid: MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput,System.Int32)
  id: WasDown(MLEM.Input.GenericInput,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: WasDown(GenericInput, int)
  nameWithType: InputHandler.WasDown(GenericInput, int)
  fullName: MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: WasDown
    path: ../MLEM/Input/InputHandler.cs
    startLine: 524
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns if a given control of any kind was down in the last update call.

    This is a helper function that can be passed a <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Input.MouseButton" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool WasDown(GenericInput control, int index = -1)
    parameters:
    - id: control
      type: MLEM.Input.GenericInput
      description: The control whose down state to query
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad
    return:
      type: System.Boolean
      description: Whether the given control was down
    content.vb: Public Function WasDown(control As GenericInput, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.WasDown*
  nameWithType.vb: InputHandler.WasDown(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.WasDown(MLEM.Input.GenericInput, Integer)
  name.vb: WasDown(GenericInput, Integer)
- uid: MLEM.Input.InputHandler.WasUp(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.WasUp(MLEM.Input.GenericInput,System.Int32)
  id: WasUp(MLEM.Input.GenericInput,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: WasUp(GenericInput, int)
  nameWithType: InputHandler.WasUp(GenericInput, int)
  fullName: MLEM.Input.InputHandler.WasUp(MLEM.Input.GenericInput, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: WasUp
    path: ../MLEM/Input/InputHandler.cs
    startLine: 551
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns if a given control of any kind was up in the last update call.

    This is a helper function that can be passed a <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Input.MouseButton" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool WasUp(GenericInput control, int index = -1)
    parameters:
    - id: control
      type: MLEM.Input.GenericInput
      description: The control whose up state to query
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad
    return:
      type: System.Boolean
      description: Whether the given control was up.
    content.vb: Public Function WasUp(control As GenericInput, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.WasUp*
  nameWithType.vb: InputHandler.WasUp(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.WasUp(MLEM.Input.GenericInput, Integer)
  name.vb: WasUp(GenericInput, Integer)
- uid: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput,System.Int32)
  id: IsPressed(MLEM.Input.GenericInput,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsPressed(GenericInput, int)
  nameWithType: InputHandler.IsPressed(GenericInput, int)
  fullName: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsPressed
    path: ../MLEM/Input/InputHandler.cs
    startLine: 579
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns if a given control of any kind is pressed.

    If <xref href="MLEM.Input.InputHandler.HandleKeyboardRepeats" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Input.InputHandler.HandleGamepadRepeats" data-throw-if-not-resolved="false"></xref> are true, this method will also return true to signify a key or gamepad button repeat.

    An input is considered pressed if it was not down the last update call, but is down the current update call. If <xref href="MLEM.Input.InputHandler.InvertPressBehavior" data-throw-if-not-resolved="false"></xref> is true, this behavior is inverted.
  example: []
  syntax:
    content: public bool IsPressed(GenericInput control, int index = -1)
    parameters:
    - id: control
      type: MLEM.Input.GenericInput
      description: The control whose pressed state to query
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad
    return:
      type: System.Boolean
      description: Whether the given control is pressed.
    content.vb: Public Function IsPressed(control As GenericInput, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.IsPressed*
  nameWithType.vb: InputHandler.IsPressed(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput, Integer)
  name.vb: IsPressed(GenericInput, Integer)
- uid: MLEM.Input.InputHandler.IsPressedIgnoreRepeats(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsPressedIgnoreRepeats(MLEM.Input.GenericInput,System.Int32)
  id: IsPressedIgnoreRepeats(MLEM.Input.GenericInput,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsPressedIgnoreRepeats(GenericInput, int)
  nameWithType: InputHandler.IsPressedIgnoreRepeats(GenericInput, int)
  fullName: MLEM.Input.InputHandler.IsPressedIgnoreRepeats(MLEM.Input.GenericInput, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsPressedIgnoreRepeats
    path: ../MLEM/Input/InputHandler.cs
    startLine: 610
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    An input is considered pressed if it was not down the last update call, but is down the current update call. If <xref href="MLEM.Input.InputHandler.InvertPressBehavior" data-throw-if-not-resolved="false"></xref> is true, this behavior is inverted.

    This has the same behavior as <xref href="MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>, but ignores keyboard and gamepad repeat events.

    If <xref href="MLEM.Input.InputHandler.HandleKeyboardRepeats" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Input.InputHandler.HandleGamepadRepeats" data-throw-if-not-resolved="false"></xref> are false, this method does the same as <xref href="MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool IsPressedIgnoreRepeats(GenericInput control, int index = -1)
    parameters:
    - id: control
      type: MLEM.Input.GenericInput
      description: The control whose pressed state to query
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad
    return:
      type: System.Boolean
      description: Whether the given control is pressed, ignoring repeat events.
    content.vb: Public Function IsPressedIgnoreRepeats(control As GenericInput, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.IsPressedIgnoreRepeats*
  nameWithType.vb: InputHandler.IsPressedIgnoreRepeats(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.IsPressedIgnoreRepeats(MLEM.Input.GenericInput, Integer)
  name.vb: IsPressedIgnoreRepeats(GenericInput, Integer)
- uid: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput,System.Int32)
  id: IsPressedAvailable(MLEM.Input.GenericInput,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsPressedAvailable(GenericInput, int)
  nameWithType: InputHandler.IsPressedAvailable(GenericInput, int)
  fullName: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsPressedAvailable
    path: ../MLEM/Input/InputHandler.cs
    startLine: 622
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns if a given control of any kind is pressed, and if the press has not been consumed yet using <xref href="MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool IsPressedAvailable(GenericInput control, int index = -1)
    parameters:
    - id: control
      type: MLEM.Input.GenericInput
      description: The control whose pressed state to query.
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad.
    return:
      type: System.Boolean
      description: Whether the given control is pressed and the press is not consumed yet.
    content.vb: Public Function IsPressedAvailable(control As GenericInput, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.IsPressedAvailable*
  nameWithType.vb: InputHandler.IsPressedAvailable(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput, Integer)
  name.vb: IsPressedAvailable(GenericInput, Integer)
- uid: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput,System.Int32)
  id: TryConsumePressed(MLEM.Input.GenericInput,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: TryConsumePressed(GenericInput, int)
  nameWithType: InputHandler.TryConsumePressed(GenericInput, int)
  fullName: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TryConsumePressed
    path: ../MLEM/Input/InputHandler.cs
    startLine: 633
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns if a given control of any kind is pressed and available, and marks the press as consumed if it is.

    This is a helper function that can be passed a <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Input.MouseButton" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool TryConsumePressed(GenericInput control, int index = -1)
    parameters:
    - id: control
      type: MLEM.Input.GenericInput
      description: The control whose pressed state to query.
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad.
    return:
      type: System.Boolean
      description: Whether the given control is pressed and the press is not consumed yet.
    content.vb: Public Function TryConsumePressed(control As GenericInput, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.TryConsumePressed*
  nameWithType.vb: InputHandler.TryConsumePressed(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput, Integer)
  name.vb: TryConsumePressed(GenericInput, Integer)
- uid: MLEM.Input.InputHandler.WasPressedForLess(MLEM.Input.GenericInput,System.TimeSpan,System.Int32)
  commentId: M:MLEM.Input.InputHandler.WasPressedForLess(MLEM.Input.GenericInput,System.TimeSpan,System.Int32)
  id: WasPressedForLess(MLEM.Input.GenericInput,System.TimeSpan,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: WasPressedForLess(GenericInput, TimeSpan, int)
  nameWithType: InputHandler.WasPressedForLess(GenericInput, TimeSpan, int)
  fullName: MLEM.Input.InputHandler.WasPressedForLess(MLEM.Input.GenericInput, System.TimeSpan, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: WasPressedForLess
    path: ../MLEM/Input/InputHandler.cs
    startLine: 648
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns if a given control of any kind was just let go this frame, and had been down for less than the given <code class="paramref">time</code> before that. Essentially, this action signifies a short press action.
  example: []
  syntax:
    content: public bool WasPressedForLess(GenericInput control, TimeSpan time, int index = -1)
    parameters:
    - id: control
      type: MLEM.Input.GenericInput
      description: The control whose pressed state to query.
    - id: time
      type: System.TimeSpan
      description: The maximum time that the control should have been down for.
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad.
    return:
      type: System.Boolean
      description: Whether the given control was pressed for less than the given time.
    content.vb: Public Function WasPressedForLess(control As GenericInput, time As TimeSpan, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.WasPressedForLess*
  nameWithType.vb: InputHandler.WasPressedForLess(GenericInput, TimeSpan, Integer)
  fullName.vb: MLEM.Input.InputHandler.WasPressedForLess(MLEM.Input.GenericInput, System.TimeSpan, Integer)
  name.vb: WasPressedForLess(GenericInput, TimeSpan, Integer)
- uid: MLEM.Input.InputHandler.WasPressedForLessAvailable(MLEM.Input.GenericInput,System.TimeSpan,System.Int32)
  commentId: M:MLEM.Input.InputHandler.WasPressedForLessAvailable(MLEM.Input.GenericInput,System.TimeSpan,System.Int32)
  id: WasPressedForLessAvailable(MLEM.Input.GenericInput,System.TimeSpan,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: WasPressedForLessAvailable(GenericInput, TimeSpan, int)
  nameWithType: InputHandler.WasPressedForLessAvailable(GenericInput, TimeSpan, int)
  fullName: MLEM.Input.InputHandler.WasPressedForLessAvailable(MLEM.Input.GenericInput, System.TimeSpan, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: WasPressedForLessAvailable
    path: ../MLEM/Input/InputHandler.cs
    startLine: 659
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns if a given control of any kind was just let go this frame, and had been down for less than the given <code class="paramref">time</code> before that, and if the press has not been consumed yet using <xref href="MLEM.Input.InputHandler.TryConsumePressedForLess(MLEM.Input.GenericInput%2cSystem.TimeSpan%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>. Essentially, this action signifies a short press action.
  example: []
  syntax:
    content: public bool WasPressedForLessAvailable(GenericInput control, TimeSpan time, int index = -1)
    parameters:
    - id: control
      type: MLEM.Input.GenericInput
      description: The control whose pressed state to query.
    - id: time
      type: System.TimeSpan
      description: The maximum time that the control should have been down for.
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad.
    return:
      type: System.Boolean
      description: Whether the given control was pressed for less than the given time, and the press has not been consumed yet.
    content.vb: Public Function WasPressedForLessAvailable(control As GenericInput, time As TimeSpan, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.WasPressedForLessAvailable*
  nameWithType.vb: InputHandler.WasPressedForLessAvailable(GenericInput, TimeSpan, Integer)
  fullName.vb: MLEM.Input.InputHandler.WasPressedForLessAvailable(MLEM.Input.GenericInput, System.TimeSpan, Integer)
  name.vb: WasPressedForLessAvailable(GenericInput, TimeSpan, Integer)
- uid: MLEM.Input.InputHandler.TryConsumePressedForLess(MLEM.Input.GenericInput,System.TimeSpan,System.Int32)
  commentId: M:MLEM.Input.InputHandler.TryConsumePressedForLess(MLEM.Input.GenericInput,System.TimeSpan,System.Int32)
  id: TryConsumePressedForLess(MLEM.Input.GenericInput,System.TimeSpan,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: TryConsumePressedForLess(GenericInput, TimeSpan, int)
  nameWithType: InputHandler.TryConsumePressedForLess(GenericInput, TimeSpan, int)
  fullName: MLEM.Input.InputHandler.TryConsumePressedForLess(MLEM.Input.GenericInput, System.TimeSpan, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TryConsumePressedForLess
    path: ../MLEM/Input/InputHandler.cs
    startLine: 670
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns if a given control of any kind was just let go this frame, and had been down for less than the given <code class="paramref">time</code> before that, and if the press has not been consumed yet using <xref href="MLEM.Input.InputHandler.TryConsumePressedForLess(MLEM.Input.GenericInput%2cSystem.TimeSpan%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>, and marks the press as consumed if it is. Essentially, this action signifies a short press action.
  example: []
  syntax:
    content: public bool TryConsumePressedForLess(GenericInput control, TimeSpan time, int index = -1)
    parameters:
    - id: control
      type: MLEM.Input.GenericInput
      description: The control whose pressed state to query.
    - id: time
      type: System.TimeSpan
      description: The maximum time that the control should have been down for.
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad.
    return:
      type: System.Boolean
      description: Whether the given control was pressed for less than the given time, and the press was successfully consumed.
    content.vb: Public Function TryConsumePressedForLess(control As GenericInput, time As TimeSpan, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.TryConsumePressedForLess*
  nameWithType.vb: InputHandler.TryConsumePressedForLess(GenericInput, TimeSpan, Integer)
  fullName.vb: MLEM.Input.InputHandler.TryConsumePressedForLess(MLEM.Input.GenericInput, System.TimeSpan, Integer)
  name.vb: TryConsumePressedForLess(GenericInput, TimeSpan, Integer)
- uid: MLEM.Input.InputHandler.IsAnyDown(MLEM.Input.GenericInput[])
  commentId: M:MLEM.Input.InputHandler.IsAnyDown(MLEM.Input.GenericInput[])
  id: IsAnyDown(MLEM.Input.GenericInput[])
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsAnyDown(params GenericInput[])
  nameWithType: InputHandler.IsAnyDown(params GenericInput[])
  fullName: MLEM.Input.InputHandler.IsAnyDown(params MLEM.Input.GenericInput[])
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsAnyDown
    path: ../MLEM/Input/InputHandler.cs
    startLine: 679
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns if a given control of any kind is down.

    This is a helper function that can be passed a <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Input.MouseButton" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool IsAnyDown(params GenericInput[] controls)
    parameters:
    - id: controls
      type: MLEM.Input.GenericInput[]
    return:
      type: System.Boolean
      description: Whether the given control is down
    content.vb: Public Function IsAnyDown(ParamArray controls As GenericInput()) As Boolean
  overload: MLEM.Input.InputHandler.IsAnyDown*
  nameWithType.vb: InputHandler.IsAnyDown(ParamArray GenericInput())
  fullName.vb: MLEM.Input.InputHandler.IsAnyDown(ParamArray MLEM.Input.GenericInput())
  name.vb: IsAnyDown(ParamArray GenericInput())
- uid: MLEM.Input.InputHandler.IsAnyUp(MLEM.Input.GenericInput[])
  commentId: M:MLEM.Input.InputHandler.IsAnyUp(MLEM.Input.GenericInput[])
  id: IsAnyUp(MLEM.Input.GenericInput[])
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsAnyUp(params GenericInput[])
  nameWithType: InputHandler.IsAnyUp(params GenericInput[])
  fullName: MLEM.Input.InputHandler.IsAnyUp(params MLEM.Input.GenericInput[])
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsAnyUp
    path: ../MLEM/Input/InputHandler.cs
    startLine: 688
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns if a given control of any kind is up.

    This is a helper function that can be passed a <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Input.MouseButton" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool IsAnyUp(params GenericInput[] controls)
    parameters:
    - id: controls
      type: MLEM.Input.GenericInput[]
    return:
      type: System.Boolean
      description: Whether the given control is up.
    content.vb: Public Function IsAnyUp(ParamArray controls As GenericInput()) As Boolean
  overload: MLEM.Input.InputHandler.IsAnyUp*
  nameWithType.vb: InputHandler.IsAnyUp(ParamArray GenericInput())
  fullName.vb: MLEM.Input.InputHandler.IsAnyUp(ParamArray MLEM.Input.GenericInput())
  name.vb: IsAnyUp(ParamArray GenericInput())
- uid: MLEM.Input.InputHandler.IsAnyPressed(MLEM.Input.GenericInput[])
  commentId: M:MLEM.Input.InputHandler.IsAnyPressed(MLEM.Input.GenericInput[])
  id: IsAnyPressed(MLEM.Input.GenericInput[])
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsAnyPressed(params GenericInput[])
  nameWithType: InputHandler.IsAnyPressed(params GenericInput[])
  fullName: MLEM.Input.InputHandler.IsAnyPressed(params MLEM.Input.GenericInput[])
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsAnyPressed
    path: ../MLEM/Input/InputHandler.cs
    startLine: 697
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns if a given control of any kind is pressed.

    If <xref href="MLEM.Input.InputHandler.HandleKeyboardRepeats" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Input.InputHandler.HandleGamepadRepeats" data-throw-if-not-resolved="false"></xref> are true, this method will also return true to signify a key or gamepad button repeat.

    An input is considered pressed if it was not down the last update call, but is down the current update call. If <xref href="MLEM.Input.InputHandler.InvertPressBehavior" data-throw-if-not-resolved="false"></xref> is true, this behavior is inverted.
  example: []
  syntax:
    content: public bool IsAnyPressed(params GenericInput[] controls)
    parameters:
    - id: controls
      type: MLEM.Input.GenericInput[]
    return:
      type: System.Boolean
      description: Whether the given control is pressed.
    content.vb: Public Function IsAnyPressed(ParamArray controls As GenericInput()) As Boolean
  overload: MLEM.Input.InputHandler.IsAnyPressed*
  nameWithType.vb: InputHandler.IsAnyPressed(ParamArray GenericInput())
  fullName.vb: MLEM.Input.InputHandler.IsAnyPressed(ParamArray MLEM.Input.GenericInput())
  name.vb: IsAnyPressed(ParamArray GenericInput())
- uid: MLEM.Input.InputHandler.IsAnyPressedAvailable(MLEM.Input.GenericInput[])
  commentId: M:MLEM.Input.InputHandler.IsAnyPressedAvailable(MLEM.Input.GenericInput[])
  id: IsAnyPressedAvailable(MLEM.Input.GenericInput[])
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsAnyPressedAvailable(params GenericInput[])
  nameWithType: InputHandler.IsAnyPressedAvailable(params GenericInput[])
  fullName: MLEM.Input.InputHandler.IsAnyPressedAvailable(params MLEM.Input.GenericInput[])
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsAnyPressedAvailable
    path: ../MLEM/Input/InputHandler.cs
    startLine: 706
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns if a given control of any kind is pressed, and if the press has not been consumed yet using <xref href="MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool IsAnyPressedAvailable(params GenericInput[] controls)
    parameters:
    - id: controls
      type: MLEM.Input.GenericInput[]
    return:
      type: System.Boolean
      description: Whether the given control is pressed and the press is not consumed yet.
    content.vb: Public Function IsAnyPressedAvailable(ParamArray controls As GenericInput()) As Boolean
  overload: MLEM.Input.InputHandler.IsAnyPressedAvailable*
  nameWithType.vb: InputHandler.IsAnyPressedAvailable(ParamArray GenericInput())
  fullName.vb: MLEM.Input.InputHandler.IsAnyPressedAvailable(ParamArray MLEM.Input.GenericInput())
  name.vb: IsAnyPressedAvailable(ParamArray GenericInput())
- uid: MLEM.Input.InputHandler.TryGetDownTime(MLEM.Input.GenericInput,System.TimeSpan@,System.Int32)
  commentId: M:MLEM.Input.InputHandler.TryGetDownTime(MLEM.Input.GenericInput,System.TimeSpan@,System.Int32)
  id: TryGetDownTime(MLEM.Input.GenericInput,System.TimeSpan@,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: TryGetDownTime(GenericInput, out TimeSpan, int)
  nameWithType: InputHandler.TryGetDownTime(GenericInput, out TimeSpan, int)
  fullName: MLEM.Input.InputHandler.TryGetDownTime(MLEM.Input.GenericInput, out System.TimeSpan, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TryGetDownTime
    path: ../MLEM/Input/InputHandler.cs
    startLine: 722
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Tries to retrieve the amount of time that a given <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref> has been held down for.

    If the input is currently down or has been down previously, this method returns true and the amount of time that it has currently or last been down for is stored in <code class="paramref">downTime</code>.
  example: []
  syntax:
    content: public bool TryGetDownTime(GenericInput input, out TimeSpan downTime, int index = -1)
    parameters:
    - id: input
      type: MLEM.Input.GenericInput
      description: The input whose down time to query.
    - id: downTime
      type: System.TimeSpan
      description: The resulting down time, or <xref href="System.TimeSpan.Zero" data-throw-if-not-resolved="false"></xref> if the input is not being held.
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad.
    return:
      type: System.Boolean
      description: Whether the input is currently being held.
    content.vb: Public Function TryGetDownTime(input As GenericInput, downTime As TimeSpan, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.TryGetDownTime*
  nameWithType.vb: InputHandler.TryGetDownTime(GenericInput, TimeSpan, Integer)
  fullName.vb: MLEM.Input.InputHandler.TryGetDownTime(MLEM.Input.GenericInput, System.TimeSpan, Integer)
  name.vb: TryGetDownTime(GenericInput, TimeSpan, Integer)
- uid: MLEM.Input.InputHandler.GetDownTime(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.GetDownTime(MLEM.Input.GenericInput,System.Int32)
  id: GetDownTime(MLEM.Input.GenericInput,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: GetDownTime(GenericInput, int)
  nameWithType: InputHandler.GetDownTime(GenericInput, int)
  fullName: MLEM.Input.InputHandler.GetDownTime(MLEM.Input.GenericInput, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetDownTime
    path: ../MLEM/Input/InputHandler.cs
    startLine: 740
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns the current or last amount of time that a given <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref> has been held down for.

    If this input isn't currently down and has not been down previously, this method returns <xref href="System.TimeSpan.Zero" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public TimeSpan GetDownTime(GenericInput input, int index = -1)
    parameters:
    - id: input
      type: MLEM.Input.GenericInput
      description: The input whose down time to query.
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad.
    return:
      type: System.TimeSpan
      description: The resulting down time, or <xref href="System.TimeSpan.Zero" data-throw-if-not-resolved="false"></xref> if the input is not being held.
    content.vb: Public Function GetDownTime(input As GenericInput, index As Integer = -1) As TimeSpan
  overload: MLEM.Input.InputHandler.GetDownTime*
  nameWithType.vb: InputHandler.GetDownTime(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.GetDownTime(MLEM.Input.GenericInput, Integer)
  name.vb: GetDownTime(GenericInput, Integer)
- uid: MLEM.Input.InputHandler.TryGetUpTime(MLEM.Input.GenericInput,System.TimeSpan@,System.Int32)
  commentId: M:MLEM.Input.InputHandler.TryGetUpTime(MLEM.Input.GenericInput,System.TimeSpan@,System.Int32)
  id: TryGetUpTime(MLEM.Input.GenericInput,System.TimeSpan@,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: TryGetUpTime(GenericInput, out TimeSpan, int)
  nameWithType: InputHandler.TryGetUpTime(GenericInput, out TimeSpan, int)
  fullName: MLEM.Input.InputHandler.TryGetUpTime(MLEM.Input.GenericInput, out System.TimeSpan, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TryGetUpTime
    path: ../MLEM/Input/InputHandler.cs
    startLine: 753
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Tries to retrieve the amount of time that a given <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref> has been up for since the last time it was down.

    If the input has previously been down, this method returns true and the amount of time that it has been up for is stored in <code class="paramref">upTime</code>.
  example: []
  syntax:
    content: public bool TryGetUpTime(GenericInput input, out TimeSpan upTime, int index = -1)
    parameters:
    - id: input
      type: MLEM.Input.GenericInput
      description: The input whose up time to query.
    - id: upTime
      type: System.TimeSpan
      description: The resulting up time, or <xref href="System.TimeSpan.Zero" data-throw-if-not-resolved="false"></xref> if the input is being held.
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad.
    return:
      type: System.Boolean
      description: Whether the input is currently up.
    content.vb: Public Function TryGetUpTime(input As GenericInput, upTime As TimeSpan, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.TryGetUpTime*
  nameWithType.vb: InputHandler.TryGetUpTime(GenericInput, TimeSpan, Integer)
  fullName.vb: MLEM.Input.InputHandler.TryGetUpTime(MLEM.Input.GenericInput, System.TimeSpan, Integer)
  name.vb: TryGetUpTime(GenericInput, TimeSpan, Integer)
- uid: MLEM.Input.InputHandler.GetUpTime(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.GetUpTime(MLEM.Input.GenericInput,System.Int32)
  id: GetUpTime(MLEM.Input.GenericInput,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: GetUpTime(GenericInput, int)
  nameWithType: InputHandler.GetUpTime(GenericInput, int)
  fullName: MLEM.Input.InputHandler.GetUpTime(MLEM.Input.GenericInput, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetUpTime
    path: ../MLEM/Input/InputHandler.cs
    startLine: 771
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns the amount of time that a given <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref> has last been up for since the last time it was down.

    If this input hasn't been down previously, this method returns <xref href="System.TimeSpan.Zero" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public TimeSpan GetUpTime(GenericInput input, int index = -1)
    parameters:
    - id: input
      type: MLEM.Input.GenericInput
      description: The input whose up time to query.
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad.
    return:
      type: System.TimeSpan
      description: The resulting up time, or <xref href="System.TimeSpan.Zero" data-throw-if-not-resolved="false"></xref> if the input is being held.
    content.vb: Public Function GetUpTime(input As GenericInput, index As Integer = -1) As TimeSpan
  overload: MLEM.Input.InputHandler.GetUpTime*
  nameWithType.vb: InputHandler.GetUpTime(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.GetUpTime(MLEM.Input.GenericInput, Integer)
  name.vb: GetUpTime(GenericInput, Integer)
- uid: MLEM.Input.InputHandler.TryGetTimeSincePress(MLEM.Input.GenericInput,System.TimeSpan@,System.Int32)
  commentId: M:MLEM.Input.InputHandler.TryGetTimeSincePress(MLEM.Input.GenericInput,System.TimeSpan@,System.Int32)
  id: TryGetTimeSincePress(MLEM.Input.GenericInput,System.TimeSpan@,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: TryGetTimeSincePress(GenericInput, out TimeSpan, int)
  nameWithType: InputHandler.TryGetTimeSincePress(GenericInput, out TimeSpan, int)
  fullName: MLEM.Input.InputHandler.TryGetTimeSincePress(MLEM.Input.GenericInput, out System.TimeSpan, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: TryGetTimeSincePress
    path: ../MLEM/Input/InputHandler.cs
    startLine: 784
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Tries to retrieve the amount of time that has passed since a given <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref> last counted as pressed.

    If the input has previously been pressed, or is currently pressed, this method returns true and the amount of time that has passed since it was last pressed is stored in <code class="paramref">lastPressTime</code>.
  example: []
  syntax:
    content: public bool TryGetTimeSincePress(GenericInput input, out TimeSpan lastPressTime, int index = -1)
    parameters:
    - id: input
      type: MLEM.Input.GenericInput
      description: The input whose last press time to query.
    - id: lastPressTime
      type: System.TimeSpan
      description: The resulting up time, or <xref href="System.TimeSpan.Zero" data-throw-if-not-resolved="false"></xref> if the input was never pressed or is currently pressed.
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the input has previously been pressed or is currently pressed, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> otherwise.
    content.vb: Public Function TryGetTimeSincePress(input As GenericInput, lastPressTime As TimeSpan, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.TryGetTimeSincePress*
  nameWithType.vb: InputHandler.TryGetTimeSincePress(GenericInput, TimeSpan, Integer)
  fullName.vb: MLEM.Input.InputHandler.TryGetTimeSincePress(MLEM.Input.GenericInput, System.TimeSpan, Integer)
  name.vb: TryGetTimeSincePress(GenericInput, TimeSpan, Integer)
- uid: MLEM.Input.InputHandler.GetTimeSincePress(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.GetTimeSincePress(MLEM.Input.GenericInput,System.Int32)
  id: GetTimeSincePress(MLEM.Input.GenericInput,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: GetTimeSincePress(GenericInput, int)
  nameWithType: InputHandler.GetTimeSincePress(GenericInput, int)
  fullName: MLEM.Input.InputHandler.GetTimeSincePress(MLEM.Input.GenericInput, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetTimeSincePress
    path: ../MLEM/Input/InputHandler.cs
    startLine: 800
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns the amount of time that has passed since a given <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref> last counted as pressed.

    If this input hasn't been pressed previously, this method returns <xref href="System.TimeSpan.Zero" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public TimeSpan GetTimeSincePress(GenericInput input, int index = -1)
    parameters:
    - id: input
      type: MLEM.Input.GenericInput
      description: The input whose up time to query.
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad.
    return:
      type: System.TimeSpan
      description: The resulting up time, or <xref href="System.TimeSpan.Zero" data-throw-if-not-resolved="false"></xref> if the input has never been pressed, or is currently pressed.
    content.vb: Public Function GetTimeSincePress(input As GenericInput, index As Integer = -1) As TimeSpan
  overload: MLEM.Input.InputHandler.GetTimeSincePress*
  nameWithType.vb: InputHandler.GetTimeSincePress(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.GetTimeSincePress(MLEM.Input.GenericInput, Integer)
  name.vb: GetTimeSincePress(GenericInput, Integer)
- uid: MLEM.Input.InputHandler.IsPressConsumed(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsPressConsumed(MLEM.Input.GenericInput,System.Int32)
  id: IsPressConsumed(MLEM.Input.GenericInput,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsPressConsumed(GenericInput, int)
  nameWithType: InputHandler.IsPressConsumed(GenericInput, int)
  fullName: MLEM.Input.InputHandler.IsPressConsumed(MLEM.Input.GenericInput, int)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: IsPressConsumed
    path: ../MLEM/Input/InputHandler.cs
    startLine: 812
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Returns whether the given <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref>'s press state has been consumed using <xref href="MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.

    If an input has been consumed, <xref href="MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> and <xref href="MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> will always return false for that input.
  example: []
  syntax:
    content: public bool IsPressConsumed(GenericInput input, int index = -1)
    parameters:
    - id: input
      type: MLEM.Input.GenericInput
      description: The input to query.
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad.
    return:
      type: System.Boolean
      description: Whether a press has been consumed for the given input.
    content.vb: Public Function IsPressConsumed(input As GenericInput, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.IsPressConsumed*
  nameWithType.vb: InputHandler.IsPressConsumed(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.IsPressConsumed(MLEM.Input.GenericInput, Integer)
  name.vb: IsPressConsumed(GenericInput, Integer)
- uid: MLEM.Input.InputHandler.EnableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  commentId: M:MLEM.Input.InputHandler.EnableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  id: EnableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: EnableGestures(params GestureType[])
  nameWithType: InputHandler.EnableGestures(params GestureType[])
  fullName: MLEM.Input.InputHandler.EnableGestures(params Microsoft.Xna.Framework.Input.Touch.GestureType[])
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: EnableGestures
    path: ../MLEM/Input/InputHandler.cs
    startLine: 825
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Helper function to enable gestures for a <xref href="Microsoft.Xna.Framework.Input.Touch.TouchPanel" data-throw-if-not-resolved="false"></xref> easily.

    Note that, if other gestures were previously enabled, they will not get overridden.
  example: []
  syntax:
    content: public static void EnableGestures(params GestureType[] gestures)
    parameters:
    - id: gestures
      type: Microsoft.Xna.Framework.Input.Touch.GestureType[]
      description: The gestures to enable
    content.vb: Public Shared Sub EnableGestures(ParamArray gestures As GestureType())
  overload: MLEM.Input.InputHandler.EnableGestures*
  nameWithType.vb: InputHandler.EnableGestures(ParamArray GestureType())
  fullName.vb: MLEM.Input.InputHandler.EnableGestures(ParamArray Microsoft.Xna.Framework.Input.Touch.GestureType())
  name.vb: EnableGestures(ParamArray GestureType())
- uid: MLEM.Input.InputHandler.DisableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  commentId: M:MLEM.Input.InputHandler.DisableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  id: DisableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: DisableGestures(params GestureType[])
  nameWithType: InputHandler.DisableGestures(params GestureType[])
  fullName: MLEM.Input.InputHandler.DisableGestures(params Microsoft.Xna.Framework.Input.Touch.GestureType[])
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: DisableGestures
    path: ../MLEM/Input/InputHandler.cs
    startLine: 834
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Helper function to disable gestures for a <xref href="Microsoft.Xna.Framework.Input.Touch.TouchPanel" data-throw-if-not-resolved="false"></xref> easily.
  example: []
  syntax:
    content: public static void DisableGestures(params GestureType[] gestures)
    parameters:
    - id: gestures
      type: Microsoft.Xna.Framework.Input.Touch.GestureType[]
      description: The gestures to disable
    content.vb: Public Shared Sub DisableGestures(ParamArray gestures As GestureType())
  overload: MLEM.Input.InputHandler.DisableGestures*
  nameWithType.vb: InputHandler.DisableGestures(ParamArray GestureType())
  fullName.vb: MLEM.Input.InputHandler.DisableGestures(ParamArray Microsoft.Xna.Framework.Input.Touch.GestureType())
  name.vb: DisableGestures(ParamArray GestureType())
- uid: MLEM.Input.InputHandler.SetGesturesEnabled(System.Boolean,Microsoft.Xna.Framework.Input.Touch.GestureType[])
  commentId: M:MLEM.Input.InputHandler.SetGesturesEnabled(System.Boolean,Microsoft.Xna.Framework.Input.Touch.GestureType[])
  id: SetGesturesEnabled(System.Boolean,Microsoft.Xna.Framework.Input.Touch.GestureType[])
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: SetGesturesEnabled(bool, params GestureType[])
  nameWithType: InputHandler.SetGesturesEnabled(bool, params GestureType[])
  fullName: MLEM.Input.InputHandler.SetGesturesEnabled(bool, params Microsoft.Xna.Framework.Input.Touch.GestureType[])
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: SetGesturesEnabled
    path: ../MLEM/Input/InputHandler.cs
    startLine: 846
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Helper function to enable or disable the given gestures for a <xref href="Microsoft.Xna.Framework.Input.Touch.TouchPanel" data-throw-if-not-resolved="false"></xref> easily.

    This method is equivalent to calling <xref href="MLEM.Input.InputHandler.EnableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType%5b%5d)" data-throw-if-not-resolved="false"></xref> if the <code>enabled</code> value is true and calling <xref href="MLEM.Input.InputHandler.DisableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType%5b%5d)" data-throw-if-not-resolved="false"></xref> if it is false.

    Note that, if other gestures were previously enabled, they will not get overridden.
  example: []
  syntax:
    content: public static void SetGesturesEnabled(bool enabled, params GestureType[] gestures)
    parameters:
    - id: enabled
      type: System.Boolean
      description: Whether to enable or disable the gestures
    - id: gestures
      type: Microsoft.Xna.Framework.Input.Touch.GestureType[]
      description: The gestures to enable or disable
    content.vb: Public Shared Sub SetGesturesEnabled(enabled As Boolean, ParamArray gestures As GestureType())
  overload: MLEM.Input.InputHandler.SetGesturesEnabled*
  nameWithType.vb: InputHandler.SetGesturesEnabled(Boolean, ParamArray GestureType())
  fullName.vb: MLEM.Input.InputHandler.SetGesturesEnabled(Boolean, ParamArray Microsoft.Xna.Framework.Input.Touch.GestureType())
  name.vb: SetGesturesEnabled(Boolean, ParamArray GestureType())
references:
- uid: MLEM.Input.GenericInput
  commentId: T:MLEM.Input.GenericInput
  parent: MLEM.Input
  href: MLEM.Input.GenericInput.html
  name: GenericInput
  nameWithType: GenericInput
  fullName: MLEM.Input.GenericInput
- uid: MLEM.Input
  commentId: N:MLEM.Input
  href: MLEM.html
  name: MLEM.Input
  nameWithType: MLEM.Input
  fullName: MLEM.Input
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Input
    name: Input
    href: MLEM.Input.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Input
    name: Input
    href: MLEM.Input.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Microsoft.Xna.Framework.GameComponent
  commentId: T:Microsoft.Xna.Framework.GameComponent
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameComponent
  nameWithType: GameComponent
  fullName: Microsoft.Xna.Framework.GameComponent
- uid: Microsoft.Xna.Framework.IGameComponent
  commentId: T:Microsoft.Xna.Framework.IGameComponent
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: IGameComponent
  nameWithType: IGameComponent
  fullName: Microsoft.Xna.Framework.IGameComponent
- uid: Microsoft.Xna.Framework.IUpdateable
  commentId: T:Microsoft.Xna.Framework.IUpdateable
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Microsoft.Xna.Framework.IUpdateable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Microsoft.Xna.Framework.GameComponent.Initialize
  commentId: M:Microsoft.Xna.Framework.GameComponent.Initialize
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: Initialize()
  nameWithType: GameComponent.Initialize()
  fullName: Microsoft.Xna.Framework.GameComponent.Initialize()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.GameComponent.Initialize
    name: Initialize
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.GameComponent.Initialize
    name: Initialize
    isExternal: true
  - name: (
  - name: )
- uid: Microsoft.Xna.Framework.GameComponent.OnUpdateOrderChanged(System.Object,System.EventArgs)
  commentId: M:Microsoft.Xna.Framework.GameComponent.OnUpdateOrderChanged(System.Object,System.EventArgs)
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: OnUpdateOrderChanged(object, EventArgs)
  nameWithType: GameComponent.OnUpdateOrderChanged(object, EventArgs)
  fullName: Microsoft.Xna.Framework.GameComponent.OnUpdateOrderChanged(object, System.EventArgs)
  nameWithType.vb: GameComponent.OnUpdateOrderChanged(Object, EventArgs)
  fullName.vb: Microsoft.Xna.Framework.GameComponent.OnUpdateOrderChanged(Object, System.EventArgs)
  name.vb: OnUpdateOrderChanged(Object, EventArgs)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.GameComponent.OnUpdateOrderChanged(System.Object,System.EventArgs)
    name: OnUpdateOrderChanged
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.EventArgs
    name: EventArgs
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventargs
  - name: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.GameComponent.OnUpdateOrderChanged(System.Object,System.EventArgs)
    name: OnUpdateOrderChanged
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.EventArgs
    name: EventArgs
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventargs
  - name: )
- uid: Microsoft.Xna.Framework.GameComponent.OnEnabledChanged(System.Object,System.EventArgs)
  commentId: M:Microsoft.Xna.Framework.GameComponent.OnEnabledChanged(System.Object,System.EventArgs)
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: OnEnabledChanged(object, EventArgs)
  nameWithType: GameComponent.OnEnabledChanged(object, EventArgs)
  fullName: Microsoft.Xna.Framework.GameComponent.OnEnabledChanged(object, System.EventArgs)
  nameWithType.vb: GameComponent.OnEnabledChanged(Object, EventArgs)
  fullName.vb: Microsoft.Xna.Framework.GameComponent.OnEnabledChanged(Object, System.EventArgs)
  name.vb: OnEnabledChanged(Object, EventArgs)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.GameComponent.OnEnabledChanged(System.Object,System.EventArgs)
    name: OnEnabledChanged
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.EventArgs
    name: EventArgs
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventargs
  - name: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.GameComponent.OnEnabledChanged(System.Object,System.EventArgs)
    name: OnEnabledChanged
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.EventArgs
    name: EventArgs
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventargs
  - name: )
- uid: Microsoft.Xna.Framework.GameComponent.Dispose(System.Boolean)
  commentId: M:Microsoft.Xna.Framework.GameComponent.Dispose(System.Boolean)
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: Dispose(bool)
  nameWithType: GameComponent.Dispose(bool)
  fullName: Microsoft.Xna.Framework.GameComponent.Dispose(bool)
  nameWithType.vb: GameComponent.Dispose(Boolean)
  fullName.vb: Microsoft.Xna.Framework.GameComponent.Dispose(Boolean)
  name.vb: Dispose(Boolean)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.GameComponent.Dispose(System.Boolean)
    name: Dispose
    isExternal: true
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.GameComponent.Dispose(System.Boolean)
    name: Dispose
    isExternal: true
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Microsoft.Xna.Framework.GameComponent.Dispose
  commentId: M:Microsoft.Xna.Framework.GameComponent.Dispose
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: Dispose()
  nameWithType: GameComponent.Dispose()
  fullName: Microsoft.Xna.Framework.GameComponent.Dispose()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.GameComponent.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.GameComponent.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
- uid: Microsoft.Xna.Framework.GameComponent.Game
  commentId: P:Microsoft.Xna.Framework.GameComponent.Game
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: Game
  nameWithType: GameComponent.Game
  fullName: Microsoft.Xna.Framework.GameComponent.Game
- uid: Microsoft.Xna.Framework.GameComponent.Enabled
  commentId: P:Microsoft.Xna.Framework.GameComponent.Enabled
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: Enabled
  nameWithType: GameComponent.Enabled
  fullName: Microsoft.Xna.Framework.GameComponent.Enabled
- uid: Microsoft.Xna.Framework.GameComponent.UpdateOrder
  commentId: P:Microsoft.Xna.Framework.GameComponent.UpdateOrder
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: UpdateOrder
  nameWithType: GameComponent.UpdateOrder
  fullName: Microsoft.Xna.Framework.GameComponent.UpdateOrder
- uid: Microsoft.Xna.Framework.GameComponent.EnabledChanged
  commentId: E:Microsoft.Xna.Framework.GameComponent.EnabledChanged
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: EnabledChanged
  nameWithType: GameComponent.EnabledChanged
  fullName: Microsoft.Xna.Framework.GameComponent.EnabledChanged
- uid: Microsoft.Xna.Framework.GameComponent.UpdateOrderChanged
  commentId: E:Microsoft.Xna.Framework.GameComponent.UpdateOrderChanged
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: UpdateOrderChanged
  nameWithType: GameComponent.UpdateOrderChanged
  fullName: Microsoft.Xna.Framework.GameComponent.UpdateOrderChanged
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: Microsoft.Xna.Framework.Input.Buttons
  commentId: T:Microsoft.Xna.Framework.Input.Buttons
  parent: Microsoft.Xna.Framework.Input
  isExternal: true
  name: Buttons
  nameWithType: Buttons
  fullName: Microsoft.Xna.Framework.Input.Buttons
- uid: Microsoft.Xna.Framework.Input.Buttons[]
  isExternal: true
  name: Buttons[]
  nameWithType: Buttons[]
  fullName: Microsoft.Xna.Framework.Input.Buttons[]
  nameWithType.vb: Buttons()
  fullName.vb: Microsoft.Xna.Framework.Input.Buttons()
  name.vb: Buttons()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Input.Buttons
    name: Buttons
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Input.Buttons
    name: Buttons
    isExternal: true
  - name: (
  - name: )
- uid: Microsoft.Xna.Framework.Input
  commentId: N:Microsoft.Xna.Framework.Input
  isExternal: true
  name: Microsoft.Xna.Framework.Input
  nameWithType: Microsoft.Xna.Framework.Input
  fullName: Microsoft.Xna.Framework.Input
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Input
    name: Input
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Input
    name: Input
    isExternal: true
- uid: Microsoft.Xna.Framework.Input.Keys
  commentId: T:Microsoft.Xna.Framework.Input.Keys
  parent: Microsoft.Xna.Framework.Input
  isExternal: true
  name: Keys
  nameWithType: Keys
  fullName: Microsoft.Xna.Framework.Input.Keys
- uid: Microsoft.Xna.Framework.Input.Keys[]
  isExternal: true
  name: Keys[]
  nameWithType: Keys[]
  fullName: Microsoft.Xna.Framework.Input.Keys[]
  nameWithType.vb: Keys()
  fullName.vb: Microsoft.Xna.Framework.Input.Keys()
  name.vb: Keys()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Input.Keys
    name: Keys
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Input.Keys
    name: Keys
    isExternal: true
  - name: (
  - name: )
- uid: MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  commentId: M:MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_GetGesture_Microsoft_Xna_Framework_Input_Touch_GestureType_Microsoft_Xna_Framework_Input_Touch_GestureSample__
  name: GetGesture(GestureType, out GestureSample)
  nameWithType: InputHandler.GetGesture(GestureType, out GestureSample)
  fullName: MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType, out Microsoft.Xna.Framework.Input.Touch.GestureSample)
  nameWithType.vb: InputHandler.GetGesture(GestureType, GestureSample)
  fullName.vb: MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType, Microsoft.Xna.Framework.Input.Touch.GestureSample)
  name.vb: GetGesture(GestureType, GestureSample)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
    name: GetGesture
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_GetGesture_Microsoft_Xna_Framework_Input_Touch_GestureType_Microsoft_Xna_Framework_Input_Touch_GestureSample__
  - name: (
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureType
    name: GestureType
    isExternal: true
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureSample
    name: GestureSample
    isExternal: true
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
    name: GetGesture
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_GetGesture_Microsoft_Xna_Framework_Input_Touch_GestureType_Microsoft_Xna_Framework_Input_Touch_GestureSample__
  - name: (
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureType
    name: GestureType
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureSample
    name: GestureSample
    isExternal: true
  - name: )
- uid: MLEM.Input.InputHandler.GetViewportGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  commentId: M:MLEM.Input.InputHandler.GetViewportGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_GetViewportGesture_Microsoft_Xna_Framework_Input_Touch_GestureType_Microsoft_Xna_Framework_Input_Touch_GestureSample__
  name: GetViewportGesture(GestureType, out GestureSample)
  nameWithType: InputHandler.GetViewportGesture(GestureType, out GestureSample)
  fullName: MLEM.Input.InputHandler.GetViewportGesture(Microsoft.Xna.Framework.Input.Touch.GestureType, out Microsoft.Xna.Framework.Input.Touch.GestureSample)
  nameWithType.vb: InputHandler.GetViewportGesture(GestureType, GestureSample)
  fullName.vb: MLEM.Input.InputHandler.GetViewportGesture(Microsoft.Xna.Framework.Input.Touch.GestureType, Microsoft.Xna.Framework.Input.Touch.GestureSample)
  name.vb: GetViewportGesture(GestureType, GestureSample)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.GetViewportGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
    name: GetViewportGesture
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_GetViewportGesture_Microsoft_Xna_Framework_Input_Touch_GestureType_Microsoft_Xna_Framework_Input_Touch_GestureSample__
  - name: (
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureType
    name: GestureType
    isExternal: true
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureSample
    name: GestureSample
    isExternal: true
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.GetViewportGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
    name: GetViewportGesture
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_GetViewportGesture_Microsoft_Xna_Framework_Input_Touch_GestureType_Microsoft_Xna_Framework_Input_Touch_GestureSample__
  - name: (
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureType
    name: GestureType
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureSample
    name: GestureSample
    isExternal: true
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Xna.Framework.Input.Touch.GestureSample}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Xna.Framework.Input.Touch.GestureSample}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  name: ReadOnlyCollection<GestureSample>
  nameWithType: ReadOnlyCollection<GestureSample>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Input.Touch.GestureSample>
  nameWithType.vb: ReadOnlyCollection(Of GestureSample)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of Microsoft.Xna.Framework.Input.Touch.GestureSample)
  name.vb: ReadOnlyCollection(Of GestureSample)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  - name: <
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureSample
    name: GestureSample
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureSample
    name: GestureSample
    isExternal: true
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: MLEM.Input.InputHandler.KeyRepeatRate
  commentId: F:MLEM.Input.InputHandler.KeyRepeatRate
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_KeyRepeatRate
  name: KeyRepeatRate
  nameWithType: InputHandler.KeyRepeatRate
  fullName: MLEM.Input.InputHandler.KeyRepeatRate
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: MLEM.Input.InputHandler.KeyRepeatDelay
  commentId: F:MLEM.Input.InputHandler.KeyRepeatDelay
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_KeyRepeatDelay
  name: KeyRepeatDelay
  nameWithType: InputHandler.KeyRepeatDelay
  fullName: MLEM.Input.InputHandler.KeyRepeatDelay
- uid: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsDown_MLEM_Input_GenericInput_System_Int32_
  name: IsDown(GenericInput, int)
  nameWithType: InputHandler.IsDown(GenericInput, int)
  fullName: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput, int)
  nameWithType.vb: InputHandler.IsDown(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput, Integer)
  name.vb: IsDown(GenericInput, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput,System.Int32)
    name: IsDown
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsDown_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.IsDown(MLEM.Input.GenericInput,System.Int32)
    name: IsDown
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsDown_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressed_MLEM_Input_GenericInput_System_Int32_
  name: IsPressed(GenericInput, int)
  nameWithType: InputHandler.IsPressed(GenericInput, int)
  fullName: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput, int)
  nameWithType.vb: InputHandler.IsPressed(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput, Integer)
  name.vb: IsPressed(GenericInput, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput,System.Int32)
    name: IsPressed
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressed_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.IsPressed(MLEM.Input.GenericInput,System.Int32)
    name: IsPressed
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressed_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.GamepadExtensions.GetAnalogValue(Microsoft.Xna.Framework.Input.GamePadState,Microsoft.Xna.Framework.Input.Buttons)
  commentId: M:MLEM.Input.GamepadExtensions.GetAnalogValue(Microsoft.Xna.Framework.Input.GamePadState,Microsoft.Xna.Framework.Input.Buttons)
  isExternal: true
  href: MLEM.Input.GamepadExtensions.html#MLEM_Input_GamepadExtensions_GetAnalogValue_Microsoft_Xna_Framework_Input_GamePadState_Microsoft_Xna_Framework_Input_Buttons_
  name: GetAnalogValue(GamePadState, Buttons)
  nameWithType: GamepadExtensions.GetAnalogValue(GamePadState, Buttons)
  fullName: MLEM.Input.GamepadExtensions.GetAnalogValue(Microsoft.Xna.Framework.Input.GamePadState, Microsoft.Xna.Framework.Input.Buttons)
  spec.csharp:
  - uid: MLEM.Input.GamepadExtensions.GetAnalogValue(Microsoft.Xna.Framework.Input.GamePadState,Microsoft.Xna.Framework.Input.Buttons)
    name: GetAnalogValue
    href: MLEM.Input.GamepadExtensions.html#MLEM_Input_GamepadExtensions_GetAnalogValue_Microsoft_Xna_Framework_Input_GamePadState_Microsoft_Xna_Framework_Input_Buttons_
  - name: (
  - uid: Microsoft.Xna.Framework.Input.GamePadState
    name: GamePadState
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Input.Buttons
    name: Buttons
    isExternal: true
  - name: )
  spec.vb:
  - uid: MLEM.Input.GamepadExtensions.GetAnalogValue(Microsoft.Xna.Framework.Input.GamePadState,Microsoft.Xna.Framework.Input.Buttons)
    name: GetAnalogValue
    href: MLEM.Input.GamepadExtensions.html#MLEM_Input_GamepadExtensions_GetAnalogValue_Microsoft_Xna_Framework_Input_GamePadState_Microsoft_Xna_Framework_Input_Buttons_
  - name: (
  - uid: Microsoft.Xna.Framework.Input.GamePadState
    name: GamePadState
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Input.Buttons
    name: Buttons
    isExternal: true
  - name: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Microsoft.Xna.Framework.Input.Touch.GestureSample
  commentId: T:Microsoft.Xna.Framework.Input.Touch.GestureSample
  parent: Microsoft.Xna.Framework.Input.Touch
  isExternal: true
  name: GestureSample
  nameWithType: GestureSample
  fullName: Microsoft.Xna.Framework.Input.Touch.GestureSample
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel
  commentId: T:Microsoft.Xna.Framework.Input.Touch.TouchPanel
  isExternal: true
  name: TouchPanel
  nameWithType: TouchPanel
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchPanel
- uid: MLEM.Input.InputHandler.Gestures
  commentId: F:MLEM.Input.InputHandler.Gestures
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_Gestures
  name: Gestures
  nameWithType: InputHandler.Gestures
  fullName: MLEM.Input.InputHandler.Gestures
- uid: MLEM.Input.InputHandler.AddExternalGesture(Microsoft.Xna.Framework.Input.Touch.GestureSample)
  commentId: M:MLEM.Input.InputHandler.AddExternalGesture(Microsoft.Xna.Framework.Input.Touch.GestureSample)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_AddExternalGesture_Microsoft_Xna_Framework_Input_Touch_GestureSample_
  name: AddExternalGesture(GestureSample)
  nameWithType: InputHandler.AddExternalGesture(GestureSample)
  fullName: MLEM.Input.InputHandler.AddExternalGesture(Microsoft.Xna.Framework.Input.Touch.GestureSample)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.AddExternalGesture(Microsoft.Xna.Framework.Input.Touch.GestureSample)
    name: AddExternalGesture
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_AddExternalGesture_Microsoft_Xna_Framework_Input_Touch_GestureSample_
  - name: (
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureSample
    name: GestureSample
    isExternal: true
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.AddExternalGesture(Microsoft.Xna.Framework.Input.Touch.GestureSample)
    name: AddExternalGesture
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_AddExternalGesture_Microsoft_Xna_Framework_Input_Touch_GestureSample_
  - name: (
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureSample
    name: GestureSample
    isExternal: true
  - name: )
- uid: Microsoft.Xna.Framework.Input.Touch
  commentId: N:Microsoft.Xna.Framework.Input.Touch
  isExternal: true
  name: Microsoft.Xna.Framework.Input.Touch
  nameWithType: Microsoft.Xna.Framework.Input.Touch
  fullName: Microsoft.Xna.Framework.Input.Touch
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Input
    name: Input
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Input.Touch
    name: Touch
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Input
    name: Input
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Input.Touch
    name: Touch
    isExternal: true
- uid: MLEM.Input.MouseButton
  commentId: T:MLEM.Input.MouseButton
  parent: MLEM.Input
  href: MLEM.Input.MouseButton.html
  name: MouseButton
  nameWithType: MouseButton
  fullName: MLEM.Input.MouseButton
- uid: MLEM.Input.InputHandler.TryGetDownTime(MLEM.Input.GenericInput,System.TimeSpan@,System.Int32)
  commentId: M:MLEM.Input.InputHandler.TryGetDownTime(MLEM.Input.GenericInput,System.TimeSpan@,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryGetDownTime_MLEM_Input_GenericInput_System_TimeSpan__System_Int32_
  name: TryGetDownTime(GenericInput, out TimeSpan, int)
  nameWithType: InputHandler.TryGetDownTime(GenericInput, out TimeSpan, int)
  fullName: MLEM.Input.InputHandler.TryGetDownTime(MLEM.Input.GenericInput, out System.TimeSpan, int)
  nameWithType.vb: InputHandler.TryGetDownTime(GenericInput, TimeSpan, Integer)
  fullName.vb: MLEM.Input.InputHandler.TryGetDownTime(MLEM.Input.GenericInput, System.TimeSpan, Integer)
  name.vb: TryGetDownTime(GenericInput, TimeSpan, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.TryGetDownTime(MLEM.Input.GenericInput,System.TimeSpan@,System.Int32)
    name: TryGetDownTime
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryGetDownTime_MLEM_Input_GenericInput_System_TimeSpan__System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.TryGetDownTime(MLEM.Input.GenericInput,System.TimeSpan@,System.Int32)
    name: TryGetDownTime
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryGetDownTime_MLEM_Input_GenericInput_System_TimeSpan__System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.InputHandler.GetDownTime(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.GetDownTime(MLEM.Input.GenericInput,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_GetDownTime_MLEM_Input_GenericInput_System_Int32_
  name: GetDownTime(GenericInput, int)
  nameWithType: InputHandler.GetDownTime(GenericInput, int)
  fullName: MLEM.Input.InputHandler.GetDownTime(MLEM.Input.GenericInput, int)
  nameWithType.vb: InputHandler.GetDownTime(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.GetDownTime(MLEM.Input.GenericInput, Integer)
  name.vb: GetDownTime(GenericInput, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.GetDownTime(MLEM.Input.GenericInput,System.Int32)
    name: GetDownTime
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_GetDownTime_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.GetDownTime(MLEM.Input.GenericInput,System.Int32)
    name: GetDownTime
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_GetDownTime_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.InputHandler.InputsDown*
  commentId: Overload:MLEM.Input.InputHandler.InputsDown
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_InputsDown
  name: InputsDown
  nameWithType: InputHandler.InputsDown
  fullName: MLEM.Input.InputHandler.InputsDown
- uid: MLEM.Input.GenericInput[]
  isExternal: true
  href: MLEM.Input.GenericInput.html
  name: GenericInput[]
  nameWithType: GenericInput[]
  fullName: MLEM.Input.GenericInput[]
  nameWithType.vb: GenericInput()
  fullName.vb: MLEM.Input.GenericInput()
  name.vb: GenericInput()
  spec.csharp:
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: (
  - name: )
- uid: MLEM.Input.InputHandler.InputsPressed*
  commentId: Overload:MLEM.Input.InputHandler.InputsPressed
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_InputsPressed
  name: InputsPressed
  nameWithType: InputHandler.InputsPressed
  fullName: MLEM.Input.InputHandler.InputsPressed
- uid: MLEM.Input.InputHandler.LastTouchState*
  commentId: Overload:MLEM.Input.InputHandler.LastTouchState
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_LastTouchState
  name: LastTouchState
  nameWithType: InputHandler.LastTouchState
  fullName: MLEM.Input.InputHandler.LastTouchState
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  commentId: T:Microsoft.Xna.Framework.Input.Touch.TouchCollection
  parent: Microsoft.Xna.Framework.Input.Touch
  isExternal: true
  name: TouchCollection
  nameWithType: TouchCollection
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection
- uid: MLEM.Input.InputHandler.TouchState*
  commentId: Overload:MLEM.Input.InputHandler.TouchState
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TouchState
  name: TouchState
  nameWithType: InputHandler.TouchState
  fullName: MLEM.Input.InputHandler.TouchState
- uid: MLEM.Input.InputHandler.LastTouchState
  commentId: P:MLEM.Input.InputHandler.LastTouchState
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_LastTouchState
  name: LastTouchState
  nameWithType: InputHandler.LastTouchState
  fullName: MLEM.Input.InputHandler.LastTouchState
- uid: Microsoft.Xna.Framework.Graphics.GraphicsDevice.Viewport
  commentId: P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Viewport
  isExternal: true
  name: Viewport
  nameWithType: GraphicsDevice.Viewport
  fullName: Microsoft.Xna.Framework.Graphics.GraphicsDevice.Viewport
- uid: MLEM.Input.InputHandler.LastViewportTouchState*
  commentId: Overload:MLEM.Input.InputHandler.LastViewportTouchState
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_LastViewportTouchState
  name: LastViewportTouchState
  nameWithType: InputHandler.LastViewportTouchState
  fullName: MLEM.Input.InputHandler.LastViewportTouchState
- uid: System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  commentId: T:System.Collections.Generic.IList{Microsoft.Xna.Framework.Input.Touch.TouchLocation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<TouchLocation>
  nameWithType: IList<TouchLocation>
  fullName: System.Collections.Generic.IList<Microsoft.Xna.Framework.Input.Touch.TouchLocation>
  nameWithType.vb: IList(Of TouchLocation)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Xna.Framework.Input.Touch.TouchLocation)
  name.vb: IList(Of TouchLocation)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Xna.Framework.Input.Touch.TouchLocation
    name: TouchLocation
    isExternal: true
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: MLEM.Input.InputHandler.TouchState
  commentId: P:MLEM.Input.InputHandler.TouchState
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TouchState
  name: TouchState
  nameWithType: InputHandler.TouchState
  fullName: MLEM.Input.InputHandler.TouchState
- uid: MLEM.Input.InputHandler.ViewportTouchState*
  commentId: Overload:MLEM.Input.InputHandler.ViewportTouchState
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_ViewportTouchState
  name: ViewportTouchState
  nameWithType: InputHandler.ViewportTouchState
  fullName: MLEM.Input.InputHandler.ViewportTouchState
- uid: MLEM.Input.InputHandler.HandleGamepads
  commentId: F:MLEM.Input.InputHandler.HandleGamepads
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_HandleGamepads
  name: HandleGamepads
  nameWithType: InputHandler.HandleGamepads
  fullName: MLEM.Input.InputHandler.HandleGamepads
- uid: MLEM.Input.InputHandler.Update
  commentId: M:MLEM.Input.InputHandler.Update
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_Update
  name: Update()
  nameWithType: InputHandler.Update()
  fullName: MLEM.Input.InputHandler.Update()
  spec.csharp:
  - uid: MLEM.Input.InputHandler.Update
    name: Update
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_Update
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.Update
    name: Update
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_Update
  - name: (
  - name: )
- uid: MLEM.Input.InputHandler.ConnectedGamepads*
  commentId: Overload:MLEM.Input.InputHandler.ConnectedGamepads
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_ConnectedGamepads
  name: ConnectedGamepads
  nameWithType: InputHandler.ConnectedGamepads
  fullName: MLEM.Input.InputHandler.ConnectedGamepads
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: MLEM.Input.InputHandler.LastMouseState*
  commentId: Overload:MLEM.Input.InputHandler.LastMouseState
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_LastMouseState
  name: LastMouseState
  nameWithType: InputHandler.LastMouseState
  fullName: MLEM.Input.InputHandler.LastMouseState
- uid: Microsoft.Xna.Framework.Input.MouseState
  commentId: T:Microsoft.Xna.Framework.Input.MouseState
  parent: Microsoft.Xna.Framework.Input
  isExternal: true
  name: MouseState
  nameWithType: MouseState
  fullName: Microsoft.Xna.Framework.Input.MouseState
- uid: MLEM.Input.InputHandler.MouseState*
  commentId: Overload:MLEM.Input.InputHandler.MouseState
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_MouseState
  name: MouseState
  nameWithType: InputHandler.MouseState
  fullName: MLEM.Input.InputHandler.MouseState
- uid: MLEM.Input.InputHandler.LastMouseState
  commentId: P:MLEM.Input.InputHandler.LastMouseState
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_LastMouseState
  name: LastMouseState
  nameWithType: InputHandler.LastMouseState
  fullName: MLEM.Input.InputHandler.LastMouseState
- uid: MLEM.Input.InputHandler.LastMousePosition*
  commentId: Overload:MLEM.Input.InputHandler.LastMousePosition
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_LastMousePosition
  name: LastMousePosition
  nameWithType: InputHandler.LastMousePosition
  fullName: MLEM.Input.InputHandler.LastMousePosition
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: MLEM.Input.InputHandler.LastMousePosition
  commentId: P:MLEM.Input.InputHandler.LastMousePosition
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_LastMousePosition
  name: LastMousePosition
  nameWithType: InputHandler.LastMousePosition
  fullName: MLEM.Input.InputHandler.LastMousePosition
- uid: MLEM.Input.InputHandler.LastViewportMousePosition*
  commentId: Overload:MLEM.Input.InputHandler.LastViewportMousePosition
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_LastViewportMousePosition
  name: LastViewportMousePosition
  nameWithType: InputHandler.LastViewportMousePosition
  fullName: MLEM.Input.InputHandler.LastViewportMousePosition
- uid: MLEM.Input.InputHandler.MouseState
  commentId: P:MLEM.Input.InputHandler.MouseState
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_MouseState
  name: MouseState
  nameWithType: InputHandler.MouseState
  fullName: MLEM.Input.InputHandler.MouseState
- uid: MLEM.Input.InputHandler.MousePosition*
  commentId: Overload:MLEM.Input.InputHandler.MousePosition
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_MousePosition
  name: MousePosition
  nameWithType: InputHandler.MousePosition
  fullName: MLEM.Input.InputHandler.MousePosition
- uid: MLEM.Input.InputHandler.MousePosition
  commentId: P:MLEM.Input.InputHandler.MousePosition
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_MousePosition
  name: MousePosition
  nameWithType: InputHandler.MousePosition
  fullName: MLEM.Input.InputHandler.MousePosition
- uid: MLEM.Input.InputHandler.ViewportMousePosition*
  commentId: Overload:MLEM.Input.InputHandler.ViewportMousePosition
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_ViewportMousePosition
  name: ViewportMousePosition
  nameWithType: InputHandler.ViewportMousePosition
  fullName: MLEM.Input.InputHandler.ViewportMousePosition
- uid: MLEM.Input.InputHandler.ScrollWheel*
  commentId: Overload:MLEM.Input.InputHandler.ScrollWheel
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_ScrollWheel
  name: ScrollWheel
  nameWithType: InputHandler.ScrollWheel
  fullName: MLEM.Input.InputHandler.ScrollWheel
- uid: MLEM.Input.InputHandler.LastScrollWheel*
  commentId: Overload:MLEM.Input.InputHandler.LastScrollWheel
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_LastScrollWheel
  name: LastScrollWheel
  nameWithType: InputHandler.LastScrollWheel
  fullName: MLEM.Input.InputHandler.LastScrollWheel
- uid: MLEM.Input.InputHandler.LastKeyboardState*
  commentId: Overload:MLEM.Input.InputHandler.LastKeyboardState
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_LastKeyboardState
  name: LastKeyboardState
  nameWithType: InputHandler.LastKeyboardState
  fullName: MLEM.Input.InputHandler.LastKeyboardState
- uid: Microsoft.Xna.Framework.Input.KeyboardState
  commentId: T:Microsoft.Xna.Framework.Input.KeyboardState
  parent: Microsoft.Xna.Framework.Input
  isExternal: true
  name: KeyboardState
  nameWithType: KeyboardState
  fullName: Microsoft.Xna.Framework.Input.KeyboardState
- uid: MLEM.Input.InputHandler.KeyboardState*
  commentId: Overload:MLEM.Input.InputHandler.KeyboardState
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_KeyboardState
  name: KeyboardState
  nameWithType: InputHandler.KeyboardState
  fullName: MLEM.Input.InputHandler.KeyboardState
- uid: MLEM.Input.InputHandler.HandleKeyboard
  commentId: F:MLEM.Input.InputHandler.HandleKeyboard
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_HandleKeyboard
  name: HandleKeyboard
  nameWithType: InputHandler.HandleKeyboard
  fullName: MLEM.Input.InputHandler.HandleKeyboard
- uid: MLEM.Input.InputHandler.HandleMouse
  commentId: F:MLEM.Input.InputHandler.HandleMouse
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_HandleMouse
  name: HandleMouse
  nameWithType: InputHandler.HandleMouse
  fullName: MLEM.Input.InputHandler.HandleMouse
- uid: MLEM.Input.InputHandler.HandleTouch
  commentId: F:MLEM.Input.InputHandler.HandleTouch
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_HandleTouch
  name: HandleTouch
  nameWithType: InputHandler.HandleTouch
  fullName: MLEM.Input.InputHandler.HandleTouch
- uid: MLEM.Input.InputHandler.ExternalGestureHandling
  commentId: F:MLEM.Input.InputHandler.ExternalGestureHandling
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_ExternalGestureHandling
  name: ExternalGestureHandling
  nameWithType: InputHandler.ExternalGestureHandling
  fullName: MLEM.Input.InputHandler.ExternalGestureHandling
- uid: MLEM.Input.InputHandler.#ctor*
  commentId: Overload:MLEM.Input.InputHandler.#ctor
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler__ctor_Microsoft_Xna_Framework_Game_System_Boolean_System_Boolean_System_Boolean_System_Boolean_System_Boolean_
  name: InputHandler
  nameWithType: InputHandler.InputHandler
  fullName: MLEM.Input.InputHandler.InputHandler
  nameWithType.vb: InputHandler.New
  fullName.vb: MLEM.Input.InputHandler.New
  name.vb: New
- uid: Microsoft.Xna.Framework.Game
  commentId: T:Microsoft.Xna.Framework.Game
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Game
  nameWithType: Game
  fullName: Microsoft.Xna.Framework.Game
- uid: Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
  commentId: M:Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
  parent: Microsoft.Xna.Framework.Game
  isExternal: true
  name: Update(GameTime)
  nameWithType: Game.Update(GameTime)
  fullName: Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
    name: Update
    isExternal: true
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
    name: Update
    isExternal: true
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: )
- uid: MLEM.Input.InputHandler.Update*
  commentId: Overload:MLEM.Input.InputHandler.Update
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_Update
  name: Update
  nameWithType: InputHandler.Update
  fullName: MLEM.Input.InputHandler.Update
- uid: Microsoft.Xna.Framework.GameComponent.Update(Microsoft.Xna.Framework.GameTime)
  commentId: M:Microsoft.Xna.Framework.GameComponent.Update(Microsoft.Xna.Framework.GameTime)
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: Update(GameTime)
  nameWithType: GameComponent.Update(GameTime)
  fullName: Microsoft.Xna.Framework.GameComponent.Update(Microsoft.Xna.Framework.GameTime)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.GameComponent.Update(Microsoft.Xna.Framework.GameTime)
    name: Update
    isExternal: true
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.GameComponent.Update(Microsoft.Xna.Framework.GameTime)
    name: Update
    isExternal: true
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: )
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: MLEM.Input.InputHandler.GetLastGamepadState*
  commentId: Overload:MLEM.Input.InputHandler.GetLastGamepadState
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_GetLastGamepadState_System_Int32_
  name: GetLastGamepadState
  nameWithType: InputHandler.GetLastGamepadState
  fullName: MLEM.Input.InputHandler.GetLastGamepadState
- uid: Microsoft.Xna.Framework.Input.GamePadState
  commentId: T:Microsoft.Xna.Framework.Input.GamePadState
  parent: Microsoft.Xna.Framework.Input
  isExternal: true
  name: GamePadState
  nameWithType: GamePadState
  fullName: Microsoft.Xna.Framework.Input.GamePadState
- uid: MLEM.Input.InputHandler.GetGamepadState*
  commentId: Overload:MLEM.Input.InputHandler.GetGamepadState
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_GetGamepadState_System_Int32_
  name: GetGamepadState
  nameWithType: InputHandler.GetGamepadState
  fullName: MLEM.Input.InputHandler.GetGamepadState
- uid: MLEM.Input.InputHandler.IsModifierKeyDown*
  commentId: Overload:MLEM.Input.InputHandler.IsModifierKeyDown
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsModifierKeyDown_MLEM_Input_ModifierKey_
  name: IsModifierKeyDown
  nameWithType: InputHandler.IsModifierKeyDown
  fullName: MLEM.Input.InputHandler.IsModifierKeyDown
- uid: MLEM.Input.ModifierKey
  commentId: T:MLEM.Input.ModifierKey
  parent: MLEM.Input
  href: MLEM.Input.ModifierKey.html
  name: ModifierKey
  nameWithType: ModifierKey
  fullName: MLEM.Input.ModifierKey
- uid: MLEM.Input.InputHandler.GetGesture*
  commentId: Overload:MLEM.Input.InputHandler.GetGesture
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_GetGesture_Microsoft_Xna_Framework_Input_Touch_GestureType_Microsoft_Xna_Framework_Input_Touch_GestureSample__
  name: GetGesture
  nameWithType: InputHandler.GetGesture
  fullName: MLEM.Input.InputHandler.GetGesture
- uid: Microsoft.Xna.Framework.Input.Touch.GestureType
  commentId: T:Microsoft.Xna.Framework.Input.Touch.GestureType
  parent: Microsoft.Xna.Framework.Input.Touch
  isExternal: true
  name: GestureType
  nameWithType: GestureType
  fullName: Microsoft.Xna.Framework.Input.Touch.GestureType
- uid: MLEM.Input.InputHandler.GetViewportGesture*
  commentId: Overload:MLEM.Input.InputHandler.GetViewportGesture
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_GetViewportGesture_Microsoft_Xna_Framework_Input_Touch_GestureType_Microsoft_Xna_Framework_Input_Touch_GestureSample__
  name: GetViewportGesture
  nameWithType: InputHandler.GetViewportGesture
  fullName: MLEM.Input.InputHandler.GetViewportGesture
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: MLEM.Input.InputHandler.AddExternalGesture*
  commentId: Overload:MLEM.Input.InputHandler.AddExternalGesture
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_AddExternalGesture_Microsoft_Xna_Framework_Input_Touch_GestureSample_
  name: AddExternalGesture
  nameWithType: InputHandler.AddExternalGesture
  fullName: MLEM.Input.InputHandler.AddExternalGesture
- uid: MLEM.Input.InputHandler.IsDown*
  commentId: Overload:MLEM.Input.InputHandler.IsDown
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsDown_MLEM_Input_GenericInput_System_Int32_
  name: IsDown
  nameWithType: InputHandler.IsDown
  fullName: MLEM.Input.InputHandler.IsDown
- uid: MLEM.Input.InputHandler.IsUp*
  commentId: Overload:MLEM.Input.InputHandler.IsUp
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsUp_MLEM_Input_GenericInput_System_Int32_
  name: IsUp
  nameWithType: InputHandler.IsUp
  fullName: MLEM.Input.InputHandler.IsUp
- uid: MLEM.Input.InputHandler.WasDown*
  commentId: Overload:MLEM.Input.InputHandler.WasDown
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_WasDown_MLEM_Input_GenericInput_System_Int32_
  name: WasDown
  nameWithType: InputHandler.WasDown
  fullName: MLEM.Input.InputHandler.WasDown
- uid: MLEM.Input.InputHandler.WasUp*
  commentId: Overload:MLEM.Input.InputHandler.WasUp
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_WasUp_MLEM_Input_GenericInput_System_Int32_
  name: WasUp
  nameWithType: InputHandler.WasUp
  fullName: MLEM.Input.InputHandler.WasUp
- uid: MLEM.Input.InputHandler.HandleKeyboardRepeats
  commentId: F:MLEM.Input.InputHandler.HandleKeyboardRepeats
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_HandleKeyboardRepeats
  name: HandleKeyboardRepeats
  nameWithType: InputHandler.HandleKeyboardRepeats
  fullName: MLEM.Input.InputHandler.HandleKeyboardRepeats
- uid: MLEM.Input.InputHandler.HandleGamepadRepeats
  commentId: F:MLEM.Input.InputHandler.HandleGamepadRepeats
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_HandleGamepadRepeats
  name: HandleGamepadRepeats
  nameWithType: InputHandler.HandleGamepadRepeats
  fullName: MLEM.Input.InputHandler.HandleGamepadRepeats
- uid: MLEM.Input.InputHandler.InvertPressBehavior
  commentId: F:MLEM.Input.InputHandler.InvertPressBehavior
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_InvertPressBehavior
  name: InvertPressBehavior
  nameWithType: InputHandler.InvertPressBehavior
  fullName: MLEM.Input.InputHandler.InvertPressBehavior
- uid: MLEM.Input.InputHandler.IsPressed*
  commentId: Overload:MLEM.Input.InputHandler.IsPressed
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressed_MLEM_Input_GenericInput_System_Int32_
  name: IsPressed
  nameWithType: InputHandler.IsPressed
  fullName: MLEM.Input.InputHandler.IsPressed
- uid: MLEM.Input.InputHandler.IsPressedIgnoreRepeats*
  commentId: Overload:MLEM.Input.InputHandler.IsPressedIgnoreRepeats
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressedIgnoreRepeats_MLEM_Input_GenericInput_System_Int32_
  name: IsPressedIgnoreRepeats
  nameWithType: InputHandler.IsPressedIgnoreRepeats
  fullName: MLEM.Input.InputHandler.IsPressedIgnoreRepeats
- uid: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryConsumePressed_MLEM_Input_GenericInput_System_Int32_
  name: TryConsumePressed(GenericInput, int)
  nameWithType: InputHandler.TryConsumePressed(GenericInput, int)
  fullName: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput, int)
  nameWithType.vb: InputHandler.TryConsumePressed(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput, Integer)
  name.vb: TryConsumePressed(GenericInput, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput,System.Int32)
    name: TryConsumePressed
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryConsumePressed_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.TryConsumePressed(MLEM.Input.GenericInput,System.Int32)
    name: TryConsumePressed
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryConsumePressed_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.InputHandler.IsPressedAvailable*
  commentId: Overload:MLEM.Input.InputHandler.IsPressedAvailable
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressedAvailable_MLEM_Input_GenericInput_System_Int32_
  name: IsPressedAvailable
  nameWithType: InputHandler.IsPressedAvailable
  fullName: MLEM.Input.InputHandler.IsPressedAvailable
- uid: MLEM.Input.InputHandler.TryConsumePressed*
  commentId: Overload:MLEM.Input.InputHandler.TryConsumePressed
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryConsumePressed_MLEM_Input_GenericInput_System_Int32_
  name: TryConsumePressed
  nameWithType: InputHandler.TryConsumePressed
  fullName: MLEM.Input.InputHandler.TryConsumePressed
- uid: MLEM.Input.InputHandler.WasPressedForLess*
  commentId: Overload:MLEM.Input.InputHandler.WasPressedForLess
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_WasPressedForLess_MLEM_Input_GenericInput_System_TimeSpan_System_Int32_
  name: WasPressedForLess
  nameWithType: InputHandler.WasPressedForLess
  fullName: MLEM.Input.InputHandler.WasPressedForLess
- uid: MLEM.Input.InputHandler.TryConsumePressedForLess(MLEM.Input.GenericInput,System.TimeSpan,System.Int32)
  commentId: M:MLEM.Input.InputHandler.TryConsumePressedForLess(MLEM.Input.GenericInput,System.TimeSpan,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryConsumePressedForLess_MLEM_Input_GenericInput_System_TimeSpan_System_Int32_
  name: TryConsumePressedForLess(GenericInput, TimeSpan, int)
  nameWithType: InputHandler.TryConsumePressedForLess(GenericInput, TimeSpan, int)
  fullName: MLEM.Input.InputHandler.TryConsumePressedForLess(MLEM.Input.GenericInput, System.TimeSpan, int)
  nameWithType.vb: InputHandler.TryConsumePressedForLess(GenericInput, TimeSpan, Integer)
  fullName.vb: MLEM.Input.InputHandler.TryConsumePressedForLess(MLEM.Input.GenericInput, System.TimeSpan, Integer)
  name.vb: TryConsumePressedForLess(GenericInput, TimeSpan, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.TryConsumePressedForLess(MLEM.Input.GenericInput,System.TimeSpan,System.Int32)
    name: TryConsumePressedForLess
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryConsumePressedForLess_MLEM_Input_GenericInput_System_TimeSpan_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.TryConsumePressedForLess(MLEM.Input.GenericInput,System.TimeSpan,System.Int32)
    name: TryConsumePressedForLess
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryConsumePressedForLess_MLEM_Input_GenericInput_System_TimeSpan_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.InputHandler.WasPressedForLessAvailable*
  commentId: Overload:MLEM.Input.InputHandler.WasPressedForLessAvailable
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_WasPressedForLessAvailable_MLEM_Input_GenericInput_System_TimeSpan_System_Int32_
  name: WasPressedForLessAvailable
  nameWithType: InputHandler.WasPressedForLessAvailable
  fullName: MLEM.Input.InputHandler.WasPressedForLessAvailable
- uid: MLEM.Input.InputHandler.TryConsumePressedForLess*
  commentId: Overload:MLEM.Input.InputHandler.TryConsumePressedForLess
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryConsumePressedForLess_MLEM_Input_GenericInput_System_TimeSpan_System_Int32_
  name: TryConsumePressedForLess
  nameWithType: InputHandler.TryConsumePressedForLess
  fullName: MLEM.Input.InputHandler.TryConsumePressedForLess
- uid: MLEM.Input.InputHandler.IsAnyDown*
  commentId: Overload:MLEM.Input.InputHandler.IsAnyDown
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsAnyDown_MLEM_Input_GenericInput___
  name: IsAnyDown
  nameWithType: InputHandler.IsAnyDown
  fullName: MLEM.Input.InputHandler.IsAnyDown
- uid: MLEM.Input.InputHandler.IsAnyUp*
  commentId: Overload:MLEM.Input.InputHandler.IsAnyUp
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsAnyUp_MLEM_Input_GenericInput___
  name: IsAnyUp
  nameWithType: InputHandler.IsAnyUp
  fullName: MLEM.Input.InputHandler.IsAnyUp
- uid: MLEM.Input.InputHandler.IsAnyPressed*
  commentId: Overload:MLEM.Input.InputHandler.IsAnyPressed
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsAnyPressed_MLEM_Input_GenericInput___
  name: IsAnyPressed
  nameWithType: InputHandler.IsAnyPressed
  fullName: MLEM.Input.InputHandler.IsAnyPressed
- uid: MLEM.Input.InputHandler.IsAnyPressedAvailable*
  commentId: Overload:MLEM.Input.InputHandler.IsAnyPressedAvailable
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsAnyPressedAvailable_MLEM_Input_GenericInput___
  name: IsAnyPressedAvailable
  nameWithType: InputHandler.IsAnyPressedAvailable
  fullName: MLEM.Input.InputHandler.IsAnyPressedAvailable
- uid: System.TimeSpan.Zero
  commentId: F:System.TimeSpan.Zero
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan.zero
  name: Zero
  nameWithType: TimeSpan.Zero
  fullName: System.TimeSpan.Zero
- uid: MLEM.Input.InputHandler.TryGetDownTime*
  commentId: Overload:MLEM.Input.InputHandler.TryGetDownTime
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryGetDownTime_MLEM_Input_GenericInput_System_TimeSpan__System_Int32_
  name: TryGetDownTime
  nameWithType: InputHandler.TryGetDownTime
  fullName: MLEM.Input.InputHandler.TryGetDownTime
- uid: MLEM.Input.InputHandler.GetDownTime*
  commentId: Overload:MLEM.Input.InputHandler.GetDownTime
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_GetDownTime_MLEM_Input_GenericInput_System_Int32_
  name: GetDownTime
  nameWithType: InputHandler.GetDownTime
  fullName: MLEM.Input.InputHandler.GetDownTime
- uid: MLEM.Input.InputHandler.TryGetUpTime*
  commentId: Overload:MLEM.Input.InputHandler.TryGetUpTime
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryGetUpTime_MLEM_Input_GenericInput_System_TimeSpan__System_Int32_
  name: TryGetUpTime
  nameWithType: InputHandler.TryGetUpTime
  fullName: MLEM.Input.InputHandler.TryGetUpTime
- uid: MLEM.Input.InputHandler.GetUpTime*
  commentId: Overload:MLEM.Input.InputHandler.GetUpTime
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_GetUpTime_MLEM_Input_GenericInput_System_Int32_
  name: GetUpTime
  nameWithType: InputHandler.GetUpTime
  fullName: MLEM.Input.InputHandler.GetUpTime
- uid: MLEM.Input.InputHandler.TryGetTimeSincePress*
  commentId: Overload:MLEM.Input.InputHandler.TryGetTimeSincePress
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_TryGetTimeSincePress_MLEM_Input_GenericInput_System_TimeSpan__System_Int32_
  name: TryGetTimeSincePress
  nameWithType: InputHandler.TryGetTimeSincePress
  fullName: MLEM.Input.InputHandler.TryGetTimeSincePress
- uid: MLEM.Input.InputHandler.GetTimeSincePress*
  commentId: Overload:MLEM.Input.InputHandler.GetTimeSincePress
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_GetTimeSincePress_MLEM_Input_GenericInput_System_Int32_
  name: GetTimeSincePress
  nameWithType: InputHandler.GetTimeSincePress
  fullName: MLEM.Input.InputHandler.GetTimeSincePress
- uid: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput,System.Int32)
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressedAvailable_MLEM_Input_GenericInput_System_Int32_
  name: IsPressedAvailable(GenericInput, int)
  nameWithType: InputHandler.IsPressedAvailable(GenericInput, int)
  fullName: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput, int)
  nameWithType.vb: InputHandler.IsPressedAvailable(GenericInput, Integer)
  fullName.vb: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput, Integer)
  name.vb: IsPressedAvailable(GenericInput, Integer)
  spec.csharp:
  - uid: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput,System.Int32)
    name: IsPressedAvailable
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressedAvailable_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.IsPressedAvailable(MLEM.Input.GenericInput,System.Int32)
    name: IsPressedAvailable
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressedAvailable_MLEM_Input_GenericInput_System_Int32_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: MLEM.Input.InputHandler.IsPressConsumed*
  commentId: Overload:MLEM.Input.InputHandler.IsPressConsumed
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_IsPressConsumed_MLEM_Input_GenericInput_System_Int32_
  name: IsPressConsumed
  nameWithType: InputHandler.IsPressConsumed
  fullName: MLEM.Input.InputHandler.IsPressConsumed
- uid: MLEM.Input.InputHandler.EnableGestures*
  commentId: Overload:MLEM.Input.InputHandler.EnableGestures
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_EnableGestures_Microsoft_Xna_Framework_Input_Touch_GestureType___
  name: EnableGestures
  nameWithType: InputHandler.EnableGestures
  fullName: MLEM.Input.InputHandler.EnableGestures
- uid: Microsoft.Xna.Framework.Input.Touch.GestureType[]
  isExternal: true
  name: GestureType[]
  nameWithType: GestureType[]
  fullName: Microsoft.Xna.Framework.Input.Touch.GestureType[]
  nameWithType.vb: GestureType()
  fullName.vb: Microsoft.Xna.Framework.Input.Touch.GestureType()
  name.vb: GestureType()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureType
    name: GestureType
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureType
    name: GestureType
    isExternal: true
  - name: (
  - name: )
- uid: MLEM.Input.InputHandler.DisableGestures*
  commentId: Overload:MLEM.Input.InputHandler.DisableGestures
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_DisableGestures_Microsoft_Xna_Framework_Input_Touch_GestureType___
  name: DisableGestures
  nameWithType: InputHandler.DisableGestures
  fullName: MLEM.Input.InputHandler.DisableGestures
- uid: MLEM.Input.InputHandler.EnableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  commentId: M:MLEM.Input.InputHandler.EnableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_EnableGestures_Microsoft_Xna_Framework_Input_Touch_GestureType___
  name: EnableGestures(params GestureType[])
  nameWithType: InputHandler.EnableGestures(params GestureType[])
  fullName: MLEM.Input.InputHandler.EnableGestures(params Microsoft.Xna.Framework.Input.Touch.GestureType[])
  nameWithType.vb: InputHandler.EnableGestures(ParamArray GestureType())
  fullName.vb: MLEM.Input.InputHandler.EnableGestures(ParamArray Microsoft.Xna.Framework.Input.Touch.GestureType())
  name.vb: EnableGestures(ParamArray GestureType())
  spec.csharp:
  - uid: MLEM.Input.InputHandler.EnableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
    name: EnableGestures
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_EnableGestures_Microsoft_Xna_Framework_Input_Touch_GestureType___
  - name: (
  - name: params
  - name: " "
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureType
    name: GestureType
    isExternal: true
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.EnableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
    name: EnableGestures
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_EnableGestures_Microsoft_Xna_Framework_Input_Touch_GestureType___
  - name: (
  - name: ParamArray
  - name: " "
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureType
    name: GestureType
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: MLEM.Input.InputHandler.DisableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  commentId: M:MLEM.Input.InputHandler.DisableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  isExternal: true
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_DisableGestures_Microsoft_Xna_Framework_Input_Touch_GestureType___
  name: DisableGestures(params GestureType[])
  nameWithType: InputHandler.DisableGestures(params GestureType[])
  fullName: MLEM.Input.InputHandler.DisableGestures(params Microsoft.Xna.Framework.Input.Touch.GestureType[])
  nameWithType.vb: InputHandler.DisableGestures(ParamArray GestureType())
  fullName.vb: MLEM.Input.InputHandler.DisableGestures(ParamArray Microsoft.Xna.Framework.Input.Touch.GestureType())
  name.vb: DisableGestures(ParamArray GestureType())
  spec.csharp:
  - uid: MLEM.Input.InputHandler.DisableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
    name: DisableGestures
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_DisableGestures_Microsoft_Xna_Framework_Input_Touch_GestureType___
  - name: (
  - name: params
  - name: " "
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureType
    name: GestureType
    isExternal: true
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: MLEM.Input.InputHandler.DisableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
    name: DisableGestures
    href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_DisableGestures_Microsoft_Xna_Framework_Input_Touch_GestureType___
  - name: (
  - name: ParamArray
  - name: " "
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureType
    name: GestureType
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: MLEM.Input.InputHandler.SetGesturesEnabled*
  commentId: Overload:MLEM.Input.InputHandler.SetGesturesEnabled
  href: MLEM.Input.InputHandler.html#MLEM_Input_InputHandler_SetGesturesEnabled_System_Boolean_Microsoft_Xna_Framework_Input_Touch_GestureType___
  name: SetGesturesEnabled
  nameWithType: InputHandler.SetGesturesEnabled
  fullName: MLEM.Input.InputHandler.SetGesturesEnabled
