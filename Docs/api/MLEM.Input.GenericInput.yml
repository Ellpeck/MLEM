### YamlMime:ManagedReference
items:
- uid: MLEM.Input.GenericInput
  commentId: T:MLEM.Input.GenericInput
  id: GenericInput
  parent: MLEM.Input
  children:
  - MLEM.Input.GenericInput.#ctor(MLEM.Input.MouseButton)
  - MLEM.Input.GenericInput.#ctor(Microsoft.Xna.Framework.Input.Buttons)
  - MLEM.Input.GenericInput.#ctor(Microsoft.Xna.Framework.Input.Keys)
  - MLEM.Input.GenericInput.#ctor(System.Enum)
  - MLEM.Input.GenericInput.AllButtons
  - MLEM.Input.GenericInput.AllInputs
  - MLEM.Input.GenericInput.AllKeys
  - MLEM.Input.GenericInput.AllMouseButtons
  - MLEM.Input.GenericInput.Button
  - MLEM.Input.GenericInput.Equals(MLEM.Input.GenericInput)
  - MLEM.Input.GenericInput.Equals(System.Object)
  - MLEM.Input.GenericInput.GetHashCode
  - MLEM.Input.GenericInput.Key
  - MLEM.Input.GenericInput.MouseButton
  - MLEM.Input.GenericInput.ToString
  - MLEM.Input.GenericInput.Type
  - MLEM.Input.GenericInput.op_Equality(MLEM.Input.GenericInput,MLEM.Input.GenericInput)
  - MLEM.Input.GenericInput.op_Implicit(MLEM.Input.GenericInput)~MLEM.Input.MouseButton
  - MLEM.Input.GenericInput.op_Implicit(MLEM.Input.GenericInput)~Microsoft.Xna.Framework.Input.Buttons
  - MLEM.Input.GenericInput.op_Implicit(MLEM.Input.GenericInput)~Microsoft.Xna.Framework.Input.Keys
  - MLEM.Input.GenericInput.op_Implicit(MLEM.Input.MouseButton)~MLEM.Input.GenericInput
  - MLEM.Input.GenericInput.op_Implicit(Microsoft.Xna.Framework.Input.Buttons)~MLEM.Input.GenericInput
  - MLEM.Input.GenericInput.op_Implicit(Microsoft.Xna.Framework.Input.Keys)~MLEM.Input.GenericInput
  - MLEM.Input.GenericInput.op_Inequality(MLEM.Input.GenericInput,MLEM.Input.GenericInput)
  langs:
  - csharp
  - vb
  name: GenericInput
  nameWithType: GenericInput
  fullName: MLEM.Input.GenericInput
  type: Struct
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GenericInput
    path: ../MLEM/Input/GenericInput.cs
    startLine: 12
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    A generic input represents any kind of input key.

    This includes <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref> for keyboard keys, <xref href="MLEM.Input.GenericInput.MouseButton" data-throw-if-not-resolved="false"></xref> for mouse buttons and <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref> for gamepad buttons.

    For creating and extracting inputs from a generic input, the implicit operators and <xref href="MLEM.Input.GenericInput.Type" data-throw-if-not-resolved="false"></xref> can additionally be used.

    Note that this type is serializable using <xref href="System.Runtime.Serialization.DataContractAttribute" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: >-
      [DataContract]

      public readonly struct GenericInput : IEquatable<GenericInput>
    content.vb: >-
      <DataContract>

      Public Structure GenericInput Implements IEquatable(Of GenericInput)
  implements:
  - System.IEquatable{MLEM.Input.GenericInput}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  extensionMethods:
  - MLEM.Input.GenericInput.MLEM.Input.KeysExtensions.GetModifier
  - MLEM.Input.GenericInput.MLEM.Input.KeysExtensions.IsModifier
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: MLEM.Input.GenericInput.AllKeys
  commentId: F:MLEM.Input.GenericInput.AllKeys
  id: AllKeys
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: AllKeys
  nameWithType: GenericInput.AllKeys
  fullName: MLEM.Input.GenericInput.AllKeys
  type: Field
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: AllKeys
    path: ../MLEM/Input/GenericInput.cs
    startLine: 18
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: All <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref> values created from all values of the <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref> enum.
  example: []
  syntax:
    content: public static readonly GenericInput[] AllKeys
    return:
      type: MLEM.Input.GenericInput[]
    content.vb: Public Shared ReadOnly AllKeys As GenericInput()
- uid: MLEM.Input.GenericInput.AllMouseButtons
  commentId: F:MLEM.Input.GenericInput.AllMouseButtons
  id: AllMouseButtons
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: AllMouseButtons
  nameWithType: GenericInput.AllMouseButtons
  fullName: MLEM.Input.GenericInput.AllMouseButtons
  type: Field
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: AllMouseButtons
    path: ../MLEM/Input/GenericInput.cs
    startLine: 22
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: All <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref> values created from all values of the <xref href="MLEM.Input.MouseButton" data-throw-if-not-resolved="false"></xref> enum.
  example: []
  syntax:
    content: public static readonly GenericInput[] AllMouseButtons
    return:
      type: MLEM.Input.GenericInput[]
    content.vb: Public Shared ReadOnly AllMouseButtons As GenericInput()
- uid: MLEM.Input.GenericInput.AllButtons
  commentId: F:MLEM.Input.GenericInput.AllButtons
  id: AllButtons
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: AllButtons
  nameWithType: GenericInput.AllButtons
  fullName: MLEM.Input.GenericInput.AllButtons
  type: Field
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: AllButtons
    path: ../MLEM/Input/GenericInput.cs
    startLine: 26
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: All <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref> values created from all values of the <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref> enum.
  example: []
  syntax:
    content: public static readonly GenericInput[] AllButtons
    return:
      type: MLEM.Input.GenericInput[]
    content.vb: Public Shared ReadOnly AllButtons As GenericInput()
- uid: MLEM.Input.GenericInput.AllInputs
  commentId: F:MLEM.Input.GenericInput.AllInputs
  id: AllInputs
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: AllInputs
  nameWithType: GenericInput.AllInputs
  fullName: MLEM.Input.GenericInput.AllInputs
  type: Field
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: AllInputs
    path: ../MLEM/Input/GenericInput.cs
    startLine: 31
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    All <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref> values created from all values of the <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref>, <xref href="MLEM.Input.MouseButton" data-throw-if-not-resolved="false"></xref> and <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref> enums.

    This collection represents all possible valid, non-default <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref> values.
  example: []
  syntax:
    content: public static readonly GenericInput[] AllInputs
    return:
      type: MLEM.Input.GenericInput[]
    content.vb: Public Shared ReadOnly AllInputs As GenericInput()
- uid: MLEM.Input.GenericInput.Type
  commentId: F:MLEM.Input.GenericInput.Type
  id: Type
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: GenericInput.Type
  fullName: MLEM.Input.GenericInput.Type
  type: Field
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Type
    path: ../MLEM/Input/GenericInput.cs
    startLine: 37
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: The <xref href="MLEM.Input.GenericInput.InputType" data-throw-if-not-resolved="false"></xref> of this generic input's current value.
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly GenericInput.InputType Type
    return:
      type: MLEM.Input.GenericInput.InputType
    content.vb: >-
      <DataMember>

      Public ReadOnly Type As GenericInput.InputType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: MLEM.Input.GenericInput.Key
  commentId: P:MLEM.Input.GenericInput.Key
  id: Key
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: GenericInput.Key
  fullName: MLEM.Input.GenericInput.Key
  type: Property
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Key
    path: ../MLEM/Input/GenericInput.cs
    startLine: 45
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns this generic input's <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Keys Key { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.Keys
    content.vb: Public ReadOnly Property Key As Keys
  overload: MLEM.Input.GenericInput.Key*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If this generic input's <xref href="MLEM.Input.GenericInput.Type" data-throw-if-not-resolved="false"></xref> is not <xref href="MLEM.Input.GenericInput.InputType.Keyboard" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Input.GenericInput.InputType.None" data-throw-if-not-resolved="false"></xref>.
- uid: MLEM.Input.GenericInput.MouseButton
  commentId: P:MLEM.Input.GenericInput.MouseButton
  id: MouseButton
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: MouseButton
  nameWithType: GenericInput.MouseButton
  fullName: MLEM.Input.GenericInput.MouseButton
  type: Property
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: MouseButton
    path: ../MLEM/Input/GenericInput.cs
    startLine: 50
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns this generic input's <xref href="MLEM.Input.GenericInput.MouseButton" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public MouseButton MouseButton { get; }
    parameters: []
    return:
      type: MLEM.Input.MouseButton
    content.vb: Public ReadOnly Property MouseButton As MouseButton
  overload: MLEM.Input.GenericInput.MouseButton*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If this generic input's <xref href="MLEM.Input.GenericInput.Type" data-throw-if-not-resolved="false"></xref> is not <xref href="MLEM.Input.GenericInput.InputType.Mouse" data-throw-if-not-resolved="false"></xref>.
- uid: MLEM.Input.GenericInput.Button
  commentId: P:MLEM.Input.GenericInput.Button
  id: Button
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: Button
  nameWithType: GenericInput.Button
  fullName: MLEM.Input.GenericInput.Button
  type: Property
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Button
    path: ../MLEM/Input/GenericInput.cs
    startLine: 55
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns this generic input's <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Buttons Button { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.Buttons
    content.vb: Public ReadOnly Property Button As Buttons
  overload: MLEM.Input.GenericInput.Button*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If this generic input's <xref href="MLEM.Input.GenericInput.Type" data-throw-if-not-resolved="false"></xref> is not <xref href="MLEM.Input.GenericInput.InputType.Gamepad" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Input.GenericInput.InputType.None" data-throw-if-not-resolved="false"></xref>.
- uid: MLEM.Input.GenericInput.#ctor(Microsoft.Xna.Framework.Input.Keys)
  commentId: M:MLEM.Input.GenericInput.#ctor(Microsoft.Xna.Framework.Input.Keys)
  id: '#ctor(Microsoft.Xna.Framework.Input.Keys)'
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: GenericInput(Keys)
  nameWithType: GenericInput.GenericInput(Keys)
  fullName: MLEM.Input.GenericInput.GenericInput(Microsoft.Xna.Framework.Input.Keys)
  type: Constructor
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM/Input/GenericInput.cs
    startLine: 61
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Creates a new generic input from the given keyboard <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public GenericInput(Keys key)
    parameters:
    - id: key
      type: Microsoft.Xna.Framework.Input.Keys
      description: The key to convert.
    content.vb: Public Sub New(key As Keys)
  overload: MLEM.Input.GenericInput.#ctor*
  nameWithType.vb: GenericInput.New(Keys)
  fullName.vb: MLEM.Input.GenericInput.New(Microsoft.Xna.Framework.Input.Keys)
  name.vb: New(Keys)
- uid: MLEM.Input.GenericInput.#ctor(MLEM.Input.MouseButton)
  commentId: M:MLEM.Input.GenericInput.#ctor(MLEM.Input.MouseButton)
  id: '#ctor(MLEM.Input.MouseButton)'
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: GenericInput(MouseButton)
  nameWithType: GenericInput.GenericInput(MouseButton)
  fullName: MLEM.Input.GenericInput.GenericInput(MLEM.Input.MouseButton)
  type: Constructor
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM/Input/GenericInput.cs
    startLine: 67
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Creates a new generic input from the given <xref href="MLEM.Input.GenericInput.MouseButton" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public GenericInput(MouseButton button)
    parameters:
    - id: button
      type: MLEM.Input.MouseButton
      description: The button to convert.
    content.vb: Public Sub New(button As MouseButton)
  overload: MLEM.Input.GenericInput.#ctor*
  nameWithType.vb: GenericInput.New(MouseButton)
  fullName.vb: MLEM.Input.GenericInput.New(MLEM.Input.MouseButton)
  name.vb: New(MouseButton)
- uid: MLEM.Input.GenericInput.#ctor(Microsoft.Xna.Framework.Input.Buttons)
  commentId: M:MLEM.Input.GenericInput.#ctor(Microsoft.Xna.Framework.Input.Buttons)
  id: '#ctor(Microsoft.Xna.Framework.Input.Buttons)'
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: GenericInput(Buttons)
  nameWithType: GenericInput.GenericInput(Buttons)
  fullName: MLEM.Input.GenericInput.GenericInput(Microsoft.Xna.Framework.Input.Buttons)
  type: Constructor
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM/Input/GenericInput.cs
    startLine: 73
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Creates a new generic input from the given gamepad <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public GenericInput(Buttons button)
    parameters:
    - id: button
      type: Microsoft.Xna.Framework.Input.Buttons
      description: The button to convert.
    content.vb: Public Sub New(button As Buttons)
  overload: MLEM.Input.GenericInput.#ctor*
  nameWithType.vb: GenericInput.New(Buttons)
  fullName.vb: MLEM.Input.GenericInput.New(Microsoft.Xna.Framework.Input.Buttons)
  name.vb: New(Buttons)
- uid: MLEM.Input.GenericInput.#ctor(System.Enum)
  commentId: M:MLEM.Input.GenericInput.#ctor(System.Enum)
  id: '#ctor(System.Enum)'
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: GenericInput(Enum)
  nameWithType: GenericInput.GenericInput(Enum)
  fullName: MLEM.Input.GenericInput.GenericInput(System.Enum)
  type: Constructor
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM/Input/GenericInput.cs
    startLine: 80
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: >-
    Creates a new generic input from the given <xref href="System.Enum" data-throw-if-not-resolved="false"></xref> value.

    If the value is a <xref href="MLEM.Input.GenericInput.MouseButton" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref> or <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref>, the appropriate <xref href="MLEM.Input.GenericInput.Type" data-throw-if-not-resolved="false"></xref> and value will be set. Otherwise, the <xref href="MLEM.Input.GenericInput.Type" data-throw-if-not-resolved="false"></xref> will be set to <xref href="MLEM.Input.GenericInput.InputType.None" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public GenericInput(Enum value)
    parameters:
    - id: value
      type: System.Enum
      description: The value to convert.
    content.vb: Public Sub New(value As [Enum])
  overload: MLEM.Input.GenericInput.#ctor*
  nameWithType.vb: GenericInput.New(Enum)
  fullName.vb: MLEM.Input.GenericInput.New(System.Enum)
  name.vb: New(Enum)
- uid: MLEM.Input.GenericInput.ToString
  commentId: M:MLEM.Input.GenericInput.ToString
  id: ToString
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: GenericInput.ToString()
  fullName: MLEM.Input.GenericInput.ToString()
  type: Method
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: ToString
    path: ../MLEM/Input/GenericInput.cs
    startLine: 92
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns this generic input, converted to a string.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: This generic input, converted to a string.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: MLEM.Input.GenericInput.ToString*
- uid: MLEM.Input.GenericInput.Equals(MLEM.Input.GenericInput)
  commentId: M:MLEM.Input.GenericInput.Equals(MLEM.Input.GenericInput)
  id: Equals(MLEM.Input.GenericInput)
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: Equals(GenericInput)
  nameWithType: GenericInput.Equals(GenericInput)
  fullName: MLEM.Input.GenericInput.Equals(MLEM.Input.GenericInput)
  type: Method
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Equals
    path: ../MLEM/Input/GenericInput.cs
    startLine: 108
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Indicates whether the current object is equal to another object of the same type.
  example: []
  syntax:
    content: public bool Equals(GenericInput other)
    parameters:
    - id: other
      type: MLEM.Input.GenericInput
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: true if the current object is equal to the <code class="paramref">other</code> parameter; otherwise, false.
    content.vb: Public Function Equals(other As GenericInput) As Boolean
  overload: MLEM.Input.GenericInput.Equals*
  implements:
  - System.IEquatable{MLEM.Input.GenericInput}.Equals(MLEM.Input.GenericInput)
- uid: MLEM.Input.GenericInput.Equals(System.Object)
  commentId: M:MLEM.Input.GenericInput.Equals(System.Object)
  id: Equals(System.Object)
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: GenericInput.Equals(object)
  fullName: MLEM.Input.GenericInput.Equals(object)
  type: Method
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: Equals
    path: ../MLEM/Input/GenericInput.cs
    startLine: 115
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Indicates whether this instance and a specified object are equal.
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current instance.
    return:
      type: System.Boolean
      description: true if <code class="paramref">obj</code> and this instance are the same type and represent the same value; otherwise, false.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: MLEM.Input.GenericInput.Equals*
  nameWithType.vb: GenericInput.Equals(Object)
  fullName.vb: MLEM.Input.GenericInput.Equals(Object)
  name.vb: Equals(Object)
- uid: MLEM.Input.GenericInput.GetHashCode
  commentId: M:MLEM.Input.GenericInput.GetHashCode
  id: GetHashCode
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: GenericInput.GetHashCode()
  fullName: MLEM.Input.GenericInput.GetHashCode()
  type: Method
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: GetHashCode
    path: ../MLEM/Input/GenericInput.cs
    startLine: 121
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Returns the hash code for this instance.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: MLEM.Input.GenericInput.GetHashCode*
- uid: MLEM.Input.GenericInput.op_Equality(MLEM.Input.GenericInput,MLEM.Input.GenericInput)
  commentId: M:MLEM.Input.GenericInput.op_Equality(MLEM.Input.GenericInput,MLEM.Input.GenericInput)
  id: op_Equality(MLEM.Input.GenericInput,MLEM.Input.GenericInput)
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: operator ==(GenericInput, GenericInput)
  nameWithType: GenericInput.operator ==(GenericInput, GenericInput)
  fullName: MLEM.Input.GenericInput.operator ==(MLEM.Input.GenericInput, MLEM.Input.GenericInput)
  type: Operator
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: op_Equality
    path: ../MLEM/Input/GenericInput.cs
    startLine: 131
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Compares the two generic input instances for equality using <xref href="MLEM.Input.GenericInput.Equals(MLEM.Input.GenericInput)" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static bool operator ==(GenericInput left, GenericInput right)
    parameters:
    - id: left
      type: MLEM.Input.GenericInput
      description: The left input
    - id: right
      type: MLEM.Input.GenericInput
      description: The right input
    return:
      type: System.Boolean
      description: Whether the two generic inputs are equal
    content.vb: Public Shared Operator =(left As GenericInput, right As GenericInput) As Boolean
  overload: MLEM.Input.GenericInput.op_Equality*
  nameWithType.vb: GenericInput.=(GenericInput, GenericInput)
  fullName.vb: MLEM.Input.GenericInput.=(MLEM.Input.GenericInput, MLEM.Input.GenericInput)
  name.vb: =(GenericInput, GenericInput)
- uid: MLEM.Input.GenericInput.op_Inequality(MLEM.Input.GenericInput,MLEM.Input.GenericInput)
  commentId: M:MLEM.Input.GenericInput.op_Inequality(MLEM.Input.GenericInput,MLEM.Input.GenericInput)
  id: op_Inequality(MLEM.Input.GenericInput,MLEM.Input.GenericInput)
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: operator !=(GenericInput, GenericInput)
  nameWithType: GenericInput.operator !=(GenericInput, GenericInput)
  fullName: MLEM.Input.GenericInput.operator !=(MLEM.Input.GenericInput, MLEM.Input.GenericInput)
  type: Operator
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: op_Inequality
    path: ../MLEM/Input/GenericInput.cs
    startLine: 141
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Compares the two generic input instances for inequality using <xref href="MLEM.Input.GenericInput.Equals(MLEM.Input.GenericInput)" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static bool operator !=(GenericInput left, GenericInput right)
    parameters:
    - id: left
      type: MLEM.Input.GenericInput
      description: The left input
    - id: right
      type: MLEM.Input.GenericInput
      description: The right input
    return:
      type: System.Boolean
      description: Whether the two generic inputs are not equal
    content.vb: Public Shared Operator <>(left As GenericInput, right As GenericInput) As Boolean
  overload: MLEM.Input.GenericInput.op_Inequality*
  nameWithType.vb: GenericInput.<>(GenericInput, GenericInput)
  fullName.vb: MLEM.Input.GenericInput.<>(MLEM.Input.GenericInput, MLEM.Input.GenericInput)
  name.vb: <>(GenericInput, GenericInput)
- uid: MLEM.Input.GenericInput.op_Implicit(Microsoft.Xna.Framework.Input.Keys)~MLEM.Input.GenericInput
  commentId: M:MLEM.Input.GenericInput.op_Implicit(Microsoft.Xna.Framework.Input.Keys)~MLEM.Input.GenericInput
  id: op_Implicit(Microsoft.Xna.Framework.Input.Keys)~MLEM.Input.GenericInput
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: implicit operator GenericInput(Keys)
  nameWithType: GenericInput.implicit operator GenericInput(Keys)
  fullName: MLEM.Input.GenericInput.implicit operator MLEM.Input.GenericInput(Microsoft.Xna.Framework.Input.Keys)
  type: Operator
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: op_Implicit
    path: ../MLEM/Input/GenericInput.cs
    startLine: 150
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Converts a <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref> to a generic input.
  example: []
  syntax:
    content: public static implicit operator GenericInput(Keys key)
    parameters:
    - id: key
      type: Microsoft.Xna.Framework.Input.Keys
      description: The keys to convert
    return:
      type: MLEM.Input.GenericInput
      description: The resulting generic input
    content.vb: Public Shared Widening Operator CType(key As Keys) As GenericInput
  overload: MLEM.Input.GenericInput.op_Implicit*
  nameWithType.vb: GenericInput.CType(Keys)
  fullName.vb: MLEM.Input.GenericInput.CType(Microsoft.Xna.Framework.Input.Keys)
  name.vb: CType(Keys)
- uid: MLEM.Input.GenericInput.op_Implicit(MLEM.Input.MouseButton)~MLEM.Input.GenericInput
  commentId: M:MLEM.Input.GenericInput.op_Implicit(MLEM.Input.MouseButton)~MLEM.Input.GenericInput
  id: op_Implicit(MLEM.Input.MouseButton)~MLEM.Input.GenericInput
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: implicit operator GenericInput(MouseButton)
  nameWithType: GenericInput.implicit operator GenericInput(MouseButton)
  fullName: MLEM.Input.GenericInput.implicit operator MLEM.Input.GenericInput(MLEM.Input.MouseButton)
  type: Operator
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: op_Implicit
    path: ../MLEM/Input/GenericInput.cs
    startLine: 159
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Converts a <xref href="MLEM.Input.GenericInput.MouseButton" data-throw-if-not-resolved="false"></xref> to a generic input.
  example: []
  syntax:
    content: public static implicit operator GenericInput(MouseButton button)
    parameters:
    - id: button
      type: MLEM.Input.MouseButton
      description: The button to convert
    return:
      type: MLEM.Input.GenericInput
      description: The resulting generic input
    content.vb: Public Shared Widening Operator CType(button As MouseButton) As GenericInput
  overload: MLEM.Input.GenericInput.op_Implicit*
  nameWithType.vb: GenericInput.CType(MouseButton)
  fullName.vb: MLEM.Input.GenericInput.CType(MLEM.Input.MouseButton)
  name.vb: CType(MouseButton)
- uid: MLEM.Input.GenericInput.op_Implicit(Microsoft.Xna.Framework.Input.Buttons)~MLEM.Input.GenericInput
  commentId: M:MLEM.Input.GenericInput.op_Implicit(Microsoft.Xna.Framework.Input.Buttons)~MLEM.Input.GenericInput
  id: op_Implicit(Microsoft.Xna.Framework.Input.Buttons)~MLEM.Input.GenericInput
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: implicit operator GenericInput(Buttons)
  nameWithType: GenericInput.implicit operator GenericInput(Buttons)
  fullName: MLEM.Input.GenericInput.implicit operator MLEM.Input.GenericInput(Microsoft.Xna.Framework.Input.Buttons)
  type: Operator
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: op_Implicit
    path: ../MLEM/Input/GenericInput.cs
    startLine: 168
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Converts a <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref> to a generic input.
  example: []
  syntax:
    content: public static implicit operator GenericInput(Buttons button)
    parameters:
    - id: button
      type: Microsoft.Xna.Framework.Input.Buttons
      description: The buttons to convert
    return:
      type: MLEM.Input.GenericInput
      description: The resulting generic input
    content.vb: Public Shared Widening Operator CType(button As Buttons) As GenericInput
  overload: MLEM.Input.GenericInput.op_Implicit*
  nameWithType.vb: GenericInput.CType(Buttons)
  fullName.vb: MLEM.Input.GenericInput.CType(Microsoft.Xna.Framework.Input.Buttons)
  name.vb: CType(Buttons)
- uid: MLEM.Input.GenericInput.op_Implicit(MLEM.Input.GenericInput)~Microsoft.Xna.Framework.Input.Keys
  commentId: M:MLEM.Input.GenericInput.op_Implicit(MLEM.Input.GenericInput)~Microsoft.Xna.Framework.Input.Keys
  id: op_Implicit(MLEM.Input.GenericInput)~Microsoft.Xna.Framework.Input.Keys
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: implicit operator Keys(GenericInput)
  nameWithType: GenericInput.implicit operator Keys(GenericInput)
  fullName: MLEM.Input.GenericInput.implicit operator Microsoft.Xna.Framework.Input.Keys(MLEM.Input.GenericInput)
  type: Operator
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: op_Implicit
    path: ../MLEM/Input/GenericInput.cs
    startLine: 178
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Converts a generic input to a <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static implicit operator Keys(GenericInput input)
    parameters:
    - id: input
      type: MLEM.Input.GenericInput
      description: The input to convert
    return:
      type: Microsoft.Xna.Framework.Input.Keys
      description: The resulting keys
    content.vb: Public Shared Widening Operator CType(input As GenericInput) As Keys
  overload: MLEM.Input.GenericInput.op_Implicit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the given generic input's <xref href="MLEM.Input.GenericInput.Type" data-throw-if-not-resolved="false"></xref> is not <xref href="MLEM.Input.GenericInput.InputType.Keyboard" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Input.GenericInput.InputType.None" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: GenericInput.CType(GenericInput)
  fullName.vb: MLEM.Input.GenericInput.CType(MLEM.Input.GenericInput)
  name.vb: CType(GenericInput)
- uid: MLEM.Input.GenericInput.op_Implicit(MLEM.Input.GenericInput)~MLEM.Input.MouseButton
  commentId: M:MLEM.Input.GenericInput.op_Implicit(MLEM.Input.GenericInput)~MLEM.Input.MouseButton
  id: op_Implicit(MLEM.Input.GenericInput)~MLEM.Input.MouseButton
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: implicit operator MouseButton(GenericInput)
  nameWithType: GenericInput.implicit operator MouseButton(GenericInput)
  fullName: MLEM.Input.GenericInput.implicit operator MLEM.Input.MouseButton(MLEM.Input.GenericInput)
  type: Operator
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: op_Implicit
    path: ../MLEM/Input/GenericInput.cs
    startLine: 188
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Converts a generic input to a <xref href="MLEM.Input.GenericInput.MouseButton" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static implicit operator MouseButton(GenericInput input)
    parameters:
    - id: input
      type: MLEM.Input.GenericInput
      description: The input to convert
    return:
      type: MLEM.Input.MouseButton
      description: The resulting button
    content.vb: Public Shared Widening Operator CType(input As GenericInput) As MouseButton
  overload: MLEM.Input.GenericInput.op_Implicit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the given generic input's <xref href="MLEM.Input.GenericInput.Type" data-throw-if-not-resolved="false"></xref> is not <xref href="MLEM.Input.GenericInput.InputType.Mouse" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: GenericInput.CType(GenericInput)
  fullName.vb: MLEM.Input.GenericInput.CType(MLEM.Input.GenericInput)
  name.vb: CType(GenericInput)
- uid: MLEM.Input.GenericInput.op_Implicit(MLEM.Input.GenericInput)~Microsoft.Xna.Framework.Input.Buttons
  commentId: M:MLEM.Input.GenericInput.op_Implicit(MLEM.Input.GenericInput)~Microsoft.Xna.Framework.Input.Buttons
  id: op_Implicit(MLEM.Input.GenericInput)~Microsoft.Xna.Framework.Input.Buttons
  parent: MLEM.Input.GenericInput
  langs:
  - csharp
  - vb
  name: implicit operator Buttons(GenericInput)
  nameWithType: GenericInput.implicit operator Buttons(GenericInput)
  fullName: MLEM.Input.GenericInput.implicit operator Microsoft.Xna.Framework.Input.Buttons(MLEM.Input.GenericInput)
  type: Operator
  source:
    remote:
      path: MLEM/Input/GenericInput.cs
      branch: main
      repo: https://github.com/Ellpeck/MLEM
    id: op_Implicit
    path: ../MLEM/Input/GenericInput.cs
    startLine: 198
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: Converts a generic input to a <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static implicit operator Buttons(GenericInput input)
    parameters:
    - id: input
      type: MLEM.Input.GenericInput
      description: The input to convert
    return:
      type: Microsoft.Xna.Framework.Input.Buttons
      description: The resulting buttons
    content.vb: Public Shared Widening Operator CType(input As GenericInput) As Buttons
  overload: MLEM.Input.GenericInput.op_Implicit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the given generic input's <xref href="MLEM.Input.GenericInput.Type" data-throw-if-not-resolved="false"></xref> is not <xref href="MLEM.Input.GenericInput.InputType.Gamepad" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: GenericInput.CType(GenericInput)
  fullName.vb: MLEM.Input.GenericInput.CType(MLEM.Input.GenericInput)
  name.vb: CType(GenericInput)
references:
- uid: Microsoft.Xna.Framework.Input.Keys
  commentId: T:Microsoft.Xna.Framework.Input.Keys
  parent: Microsoft.Xna.Framework.Input
  isExternal: true
  name: Keys
  nameWithType: Keys
  fullName: Microsoft.Xna.Framework.Input.Keys
- uid: MLEM.Input.GenericInput.MouseButton
  commentId: P:MLEM.Input.GenericInput.MouseButton
  href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_MouseButton
  name: MouseButton
  nameWithType: GenericInput.MouseButton
  fullName: MLEM.Input.GenericInput.MouseButton
- uid: Microsoft.Xna.Framework.Input.Buttons
  commentId: T:Microsoft.Xna.Framework.Input.Buttons
  parent: Microsoft.Xna.Framework.Input
  isExternal: true
  name: Buttons
  nameWithType: Buttons
  fullName: Microsoft.Xna.Framework.Input.Buttons
- uid: MLEM.Input.GenericInput.Type
  commentId: F:MLEM.Input.GenericInput.Type
  href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_Type
  name: Type
  nameWithType: GenericInput.Type
  fullName: MLEM.Input.GenericInput.Type
- uid: System.Runtime.Serialization.DataContractAttribute
  commentId: T:System.Runtime.Serialization.DataContractAttribute
  parent: System.Runtime.Serialization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.runtime.serialization.datacontractattribute
  name: DataContractAttribute
  nameWithType: DataContractAttribute
  fullName: System.Runtime.Serialization.DataContractAttribute
- uid: MLEM.Input
  commentId: N:MLEM.Input
  href: MLEM.html
  name: MLEM.Input
  nameWithType: MLEM.Input
  fullName: MLEM.Input
  spec.csharp:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Input
    name: Input
    href: MLEM.Input.html
  spec.vb:
  - uid: MLEM
    name: MLEM
    href: MLEM.html
  - name: .
  - uid: MLEM.Input
    name: Input
    href: MLEM.Input.html
- uid: System.IEquatable{MLEM.Input.GenericInput}
  commentId: T:System.IEquatable{MLEM.Input.GenericInput}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<GenericInput>
  nameWithType: IEquatable<GenericInput>
  fullName: System.IEquatable<MLEM.Input.GenericInput>
  nameWithType.vb: IEquatable(Of GenericInput)
  fullName.vb: System.IEquatable(Of MLEM.Input.GenericInput)
  name.vb: IEquatable(Of GenericInput)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: MLEM.Input.GenericInput.MLEM.Input.KeysExtensions.GetModifier
  commentId: M:MLEM.Input.KeysExtensions.GetModifier(MLEM.Input.GenericInput)
  parent: MLEM.Input.KeysExtensions
  definition: MLEM.Input.KeysExtensions.GetModifier(MLEM.Input.GenericInput)
  href: MLEM.Input.KeysExtensions.html#MLEM_Input_KeysExtensions_GetModifier_MLEM_Input_GenericInput_
  name: GetModifier(GenericInput)
  nameWithType: KeysExtensions.GetModifier(GenericInput)
  fullName: MLEM.Input.KeysExtensions.GetModifier(MLEM.Input.GenericInput)
  spec.csharp:
  - uid: MLEM.Input.KeysExtensions.GetModifier(MLEM.Input.GenericInput)
    name: GetModifier
    href: MLEM.Input.KeysExtensions.html#MLEM_Input_KeysExtensions_GetModifier_MLEM_Input_GenericInput_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: )
  spec.vb:
  - uid: MLEM.Input.KeysExtensions.GetModifier(MLEM.Input.GenericInput)
    name: GetModifier
    href: MLEM.Input.KeysExtensions.html#MLEM_Input_KeysExtensions_GetModifier_MLEM_Input_GenericInput_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: )
- uid: MLEM.Input.GenericInput.MLEM.Input.KeysExtensions.IsModifier
  commentId: M:MLEM.Input.KeysExtensions.IsModifier(MLEM.Input.GenericInput)
  parent: MLEM.Input.KeysExtensions
  definition: MLEM.Input.KeysExtensions.IsModifier(MLEM.Input.GenericInput)
  href: MLEM.Input.KeysExtensions.html#MLEM_Input_KeysExtensions_IsModifier_MLEM_Input_GenericInput_
  name: IsModifier(GenericInput)
  nameWithType: KeysExtensions.IsModifier(GenericInput)
  fullName: MLEM.Input.KeysExtensions.IsModifier(MLEM.Input.GenericInput)
  spec.csharp:
  - uid: MLEM.Input.KeysExtensions.IsModifier(MLEM.Input.GenericInput)
    name: IsModifier
    href: MLEM.Input.KeysExtensions.html#MLEM_Input_KeysExtensions_IsModifier_MLEM_Input_GenericInput_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: )
  spec.vb:
  - uid: MLEM.Input.KeysExtensions.IsModifier(MLEM.Input.GenericInput)
    name: IsModifier
    href: MLEM.Input.KeysExtensions.html#MLEM_Input_KeysExtensions_IsModifier_MLEM_Input_GenericInput_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: )
- uid: Microsoft.Xna.Framework.Input
  commentId: N:Microsoft.Xna.Framework.Input
  isExternal: true
  name: Microsoft.Xna.Framework.Input
  nameWithType: Microsoft.Xna.Framework.Input
  fullName: Microsoft.Xna.Framework.Input
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Input
    name: Input
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Input
    name: Input
    isExternal: true
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Runtime
    name: Runtime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime
  - name: .
  - uid: System.Runtime.Serialization
    name: Serialization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime.serialization
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Runtime
    name: Runtime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime
  - name: .
  - uid: System.Runtime.Serialization
    name: Serialization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime.serialization
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MLEM.Input.KeysExtensions.GetModifier(MLEM.Input.GenericInput)
  commentId: M:MLEM.Input.KeysExtensions.GetModifier(MLEM.Input.GenericInput)
  href: MLEM.Input.KeysExtensions.html#MLEM_Input_KeysExtensions_GetModifier_MLEM_Input_GenericInput_
  name: GetModifier(GenericInput)
  nameWithType: KeysExtensions.GetModifier(GenericInput)
  fullName: MLEM.Input.KeysExtensions.GetModifier(MLEM.Input.GenericInput)
  spec.csharp:
  - uid: MLEM.Input.KeysExtensions.GetModifier(MLEM.Input.GenericInput)
    name: GetModifier
    href: MLEM.Input.KeysExtensions.html#MLEM_Input_KeysExtensions_GetModifier_MLEM_Input_GenericInput_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: )
  spec.vb:
  - uid: MLEM.Input.KeysExtensions.GetModifier(MLEM.Input.GenericInput)
    name: GetModifier
    href: MLEM.Input.KeysExtensions.html#MLEM_Input_KeysExtensions_GetModifier_MLEM_Input_GenericInput_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: )
- uid: MLEM.Input.KeysExtensions
  commentId: T:MLEM.Input.KeysExtensions
  parent: MLEM.Input
  href: MLEM.Input.KeysExtensions.html
  name: KeysExtensions
  nameWithType: KeysExtensions
  fullName: MLEM.Input.KeysExtensions
- uid: MLEM.Input.KeysExtensions.IsModifier(MLEM.Input.GenericInput)
  commentId: M:MLEM.Input.KeysExtensions.IsModifier(MLEM.Input.GenericInput)
  href: MLEM.Input.KeysExtensions.html#MLEM_Input_KeysExtensions_IsModifier_MLEM_Input_GenericInput_
  name: IsModifier(GenericInput)
  nameWithType: KeysExtensions.IsModifier(GenericInput)
  fullName: MLEM.Input.KeysExtensions.IsModifier(MLEM.Input.GenericInput)
  spec.csharp:
  - uid: MLEM.Input.KeysExtensions.IsModifier(MLEM.Input.GenericInput)
    name: IsModifier
    href: MLEM.Input.KeysExtensions.html#MLEM_Input_KeysExtensions_IsModifier_MLEM_Input_GenericInput_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: )
  spec.vb:
  - uid: MLEM.Input.KeysExtensions.IsModifier(MLEM.Input.GenericInput)
    name: IsModifier
    href: MLEM.Input.KeysExtensions.html#MLEM_Input_KeysExtensions_IsModifier_MLEM_Input_GenericInput_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: )
- uid: MLEM.Input.GenericInput
  commentId: T:MLEM.Input.GenericInput
  parent: MLEM.Input
  href: MLEM.Input.GenericInput.html
  name: GenericInput
  nameWithType: GenericInput
  fullName: MLEM.Input.GenericInput
- uid: MLEM.Input.GenericInput[]
  isExternal: true
  href: MLEM.Input.GenericInput.html
  name: GenericInput[]
  nameWithType: GenericInput[]
  fullName: MLEM.Input.GenericInput[]
  nameWithType.vb: GenericInput()
  fullName.vb: MLEM.Input.GenericInput()
  name.vb: GenericInput()
  spec.csharp:
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: (
  - name: )
- uid: MLEM.Input.MouseButton
  commentId: T:MLEM.Input.MouseButton
  parent: MLEM.Input
  href: MLEM.Input.MouseButton.html
  name: MouseButton
  nameWithType: MouseButton
  fullName: MLEM.Input.MouseButton
- uid: MLEM.Input.GenericInput.InputType
  commentId: T:MLEM.Input.GenericInput.InputType
  parent: MLEM.Input
  href: MLEM.Input.GenericInput.html
  name: GenericInput.InputType
  nameWithType: GenericInput.InputType
  fullName: MLEM.Input.GenericInput.InputType
  spec.csharp:
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: .
  - uid: MLEM.Input.GenericInput.InputType
    name: InputType
    href: MLEM.Input.GenericInput.InputType.html
  spec.vb:
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: .
  - uid: MLEM.Input.GenericInput.InputType
    name: InputType
    href: MLEM.Input.GenericInput.InputType.html
- uid: MLEM.Input.GenericInput.InputType.Keyboard
  commentId: F:MLEM.Input.GenericInput.InputType.Keyboard
  href: MLEM.Input.GenericInput.InputType.html#MLEM_Input_GenericInput_InputType_Keyboard
  name: Keyboard
  nameWithType: GenericInput.InputType.Keyboard
  fullName: MLEM.Input.GenericInput.InputType.Keyboard
- uid: MLEM.Input.GenericInput.InputType.None
  commentId: F:MLEM.Input.GenericInput.InputType.None
  href: MLEM.Input.GenericInput.InputType.html#MLEM_Input_GenericInput_InputType_None
  name: None
  nameWithType: GenericInput.InputType.None
  fullName: MLEM.Input.GenericInput.InputType.None
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: MLEM.Input.GenericInput.Key*
  commentId: Overload:MLEM.Input.GenericInput.Key
  href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_Key
  name: Key
  nameWithType: GenericInput.Key
  fullName: MLEM.Input.GenericInput.Key
- uid: MLEM.Input.GenericInput.InputType.Mouse
  commentId: F:MLEM.Input.GenericInput.InputType.Mouse
  href: MLEM.Input.GenericInput.InputType.html#MLEM_Input_GenericInput_InputType_Mouse
  name: Mouse
  nameWithType: GenericInput.InputType.Mouse
  fullName: MLEM.Input.GenericInput.InputType.Mouse
- uid: MLEM.Input.GenericInput.MouseButton*
  commentId: Overload:MLEM.Input.GenericInput.MouseButton
  href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_MouseButton
  name: MouseButton
  nameWithType: GenericInput.MouseButton
  fullName: MLEM.Input.GenericInput.MouseButton
- uid: MLEM.Input.GenericInput.InputType.Gamepad
  commentId: F:MLEM.Input.GenericInput.InputType.Gamepad
  href: MLEM.Input.GenericInput.InputType.html#MLEM_Input_GenericInput_InputType_Gamepad
  name: Gamepad
  nameWithType: GenericInput.InputType.Gamepad
  fullName: MLEM.Input.GenericInput.InputType.Gamepad
- uid: MLEM.Input.GenericInput.Button*
  commentId: Overload:MLEM.Input.GenericInput.Button
  href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_Button
  name: Button
  nameWithType: GenericInput.Button
  fullName: MLEM.Input.GenericInput.Button
- uid: MLEM.Input.GenericInput.#ctor*
  commentId: Overload:MLEM.Input.GenericInput.#ctor
  href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput__ctor_Microsoft_Xna_Framework_Input_Keys_
  name: GenericInput
  nameWithType: GenericInput.GenericInput
  fullName: MLEM.Input.GenericInput.GenericInput
  nameWithType.vb: GenericInput.New
  fullName.vb: MLEM.Input.GenericInput.New
  name.vb: New
- uid: System.Enum
  commentId: T:System.Enum
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.enum
  name: Enum
  nameWithType: Enum
  fullName: System.Enum
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: MLEM.Input.GenericInput.ToString*
  commentId: Overload:MLEM.Input.GenericInput.ToString
  href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_ToString
  name: ToString
  nameWithType: GenericInput.ToString
  fullName: MLEM.Input.GenericInput.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: MLEM.Input.GenericInput.Equals*
  commentId: Overload:MLEM.Input.GenericInput.Equals
  href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_Equals_MLEM_Input_GenericInput_
  name: Equals
  nameWithType: GenericInput.Equals
  fullName: MLEM.Input.GenericInput.Equals
- uid: System.IEquatable{MLEM.Input.GenericInput}.Equals(MLEM.Input.GenericInput)
  commentId: M:System.IEquatable{MLEM.Input.GenericInput}.Equals(MLEM.Input.GenericInput)
  parent: System.IEquatable{MLEM.Input.GenericInput}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(GenericInput)
  nameWithType: IEquatable<GenericInput>.Equals(GenericInput)
  fullName: System.IEquatable<MLEM.Input.GenericInput>.Equals(MLEM.Input.GenericInput)
  nameWithType.vb: IEquatable(Of GenericInput).Equals(GenericInput)
  fullName.vb: System.IEquatable(Of MLEM.Input.GenericInput).Equals(MLEM.Input.GenericInput)
  spec.csharp:
  - uid: System.IEquatable{MLEM.Input.GenericInput}.Equals(MLEM.Input.GenericInput)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{MLEM.Input.GenericInput}.Equals(MLEM.Input.GenericInput)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: MLEM.Input.GenericInput.GetHashCode*
  commentId: Overload:MLEM.Input.GenericInput.GetHashCode
  href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_GetHashCode
  name: GetHashCode
  nameWithType: GenericInput.GetHashCode
  fullName: MLEM.Input.GenericInput.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: MLEM.Input.GenericInput.Equals(MLEM.Input.GenericInput)
  commentId: M:MLEM.Input.GenericInput.Equals(MLEM.Input.GenericInput)
  href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_Equals_MLEM_Input_GenericInput_
  name: Equals(GenericInput)
  nameWithType: GenericInput.Equals(GenericInput)
  fullName: MLEM.Input.GenericInput.Equals(MLEM.Input.GenericInput)
  spec.csharp:
  - uid: MLEM.Input.GenericInput.Equals(MLEM.Input.GenericInput)
    name: Equals
    href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_Equals_MLEM_Input_GenericInput_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: )
  spec.vb:
  - uid: MLEM.Input.GenericInput.Equals(MLEM.Input.GenericInput)
    name: Equals
    href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_Equals_MLEM_Input_GenericInput_
  - name: (
  - uid: MLEM.Input.GenericInput
    name: GenericInput
    href: MLEM.Input.GenericInput.html
  - name: )
- uid: MLEM.Input.GenericInput.op_Equality*
  commentId: Overload:MLEM.Input.GenericInput.op_Equality
  href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_op_Equality_MLEM_Input_GenericInput_MLEM_Input_GenericInput_
  name: operator ==
  nameWithType: GenericInput.operator ==
  fullName: MLEM.Input.GenericInput.operator ==
  nameWithType.vb: GenericInput.=
  fullName.vb: MLEM.Input.GenericInput.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: MLEM.Input.GenericInput.op_Equality*
    name: ==
    href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_op_Equality_MLEM_Input_GenericInput_MLEM_Input_GenericInput_
- uid: MLEM.Input.GenericInput.op_Inequality*
  commentId: Overload:MLEM.Input.GenericInput.op_Inequality
  href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_op_Inequality_MLEM_Input_GenericInput_MLEM_Input_GenericInput_
  name: operator !=
  nameWithType: GenericInput.operator !=
  fullName: MLEM.Input.GenericInput.operator !=
  nameWithType.vb: GenericInput.<>
  fullName.vb: MLEM.Input.GenericInput.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: MLEM.Input.GenericInput.op_Inequality*
    name: '!='
    href: MLEM.Input.GenericInput.html#MLEM_Input_GenericInput_op_Inequality_MLEM_Input_GenericInput_MLEM_Input_GenericInput_
- uid: MLEM.Input.GenericInput.op_Implicit*
  commentId: Overload:MLEM.Input.GenericInput.op_Implicit
  name: implicit operator
  nameWithType: GenericInput.implicit operator
  fullName: MLEM.Input.GenericInput.implicit operator
  nameWithType.vb: GenericInput.CType
  fullName.vb: MLEM.Input.GenericInput.CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
